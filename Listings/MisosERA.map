Component: Arm Compiler for Embedded 6.19 Tool: armlink [5e73cb00]

==============================================================================

Section Cross References

    main.o(.text.GPIO_Init) refers to apm32f4xx_rcm.o(.text.RCM_EnableAHB1PeriphClock) for RCM_EnableAHB1PeriphClock
    main.o(.text.GPIO_Init) refers to apm32f4xx_gpio.o(.text.GPIO_Config) for GPIO_Config
    main.o(.ARM.exidx.text.GPIO_Init) refers to main.o(.text.GPIO_Init) for [Anonymous Symbol]
    main.o(.text.CAN_Init) refers to apm32f4xx_rcm.o(.text.RCM_EnableAHB1PeriphClock) for RCM_EnableAHB1PeriphClock
    main.o(.text.CAN_Init) refers to apm32f4xx_gpio.o(.text.GPIO_ConfigPinAF) for GPIO_ConfigPinAF
    main.o(.text.CAN_Init) refers to apm32f4xx_gpio.o(.text.GPIO_Config) for GPIO_Config
    main.o(.text.CAN_Init) refers to apm32f4xx_gpio.o(.text.GPIO_ResetBit) for GPIO_ResetBit
    main.o(.text.CAN_Init) refers to apm32f4xx_rcm.o(.text.RCM_EnableAPB1PeriphClock) for RCM_EnableAPB1PeriphClock
    main.o(.text.CAN_Init) refers to main.o(.text.Delay) for Delay
    main.o(.text.CAN_Init) refers to apm32f4xx_can.o(.text.CAN_DisableDBGFreeze) for CAN_DisableDBGFreeze
    main.o(.text.CAN_Init) refers to apm32f4xx_can.o(.text.CAN_ConfigFilter) for CAN_ConfigFilter
    main.o(.text.CAN_Init) refers to apm32f4xx_can.o(.text.CAN_Config) for CAN_Config
    main.o(.text.CAN_Init) refers to main.o(.bss.StatusCAN) for StatusCAN
    main.o(.text.CAN_Init) refers to apm32f4xx_can.o(.text.CAN_OperatingMode) for CAN_OperatingMode
    main.o(.text.CAN_Init) refers to main.o(.bss.StatucCANMode) for StatucCANMode
    main.o(.ARM.exidx.text.CAN_Init) refers to main.o(.text.CAN_Init) for [Anonymous Symbol]
    main.o(.ARM.exidx.text.Delay) refers to main.o(.text.Delay) for [Anonymous Symbol]
    main.o(.text.CAN1_TX_IRQHandler) refers to main.o(.text.Delay) for Delay
    main.o(.ARM.exidx.text.CAN1_TX_IRQHandler) refers to main.o(.text.CAN1_TX_IRQHandler) for [Anonymous Symbol]
    main.o(.text.CAN1_RX0_IRQHandler) refers to apm32f4xx_can.o(.text.CAN_RxMessage) for CAN_RxMessage
    main.o(.text.CAN1_RX0_IRQHandler) refers to apm32f4xx_can.o(.text.CAN_ReleaseFIFO) for CAN_ReleaseFIFO
    main.o(.text.CAN1_RX0_IRQHandler) refers to apm32f4xx_gpio.o(.text.GPIO_ToggleBit) for GPIO_ToggleBit
    main.o(.text.CAN1_RX0_IRQHandler) refers to main.o(.text.Delay) for Delay
    main.o(.ARM.exidx.text.CAN1_RX0_IRQHandler) refers to main.o(.text.CAN1_RX0_IRQHandler) for [Anonymous Symbol]
    main.o(.text.CAN1_RX1_IRQHandler) refers to apm32f4xx_gpio.o(.text.GPIO_ToggleBit) for GPIO_ToggleBit
    main.o(.text.CAN1_RX1_IRQHandler) refers to main.o(.text.Delay) for Delay
    main.o(.ARM.exidx.text.CAN1_RX1_IRQHandler) refers to main.o(.text.CAN1_RX1_IRQHandler) for [Anonymous Symbol]
    main.o(.text.RCM_Init) refers to apm32f4xx_rcm.o(.text.RCM_ConfigHSE) for RCM_ConfigHSE
    main.o(.text.RCM_Init) refers to apm32f4xx_rcm.o(.text.RCM_WaitHSEReady) for RCM_WaitHSEReady
    main.o(.text.RCM_Init) refers to apm32f4xx_rcm.o(.text.RCM_ConfigPLL1) for RCM_ConfigPLL1
    main.o(.text.RCM_Init) refers to apm32f4xx_rcm.o(.text.RCM_ConfigPLL2) for RCM_ConfigPLL2
    main.o(.text.RCM_Init) refers to apm32f4xx_rcm.o(.text.RCM_EnablePLL1) for RCM_EnablePLL1
    main.o(.text.RCM_Init) refers to apm32f4xx_rcm.o(.text.RCM_EnablePLL2) for RCM_EnablePLL2
    main.o(.text.RCM_Init) refers to apm32f4xx_rcm.o(.text.RCM_ConfigSYSCLK) for RCM_ConfigSYSCLK
    main.o(.text.RCM_Init) refers to apm32f4xx_rcm.o(.text.RCM_DisableHSI) for RCM_DisableHSI
    main.o(.text.RCM_Init) refers to apm32f4xx_rcm.o(.text.RCM_ConfigAHB) for RCM_ConfigAHB
    main.o(.text.RCM_Init) refers to apm32f4xx_rcm.o(.text.RCM_ConfigAPB1) for RCM_ConfigAPB1
    main.o(.text.RCM_Init) refers to apm32f4xx_rcm.o(.text.RCM_ConfigAPB2) for RCM_ConfigAPB2
    main.o(.text.RCM_Init) refers to apm32f4xx_rcm.o(.text.RCM_EnableAPB2PeriphClock) for RCM_EnableAPB2PeriphClock
    main.o(.text.RCM_Init) refers to system_apm32f4xx.o(.text.SystemCoreClockUpdate) for SystemCoreClockUpdate
    main.o(.ARM.exidx.text.RCM_Init) refers to main.o(.text.RCM_Init) for [Anonymous Symbol]
    main.o(.text.main_Init) refers to main.o(.text.RCM_Init) for RCM_Init
    main.o(.text.main_Init) refers to main.o(.text.GPIO_Init) for GPIO_Init
    main.o(.text.main_Init) refers to main.o(.text.CAN_Init) for CAN_Init
    main.o(.text.main_Init) refers to main.o(.text.IRQ_Init) for IRQ_Init
    main.o(.text.main_Init) refers to main.o(.text.I2C_Setting) for I2C_Setting
    main.o(.text.main_Init) refers to main.o(.text.Delay) for Delay
    main.o(.ARM.exidx.text.main_Init) refers to main.o(.text.main_Init) for [Anonymous Symbol]
    main.o(.ARM.exidx.text.IRQ_Init) refers to main.o(.text.IRQ_Init) for [Anonymous Symbol]
    main.o(.text.I2C_Setting) refers to i2c.o(.text.rcc_I2C_init) for rcc_I2C_init
    main.o(.text.I2C_Setting) refers to i2c.o(.text.i2c_setup_gpio) for i2c_setup_gpio
    main.o(.text.I2C_Setting) refers to i2c.o(.text.i2c_init) for i2c_init
    main.o(.ARM.exidx.text.I2C_Setting) refers to main.o(.text.I2C_Setting) for [Anonymous Symbol]
    main.o(.text.main) refers to main.o(.text.main_Init) for main_Init
    main.o(.text.main) refers to i2c.o(.text.i2c_write) for i2c_write
    main.o(.text.main) refers to main.o(.text.Delay) for Delay
    main.o(.text.main) refers to i2c.o(.text.i2c_read) for i2c_read
    main.o(.text.main) refers to apm32f4xx_gpio.o(.text.GPIO_ToggleBit) for GPIO_ToggleBit
    main.o(.ARM.exidx.text.main) refers to main.o(.text.main) for [Anonymous Symbol]
    i2c.o(.text.i2c_setup_gpio) refers to apm32f4xx_gpio.o(.text.GPIO_ConfigPinAF) for GPIO_ConfigPinAF
    i2c.o(.ARM.exidx.text.i2c_setup_gpio) refers to i2c.o(.text.i2c_setup_gpio) for [Anonymous Symbol]
    i2c.o(.text.rcc_I2C_init) refers to apm32f4xx_rcm.o(.text.RCM_EnableAHB1PeriphClock) for RCM_EnableAHB1PeriphClock
    i2c.o(.text.rcc_I2C_init) refers to apm32f4xx_rcm.o(.text.RCM_EnableAPB1PeriphClock) for RCM_EnableAPB1PeriphClock
    i2c.o(.ARM.exidx.text.rcc_I2C_init) refers to i2c.o(.text.rcc_I2C_init) for [Anonymous Symbol]
    i2c.o(.ARM.exidx.text.i2c_init) refers to i2c.o(.text.i2c_init) for [Anonymous Symbol]
    i2c.o(.ARM.exidx.text.i2c_read) refers to i2c.o(.text.i2c_read) for [Anonymous Symbol]
    i2c.o(.ARM.exidx.text.i2c_read_many) refers to i2c.o(.text.i2c_read_many) for [Anonymous Symbol]
    i2c.o(.ARM.exidx.text.i2c_write_many) refers to i2c.o(.text.i2c_write_many) for [Anonymous Symbol]
    i2c.o(.ARM.exidx.text.i2c_write) refers to i2c.o(.text.i2c_write) for [Anonymous Symbol]
    rtx_lib.o(.text._platform_post_stackheap_init) refers to rtx_kernel.o(.text.osKernelInitialize) for osKernelInitialize
    rtx_lib.o(.ARM.exidx.text._platform_post_stackheap_init) refers to rtx_lib.o(.text._platform_post_stackheap_init) for [Anonymous Symbol]
    rtx_lib.o(.text.__user_perthread_libspace) refers to rtx_lib.o(.text.os_kernel_is_active) for os_kernel_is_active
    rtx_lib.o(.text.__user_perthread_libspace) refers to rtx_thread.o(.text.osThreadGetId) for osThreadGetId
    rtx_lib.o(.text.__user_perthread_libspace) refers to rtx_lib.o(.bss.os.libspace) for os_libspace_id
    rtx_lib.o(.text.__user_perthread_libspace) refers to rtx_kernel.o(.text.osRtxKernelErrorNotify) for osRtxKernelErrorNotify
    rtx_lib.o(.ARM.exidx.text.__user_perthread_libspace) refers to rtx_lib.o(.text.__user_perthread_libspace) for [Anonymous Symbol]
    rtx_lib.o(.text.os_kernel_is_active) refers to rtx_lib.o(.bss.os_kernel_is_active.os_kernel_active) for os_kernel_is_active.os_kernel_active
    rtx_lib.o(.text.os_kernel_is_active) refers to rtx_kernel.o(.text.osKernelGetState) for osKernelGetState
    rtx_lib.o(.ARM.exidx.text.os_kernel_is_active) refers to rtx_lib.o(.text.os_kernel_is_active) for [Anonymous Symbol]
    rtx_lib.o(.text._mutex_initialize) refers to rtx_mutex.o(.text.osMutexNew) for osMutexNew
    rtx_lib.o(.text._mutex_initialize) refers to rtx_kernel.o(.text.osRtxKernelErrorNotify) for osRtxKernelErrorNotify
    rtx_lib.o(.ARM.exidx.text._mutex_initialize) refers to rtx_lib.o(.text._mutex_initialize) for [Anonymous Symbol]
    rtx_lib.o(.text._mutex_acquire) refers to rtx_lib.o(.text.os_kernel_is_active) for os_kernel_is_active
    rtx_lib.o(.text._mutex_acquire) refers to rtx_mutex.o(.text.osMutexAcquire) for osMutexAcquire
    rtx_lib.o(.ARM.exidx.text._mutex_acquire) refers to rtx_lib.o(.text._mutex_acquire) for [Anonymous Symbol]
    rtx_lib.o(.text._mutex_release) refers to rtx_lib.o(.text.os_kernel_is_active) for os_kernel_is_active
    rtx_lib.o(.text._mutex_release) refers to rtx_mutex.o(.text.osMutexRelease) for osMutexRelease
    rtx_lib.o(.ARM.exidx.text._mutex_release) refers to rtx_lib.o(.text._mutex_release) for [Anonymous Symbol]
    rtx_lib.o(.text._mutex_free) refers to rtx_mutex.o(.text.osMutexDelete) for osMutexDelete
    rtx_lib.o(.ARM.exidx.text._mutex_free) refers to rtx_lib.o(.text._mutex_free) for [Anonymous Symbol]
    rtx_lib.o(.rodata.os_idle_thread_attr) refers to rtx_lib.o(.bss.os.thread.cb) for [Anonymous Symbol]
    rtx_lib.o(.rodata.os_idle_thread_attr) refers to rtx_lib.o(.bss.os.thread.idle.stack) for [Anonymous Symbol]
    rtx_lib.o(.rodata.os_timer_thread_attr) refers to rtx_lib.o(.bss.os.thread.cb) for [Anonymous Symbol]
    rtx_lib.o(.rodata.os_timer_thread_attr) refers to rtx_lib.o(.bss.os.thread.timer.stack) for [Anonymous Symbol]
    rtx_lib.o(.rodata.os_timer_mq_attr) refers to rtx_lib.o(.bss.os.msgqueue.cb) for [Anonymous Symbol]
    rtx_lib.o(.rodata.os_timer_mq_attr) refers to rtx_lib.o(.bss.os.msgqueue.mem) for [Anonymous Symbol]
    rtx_lib.o(.rodata) refers to rtx_lib.o(.bss.os) for [Anonymous Symbol]
    rtx_lib.o(.rodata) refers to rtx_lib.o(.rodata.os_idle_thread_attr) for [Anonymous Symbol]
    rtx_lib.o(.rodata) refers to rtx_lib.o(.rodata.os_timer_thread_attr) for [Anonymous Symbol]
    rtx_lib.o(.rodata) refers to rtx_timer.o(.text.osRtxTimerThread) for osRtxTimerThread
    rtx_lib.o(.rodata) refers to rtx_timer.o(.text.osRtxTimerSetup) for osRtxTimerSetup
    rtx_lib.o(.rodata) refers to rtx_lib.o(.rodata.os_timer_mq_attr) for [Anonymous Symbol]
    rtx_lib.o(.rodata.irqRtxLibRef) refers to irq_armv7m.o(.rodata) for irqRtxLib
    rtx_config.o(.ARM.exidx.text.osRtxIdleThread) refers to rtx_config.o(.text.osRtxIdleThread) for [Anonymous Symbol]
    rtx_config.o(.ARM.exidx.text.osRtxErrorNotify) refers to rtx_config.o(.text.osRtxErrorNotify) for [Anonymous Symbol]
    apm32f4xx_can.o(.text.CAN_Reset) refers to apm32f4xx_rcm.o(.text.RCM_EnableAPB1PeriphReset) for RCM_EnableAPB1PeriphReset
    apm32f4xx_can.o(.text.CAN_Reset) refers to apm32f4xx_rcm.o(.text.RCM_DisableAPB1PeriphReset) for RCM_DisableAPB1PeriphReset
    apm32f4xx_can.o(.ARM.exidx.text.CAN_Reset) refers to apm32f4xx_can.o(.text.CAN_Reset) for [Anonymous Symbol]
    apm32f4xx_can.o(.ARM.exidx.text.CAN_Config) refers to apm32f4xx_can.o(.text.CAN_Config) for [Anonymous Symbol]
    apm32f4xx_can.o(.ARM.exidx.text.CAN_ConfigFilter) refers to apm32f4xx_can.o(.text.CAN_ConfigFilter) for [Anonymous Symbol]
    apm32f4xx_can.o(.ARM.exidx.text.CAN_ConfigStructInit) refers to apm32f4xx_can.o(.text.CAN_ConfigStructInit) for [Anonymous Symbol]
    apm32f4xx_can.o(.ARM.exidx.text.CAN_SlaveStartBank) refers to apm32f4xx_can.o(.text.CAN_SlaveStartBank) for [Anonymous Symbol]
    apm32f4xx_can.o(.ARM.exidx.text.CAN_EnableDBGFreeze) refers to apm32f4xx_can.o(.text.CAN_EnableDBGFreeze) for [Anonymous Symbol]
    apm32f4xx_can.o(.ARM.exidx.text.CAN_DisableDBGFreeze) refers to apm32f4xx_can.o(.text.CAN_DisableDBGFreeze) for [Anonymous Symbol]
    apm32f4xx_can.o(.ARM.exidx.text.CAN_TxMessage) refers to apm32f4xx_can.o(.text.CAN_TxMessage) for [Anonymous Symbol]
    apm32f4xx_can.o(.ARM.exidx.text.CAN_TxMessageStatus) refers to apm32f4xx_can.o(.text.CAN_TxMessageStatus) for [Anonymous Symbol]
    apm32f4xx_can.o(.ARM.exidx.text.CAN_CancelTxMailbox) refers to apm32f4xx_can.o(.text.CAN_CancelTxMailbox) for [Anonymous Symbol]
    apm32f4xx_can.o(.ARM.exidx.text.CAN_RxMessage) refers to apm32f4xx_can.o(.text.CAN_RxMessage) for [Anonymous Symbol]
    apm32f4xx_can.o(.ARM.exidx.text.CAN_ReleaseFIFO) refers to apm32f4xx_can.o(.text.CAN_ReleaseFIFO) for [Anonymous Symbol]
    apm32f4xx_can.o(.ARM.exidx.text.CAN_PendingMessage) refers to apm32f4xx_can.o(.text.CAN_PendingMessage) for [Anonymous Symbol]
    apm32f4xx_can.o(.ARM.exidx.text.CAN_OperatingMode) refers to apm32f4xx_can.o(.text.CAN_OperatingMode) for [Anonymous Symbol]
    apm32f4xx_can.o(.ARM.exidx.text.CAN_SleepMode) refers to apm32f4xx_can.o(.text.CAN_SleepMode) for [Anonymous Symbol]
    apm32f4xx_can.o(.ARM.exidx.text.CAN_WakeUpMode) refers to apm32f4xx_can.o(.text.CAN_WakeUpMode) for [Anonymous Symbol]
    apm32f4xx_can.o(.ARM.exidx.text.CAN_ReadLastErrorCode) refers to apm32f4xx_can.o(.text.CAN_ReadLastErrorCode) for [Anonymous Symbol]
    apm32f4xx_can.o(.ARM.exidx.text.CAN_ReadRxErrorCounter) refers to apm32f4xx_can.o(.text.CAN_ReadRxErrorCounter) for [Anonymous Symbol]
    apm32f4xx_can.o(.ARM.exidx.text.CAN_ReadLSBTxErrorCounter) refers to apm32f4xx_can.o(.text.CAN_ReadLSBTxErrorCounter) for [Anonymous Symbol]
    apm32f4xx_can.o(.ARM.exidx.text.CAN_EnableInterrupt) refers to apm32f4xx_can.o(.text.CAN_EnableInterrupt) for [Anonymous Symbol]
    apm32f4xx_can.o(.ARM.exidx.text.CAN_DisableInterrupt) refers to apm32f4xx_can.o(.text.CAN_DisableInterrupt) for [Anonymous Symbol]
    apm32f4xx_can.o(.ARM.exidx.text.CAN_ReadStatusFlag) refers to apm32f4xx_can.o(.text.CAN_ReadStatusFlag) for [Anonymous Symbol]
    apm32f4xx_can.o(.ARM.exidx.text.CAN_ClearStatusFlag) refers to apm32f4xx_can.o(.text.CAN_ClearStatusFlag) for [Anonymous Symbol]
    apm32f4xx_can.o(.ARM.exidx.text.CAN_ReadIntFlag) refers to apm32f4xx_can.o(.text.CAN_ReadIntFlag) for [Anonymous Symbol]
    apm32f4xx_can.o(.ARM.exidx.text.CAN_ClearIntFlag) refers to apm32f4xx_can.o(.text.CAN_ClearIntFlag) for [Anonymous Symbol]
    apm32f4xx_eint.o(.ARM.exidx.text.EINT_Reset) refers to apm32f4xx_eint.o(.text.EINT_Reset) for [Anonymous Symbol]
    apm32f4xx_eint.o(.ARM.exidx.text.EINT_Config) refers to apm32f4xx_eint.o(.text.EINT_Config) for [Anonymous Symbol]
    apm32f4xx_eint.o(.ARM.exidx.text.EINT_ConfigStructInit) refers to apm32f4xx_eint.o(.text.EINT_ConfigStructInit) for [Anonymous Symbol]
    apm32f4xx_eint.o(.ARM.exidx.text.EINT_SelectSWInterrupt) refers to apm32f4xx_eint.o(.text.EINT_SelectSWInterrupt) for [Anonymous Symbol]
    apm32f4xx_eint.o(.ARM.exidx.text.EINT_ReadStatusFlag) refers to apm32f4xx_eint.o(.text.EINT_ReadStatusFlag) for [Anonymous Symbol]
    apm32f4xx_eint.o(.ARM.exidx.text.EINT_ClearStatusFlag) refers to apm32f4xx_eint.o(.text.EINT_ClearStatusFlag) for [Anonymous Symbol]
    apm32f4xx_eint.o(.ARM.exidx.text.EINT_ReadIntFlag) refers to apm32f4xx_eint.o(.text.EINT_ReadIntFlag) for [Anonymous Symbol]
    apm32f4xx_eint.o(.ARM.exidx.text.EINT_ClearIntFlag) refers to apm32f4xx_eint.o(.text.EINT_ClearIntFlag) for [Anonymous Symbol]
    apm32f4xx_fmc.o(.ARM.exidx.text.FMC_ConfigLatency) refers to apm32f4xx_fmc.o(.text.FMC_ConfigLatency) for [Anonymous Symbol]
    apm32f4xx_fmc.o(.ARM.exidx.text.FMC_EnablePrefetchBuffer) refers to apm32f4xx_fmc.o(.text.FMC_EnablePrefetchBuffer) for [Anonymous Symbol]
    apm32f4xx_fmc.o(.ARM.exidx.text.FMC_DisablePrefetchBuffer) refers to apm32f4xx_fmc.o(.text.FMC_DisablePrefetchBuffer) for [Anonymous Symbol]
    apm32f4xx_fmc.o(.ARM.exidx.text.FMC_EnableInstructionCache) refers to apm32f4xx_fmc.o(.text.FMC_EnableInstructionCache) for [Anonymous Symbol]
    apm32f4xx_fmc.o(.ARM.exidx.text.FMC_DisableInstructionCache) refers to apm32f4xx_fmc.o(.text.FMC_DisableInstructionCache) for [Anonymous Symbol]
    apm32f4xx_fmc.o(.ARM.exidx.text.FMC_EnableDataCache) refers to apm32f4xx_fmc.o(.text.FMC_EnableDataCache) for [Anonymous Symbol]
    apm32f4xx_fmc.o(.ARM.exidx.text.FMC_DisableDataCache) refers to apm32f4xx_fmc.o(.text.FMC_DisableDataCache) for [Anonymous Symbol]
    apm32f4xx_fmc.o(.ARM.exidx.text.FMC_ResetInstructionCache) refers to apm32f4xx_fmc.o(.text.FMC_ResetInstructionCache) for [Anonymous Symbol]
    apm32f4xx_fmc.o(.ARM.exidx.text.FMC_ResetDataCache) refers to apm32f4xx_fmc.o(.text.FMC_ResetDataCache) for [Anonymous Symbol]
    apm32f4xx_fmc.o(.ARM.exidx.text.FMC_Unlock) refers to apm32f4xx_fmc.o(.text.FMC_Unlock) for [Anonymous Symbol]
    apm32f4xx_fmc.o(.ARM.exidx.text.FMC_Lock) refers to apm32f4xx_fmc.o(.text.FMC_Lock) for [Anonymous Symbol]
    apm32f4xx_fmc.o(.text.FMC_EraseSector) refers to apm32f4xx_fmc.o(.text.FMC_WaitForLastOperation) for FMC_WaitForLastOperation
    apm32f4xx_fmc.o(.ARM.exidx.text.FMC_EraseSector) refers to apm32f4xx_fmc.o(.text.FMC_EraseSector) for [Anonymous Symbol]
    apm32f4xx_fmc.o(.text.FMC_WaitForLastOperation) refers to apm32f4xx_fmc.o(.text.FMC_ReadStatus) for FMC_ReadStatus
    apm32f4xx_fmc.o(.ARM.exidx.text.FMC_WaitForLastOperation) refers to apm32f4xx_fmc.o(.text.FMC_WaitForLastOperation) for [Anonymous Symbol]
    apm32f4xx_fmc.o(.text.FMC_EraseAllSectors) refers to apm32f4xx_fmc.o(.text.FMC_WaitForLastOperation) for FMC_WaitForLastOperation
    apm32f4xx_fmc.o(.ARM.exidx.text.FMC_EraseAllSectors) refers to apm32f4xx_fmc.o(.text.FMC_EraseAllSectors) for [Anonymous Symbol]
    apm32f4xx_fmc.o(.text.FMC_ProgramDoubleWord) refers to apm32f4xx_fmc.o(.text.FMC_WaitForLastOperation) for FMC_WaitForLastOperation
    apm32f4xx_fmc.o(.ARM.exidx.text.FMC_ProgramDoubleWord) refers to apm32f4xx_fmc.o(.text.FMC_ProgramDoubleWord) for [Anonymous Symbol]
    apm32f4xx_fmc.o(.text.FMC_ProgramWord) refers to apm32f4xx_fmc.o(.text.FMC_WaitForLastOperation) for FMC_WaitForLastOperation
    apm32f4xx_fmc.o(.ARM.exidx.text.FMC_ProgramWord) refers to apm32f4xx_fmc.o(.text.FMC_ProgramWord) for [Anonymous Symbol]
    apm32f4xx_fmc.o(.text.FMC_ProgramHalfWord) refers to apm32f4xx_fmc.o(.text.FMC_WaitForLastOperation) for FMC_WaitForLastOperation
    apm32f4xx_fmc.o(.ARM.exidx.text.FMC_ProgramHalfWord) refers to apm32f4xx_fmc.o(.text.FMC_ProgramHalfWord) for [Anonymous Symbol]
    apm32f4xx_fmc.o(.text.FMC_ProgramByte) refers to apm32f4xx_fmc.o(.text.FMC_WaitForLastOperation) for FMC_WaitForLastOperation
    apm32f4xx_fmc.o(.ARM.exidx.text.FMC_ProgramByte) refers to apm32f4xx_fmc.o(.text.FMC_ProgramByte) for [Anonymous Symbol]
    apm32f4xx_fmc.o(.ARM.exidx.text.FMC_UnlockOptionByte) refers to apm32f4xx_fmc.o(.text.FMC_UnlockOptionByte) for [Anonymous Symbol]
    apm32f4xx_fmc.o(.ARM.exidx.text.FMC_LockOptionByte) refers to apm32f4xx_fmc.o(.text.FMC_LockOptionByte) for [Anonymous Symbol]
    apm32f4xx_fmc.o(.text.FMC_OPT_EnableWriteProtect) refers to apm32f4xx_fmc.o(.text.FMC_WaitForLastOperation) for FMC_WaitForLastOperation
    apm32f4xx_fmc.o(.ARM.exidx.text.FMC_OPT_EnableWriteProtect) refers to apm32f4xx_fmc.o(.text.FMC_OPT_EnableWriteProtect) for [Anonymous Symbol]
    apm32f4xx_fmc.o(.text.FMC_OPT_DisableWriteProtect) refers to apm32f4xx_fmc.o(.text.FMC_WaitForLastOperation) for FMC_WaitForLastOperation
    apm32f4xx_fmc.o(.ARM.exidx.text.FMC_OPT_DisableWriteProtect) refers to apm32f4xx_fmc.o(.text.FMC_OPT_DisableWriteProtect) for [Anonymous Symbol]
    apm32f4xx_fmc.o(.text.FMC_OPT_ConfigReadProtect) refers to apm32f4xx_fmc.o(.text.FMC_WaitForLastOperation) for FMC_WaitForLastOperation
    apm32f4xx_fmc.o(.ARM.exidx.text.FMC_OPT_ConfigReadProtect) refers to apm32f4xx_fmc.o(.text.FMC_OPT_ConfigReadProtect) for [Anonymous Symbol]
    apm32f4xx_fmc.o(.text.FMC_OPT_ConfigUser) refers to apm32f4xx_fmc.o(.text.FMC_WaitForLastOperation) for FMC_WaitForLastOperation
    apm32f4xx_fmc.o(.ARM.exidx.text.FMC_OPT_ConfigUser) refers to apm32f4xx_fmc.o(.text.FMC_OPT_ConfigUser) for [Anonymous Symbol]
    apm32f4xx_fmc.o(.ARM.exidx.text.FMC_OPT_ConfigBrownoutReset) refers to apm32f4xx_fmc.o(.text.FMC_OPT_ConfigBrownoutReset) for [Anonymous Symbol]
    apm32f4xx_fmc.o(.text.FMC_OPT_Launch) refers to apm32f4xx_fmc.o(.text.FMC_WaitForLastOperation) for FMC_WaitForLastOperation
    apm32f4xx_fmc.o(.ARM.exidx.text.FMC_OPT_Launch) refers to apm32f4xx_fmc.o(.text.FMC_OPT_Launch) for [Anonymous Symbol]
    apm32f4xx_fmc.o(.ARM.exidx.text.FMC_OPT_ReadUser) refers to apm32f4xx_fmc.o(.text.FMC_OPT_ReadUser) for [Anonymous Symbol]
    apm32f4xx_fmc.o(.ARM.exidx.text.FMC_OPT_ReadWriteProtect) refers to apm32f4xx_fmc.o(.text.FMC_OPT_ReadWriteProtect) for [Anonymous Symbol]
    apm32f4xx_fmc.o(.ARM.exidx.text.FMC_OPT_ReadProtectLevel) refers to apm32f4xx_fmc.o(.text.FMC_OPT_ReadProtectLevel) for [Anonymous Symbol]
    apm32f4xx_fmc.o(.ARM.exidx.text.FMC_OPT_ReadBrownoutReset) refers to apm32f4xx_fmc.o(.text.FMC_OPT_ReadBrownoutReset) for [Anonymous Symbol]
    apm32f4xx_fmc.o(.ARM.exidx.text.FMC_EnableInterrupt) refers to apm32f4xx_fmc.o(.text.FMC_EnableInterrupt) for [Anonymous Symbol]
    apm32f4xx_fmc.o(.ARM.exidx.text.FMC_DisableInterrupt) refers to apm32f4xx_fmc.o(.text.FMC_DisableInterrupt) for [Anonymous Symbol]
    apm32f4xx_fmc.o(.ARM.exidx.text.FMC_ReadStatusFlag) refers to apm32f4xx_fmc.o(.text.FMC_ReadStatusFlag) for [Anonymous Symbol]
    apm32f4xx_fmc.o(.ARM.exidx.text.FMC_ClearStatusFlag) refers to apm32f4xx_fmc.o(.text.FMC_ClearStatusFlag) for [Anonymous Symbol]
    apm32f4xx_fmc.o(.ARM.exidx.text.FMC_ReadStatus) refers to apm32f4xx_fmc.o(.text.FMC_ReadStatus) for [Anonymous Symbol]
    apm32f4xx_gpio.o(.text.GPIO_Reset) refers to apm32f4xx_rcm.o(.text.RCM_EnableAHB1PeriphReset) for RCM_EnableAHB1PeriphReset
    apm32f4xx_gpio.o(.text.GPIO_Reset) refers to apm32f4xx_rcm.o(.text.RCM_DisableAHB1PeriphReset) for RCM_DisableAHB1PeriphReset
    apm32f4xx_gpio.o(.ARM.exidx.text.GPIO_Reset) refers to apm32f4xx_gpio.o(.text.GPIO_Reset) for [Anonymous Symbol]
    apm32f4xx_gpio.o(.ARM.exidx.text.GPIO_Config) refers to apm32f4xx_gpio.o(.text.GPIO_Config) for [Anonymous Symbol]
    apm32f4xx_gpio.o(.ARM.exidx.text.GPIO_ConfigStructInit) refers to apm32f4xx_gpio.o(.text.GPIO_ConfigStructInit) for [Anonymous Symbol]
    apm32f4xx_gpio.o(.ARM.exidx.text.GPIO_ConfigPinLock) refers to apm32f4xx_gpio.o(.text.GPIO_ConfigPinLock) for [Anonymous Symbol]
    apm32f4xx_gpio.o(.ARM.exidx.text.GPIO_ReadInputBit) refers to apm32f4xx_gpio.o(.text.GPIO_ReadInputBit) for [Anonymous Symbol]
    apm32f4xx_gpio.o(.ARM.exidx.text.GPIO_ReadInputPort) refers to apm32f4xx_gpio.o(.text.GPIO_ReadInputPort) for [Anonymous Symbol]
    apm32f4xx_gpio.o(.ARM.exidx.text.GPIO_ReadOutputBit) refers to apm32f4xx_gpio.o(.text.GPIO_ReadOutputBit) for [Anonymous Symbol]
    apm32f4xx_gpio.o(.ARM.exidx.text.GPIO_ReadOutputPort) refers to apm32f4xx_gpio.o(.text.GPIO_ReadOutputPort) for [Anonymous Symbol]
    apm32f4xx_gpio.o(.ARM.exidx.text.GPIO_SetBit) refers to apm32f4xx_gpio.o(.text.GPIO_SetBit) for [Anonymous Symbol]
    apm32f4xx_gpio.o(.ARM.exidx.text.GPIO_ResetBit) refers to apm32f4xx_gpio.o(.text.GPIO_ResetBit) for [Anonymous Symbol]
    apm32f4xx_gpio.o(.ARM.exidx.text.GPIO_WriteBitValue) refers to apm32f4xx_gpio.o(.text.GPIO_WriteBitValue) for [Anonymous Symbol]
    apm32f4xx_gpio.o(.ARM.exidx.text.GPIO_WriteOutputPort) refers to apm32f4xx_gpio.o(.text.GPIO_WriteOutputPort) for [Anonymous Symbol]
    apm32f4xx_gpio.o(.ARM.exidx.text.GPIO_ToggleBit) refers to apm32f4xx_gpio.o(.text.GPIO_ToggleBit) for [Anonymous Symbol]
    apm32f4xx_gpio.o(.ARM.exidx.text.GPIO_ConfigPinAF) refers to apm32f4xx_gpio.o(.text.GPIO_ConfigPinAF) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.text.I2C_Reset) refers to apm32f4xx_rcm.o(.text.RCM_EnableAPB1PeriphReset) for RCM_EnableAPB1PeriphReset
    apm32f4xx_i2c.o(.text.I2C_Reset) refers to apm32f4xx_rcm.o(.text.RCM_DisableAPB1PeriphReset) for RCM_DisableAPB1PeriphReset
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_Reset) refers to apm32f4xx_i2c.o(.text.I2C_Reset) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.text.I2C_Config) refers to apm32f4xx_rcm.o(.text.RCM_ReadPCLKFreq) for RCM_ReadPCLKFreq
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_Config) refers to apm32f4xx_i2c.o(.text.I2C_Config) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_ConfigStructInit) refers to apm32f4xx_i2c.o(.text.I2C_ConfigStructInit) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_Enable) refers to apm32f4xx_i2c.o(.text.I2C_Enable) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_Disable) refers to apm32f4xx_i2c.o(.text.I2C_Disable) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_EnableGenerateStart) refers to apm32f4xx_i2c.o(.text.I2C_EnableGenerateStart) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_DisableGenerateStart) refers to apm32f4xx_i2c.o(.text.I2C_DisableGenerateStart) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_EnableGenerateStop) refers to apm32f4xx_i2c.o(.text.I2C_EnableGenerateStop) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_DisableGenerateStop) refers to apm32f4xx_i2c.o(.text.I2C_DisableGenerateStop) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_Tx7BitAddress) refers to apm32f4xx_i2c.o(.text.I2C_Tx7BitAddress) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_EnableAcknowledge) refers to apm32f4xx_i2c.o(.text.I2C_EnableAcknowledge) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_DisableAcknowledge) refers to apm32f4xx_i2c.o(.text.I2C_DisableAcknowledge) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_ConfigOwnAddress2) refers to apm32f4xx_i2c.o(.text.I2C_ConfigOwnAddress2) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_EnableDualAddress) refers to apm32f4xx_i2c.o(.text.I2C_EnableDualAddress) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_DisableDualAddress) refers to apm32f4xx_i2c.o(.text.I2C_DisableDualAddress) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_EnableGeneralCall) refers to apm32f4xx_i2c.o(.text.I2C_EnableGeneralCall) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_DisableGeneralCall) refers to apm32f4xx_i2c.o(.text.I2C_DisableGeneralCall) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_EnableSoftwareReset) refers to apm32f4xx_i2c.o(.text.I2C_EnableSoftwareReset) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_DisableSoftwareReset) refers to apm32f4xx_i2c.o(.text.I2C_DisableSoftwareReset) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_EnableStretchClock) refers to apm32f4xx_i2c.o(.text.I2C_EnableStretchClock) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_DisableStretchClock) refers to apm32f4xx_i2c.o(.text.I2C_DisableStretchClock) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_ConfigFastModeDutyCycle) refers to apm32f4xx_i2c.o(.text.I2C_ConfigFastModeDutyCycle) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_ConfigNACKPosition) refers to apm32f4xx_i2c.o(.text.I2C_ConfigNACKPosition) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_ConfigSMBusAlert) refers to apm32f4xx_i2c.o(.text.I2C_ConfigSMBusAlert) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_EnableARP) refers to apm32f4xx_i2c.o(.text.I2C_EnableARP) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_DisableARP) refers to apm32f4xx_i2c.o(.text.I2C_DisableARP) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_TxData) refers to apm32f4xx_i2c.o(.text.I2C_TxData) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_RxData) refers to apm32f4xx_i2c.o(.text.I2C_RxData) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_EnablePECTransmit) refers to apm32f4xx_i2c.o(.text.I2C_EnablePECTransmit) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_DisablePECTransmit) refers to apm32f4xx_i2c.o(.text.I2C_DisablePECTransmit) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_ConfigPECPosition) refers to apm32f4xx_i2c.o(.text.I2C_ConfigPECPosition) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_EnablePEC) refers to apm32f4xx_i2c.o(.text.I2C_EnablePEC) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_DisablePEC) refers to apm32f4xx_i2c.o(.text.I2C_DisablePEC) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_ReadPEC) refers to apm32f4xx_i2c.o(.text.I2C_ReadPEC) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_EnableDMA) refers to apm32f4xx_i2c.o(.text.I2C_EnableDMA) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_DisableDMA) refers to apm32f4xx_i2c.o(.text.I2C_DisableDMA) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_EnableDMALastTransfer) refers to apm32f4xx_i2c.o(.text.I2C_EnableDMALastTransfer) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_DisableDMALastTransfer) refers to apm32f4xx_i2c.o(.text.I2C_DisableDMALastTransfer) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_ReadRegister) refers to apm32f4xx_i2c.o(.text.I2C_ReadRegister) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_EnableInterrupt) refers to apm32f4xx_i2c.o(.text.I2C_EnableInterrupt) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_DisableInterrupt) refers to apm32f4xx_i2c.o(.text.I2C_DisableInterrupt) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_ReadEventStatus) refers to apm32f4xx_i2c.o(.text.I2C_ReadEventStatus) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_ReadLastEvent) refers to apm32f4xx_i2c.o(.text.I2C_ReadLastEvent) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_ReadStatusFlag) refers to apm32f4xx_i2c.o(.text.I2C_ReadStatusFlag) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_ClearStatusFlag) refers to apm32f4xx_i2c.o(.text.I2C_ClearStatusFlag) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_ReadIntFlag) refers to apm32f4xx_i2c.o(.text.I2C_ReadIntFlag) for [Anonymous Symbol]
    apm32f4xx_i2c.o(.ARM.exidx.text.I2C_ClearIntFlag) refers to apm32f4xx_i2c.o(.text.I2C_ClearIntFlag) for [Anonymous Symbol]
    apm32f4xx_misc.o(.ARM.exidx.text.NVIC_ConfigPriorityGroup) refers to apm32f4xx_misc.o(.text.NVIC_ConfigPriorityGroup) for [Anonymous Symbol]
    apm32f4xx_misc.o(.text.NVIC_EnableIRQRequest) refers to apm32f4xx_misc.o(.text.NVIC_ConfigPriorityGroup) for NVIC_ConfigPriorityGroup
    apm32f4xx_misc.o(.ARM.exidx.text.NVIC_EnableIRQRequest) refers to apm32f4xx_misc.o(.text.NVIC_EnableIRQRequest) for [Anonymous Symbol]
    apm32f4xx_misc.o(.ARM.exidx.text.NVIC_DisableIRQRequest) refers to apm32f4xx_misc.o(.text.NVIC_DisableIRQRequest) for [Anonymous Symbol]
    apm32f4xx_misc.o(.ARM.exidx.text.NVIC_ConfigVectorTable) refers to apm32f4xx_misc.o(.text.NVIC_ConfigVectorTable) for [Anonymous Symbol]
    apm32f4xx_misc.o(.ARM.exidx.text.NVIC_SetSystemLowPower) refers to apm32f4xx_misc.o(.text.NVIC_SetSystemLowPower) for [Anonymous Symbol]
    apm32f4xx_misc.o(.ARM.exidx.text.NVIC_ResetystemLowPower) refers to apm32f4xx_misc.o(.text.NVIC_ResetystemLowPower) for [Anonymous Symbol]
    apm32f4xx_misc.o(.ARM.exidx.text.SysTick_ConfigCLKSource) refers to apm32f4xx_misc.o(.text.SysTick_ConfigCLKSource) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_Reset) refers to apm32f4xx_rcm.o(.text.RCM_Reset) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ConfigHSE) refers to apm32f4xx_rcm.o(.text.RCM_ConfigHSE) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_WaitHSEReady) refers to apm32f4xx_rcm.o(.text.RCM_WaitHSEReady) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ConfigHSITrim) refers to apm32f4xx_rcm.o(.text.RCM_ConfigHSITrim) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnableHSI) refers to apm32f4xx_rcm.o(.text.RCM_EnableHSI) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisableHSI) refers to apm32f4xx_rcm.o(.text.RCM_DisableHSI) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ConfigLSE) refers to apm32f4xx_rcm.o(.text.RCM_ConfigLSE) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnableLSI) refers to apm32f4xx_rcm.o(.text.RCM_EnableLSI) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisableLSI) refers to apm32f4xx_rcm.o(.text.RCM_DisableLSI) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ConfigPLL1) refers to apm32f4xx_rcm.o(.text.RCM_ConfigPLL1) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnablePLL1) refers to apm32f4xx_rcm.o(.text.RCM_EnablePLL1) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisablePLL1) refers to apm32f4xx_rcm.o(.text.RCM_DisablePLL1) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ConfigPLL2) refers to apm32f4xx_rcm.o(.text.RCM_ConfigPLL2) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnablePLL2) refers to apm32f4xx_rcm.o(.text.RCM_EnablePLL2) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisablePLL2) refers to apm32f4xx_rcm.o(.text.RCM_DisablePLL2) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnableCSS) refers to apm32f4xx_rcm.o(.text.RCM_EnableCSS) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisableCSS) refers to apm32f4xx_rcm.o(.text.RCM_DisableCSS) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ConfigMCO1) refers to apm32f4xx_rcm.o(.text.RCM_ConfigMCO1) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ConfigMCO2) refers to apm32f4xx_rcm.o(.text.RCM_ConfigMCO2) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ConfigSYSCLK) refers to apm32f4xx_rcm.o(.text.RCM_ConfigSYSCLK) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ReadSYSCLKSource) refers to apm32f4xx_rcm.o(.text.RCM_ReadSYSCLKSource) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ConfigAHB) refers to apm32f4xx_rcm.o(.text.RCM_ConfigAHB) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ConfigAPB1) refers to apm32f4xx_rcm.o(.text.RCM_ConfigAPB1) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ConfigAPB2) refers to apm32f4xx_rcm.o(.text.RCM_ConfigAPB2) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ConfigSDRAM) refers to apm32f4xx_rcm.o(.text.RCM_ConfigSDRAM) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ReadSYSCLKFreq) refers to apm32f4xx_rcm.o(.text.RCM_ReadSYSCLKFreq) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.text.RCM_ReadHCLKFreq) refers to apm32f4xx_rcm.o(.text.RCM_ReadSYSCLKFreq) for RCM_ReadSYSCLKFreq
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ReadHCLKFreq) refers to apm32f4xx_rcm.o(.text.RCM_ReadHCLKFreq) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.text.RCM_ReadPCLKFreq) refers to apm32f4xx_rcm.o(.text.RCM_ReadHCLKFreq) for RCM_ReadHCLKFreq
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ReadPCLKFreq) refers to apm32f4xx_rcm.o(.text.RCM_ReadPCLKFreq) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ConfigRTCCLK) refers to apm32f4xx_rcm.o(.text.RCM_ConfigRTCCLK) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnableRTCCLK) refers to apm32f4xx_rcm.o(.text.RCM_EnableRTCCLK) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisableRTCCLK) refers to apm32f4xx_rcm.o(.text.RCM_DisableRTCCLK) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnableBackupReset) refers to apm32f4xx_rcm.o(.text.RCM_EnableBackupReset) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisableBackupReset) refers to apm32f4xx_rcm.o(.text.RCM_DisableBackupReset) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ConfigI2SCLK) refers to apm32f4xx_rcm.o(.text.RCM_ConfigI2SCLK) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnableAHB1PeriphClock) refers to apm32f4xx_rcm.o(.text.RCM_EnableAHB1PeriphClock) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisableAHB1PeriphClock) refers to apm32f4xx_rcm.o(.text.RCM_DisableAHB1PeriphClock) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnableAHB2PeriphClock) refers to apm32f4xx_rcm.o(.text.RCM_EnableAHB2PeriphClock) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisableAHB2PeriphClock) refers to apm32f4xx_rcm.o(.text.RCM_DisableAHB2PeriphClock) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnableAPB1PeriphClock) refers to apm32f4xx_rcm.o(.text.RCM_EnableAPB1PeriphClock) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisableAPB1PeriphClock) refers to apm32f4xx_rcm.o(.text.RCM_DisableAPB1PeriphClock) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnableAPB2PeriphClock) refers to apm32f4xx_rcm.o(.text.RCM_EnableAPB2PeriphClock) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisableAPB2PeriphClock) refers to apm32f4xx_rcm.o(.text.RCM_DisableAPB2PeriphClock) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnableAHB1PeriphReset) refers to apm32f4xx_rcm.o(.text.RCM_EnableAHB1PeriphReset) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisableAHB1PeriphReset) refers to apm32f4xx_rcm.o(.text.RCM_DisableAHB1PeriphReset) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnableAHB2PeriphReset) refers to apm32f4xx_rcm.o(.text.RCM_EnableAHB2PeriphReset) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisableAHB2PeriphReset) refers to apm32f4xx_rcm.o(.text.RCM_DisableAHB2PeriphReset) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnableAPB1PeriphReset) refers to apm32f4xx_rcm.o(.text.RCM_EnableAPB1PeriphReset) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisableAPB1PeriphReset) refers to apm32f4xx_rcm.o(.text.RCM_DisableAPB1PeriphReset) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnableAPB2PeriphReset) refers to apm32f4xx_rcm.o(.text.RCM_EnableAPB2PeriphReset) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisableAPB2PeriphReset) refers to apm32f4xx_rcm.o(.text.RCM_DisableAPB2PeriphReset) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnableAHB1PeriphClockLPMode) refers to apm32f4xx_rcm.o(.text.RCM_EnableAHB1PeriphClockLPMode) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisableAHB1PeriphClockLPMode) refers to apm32f4xx_rcm.o(.text.RCM_DisableAHB1PeriphClockLPMode) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnableAHB2PeriphClockLPMode) refers to apm32f4xx_rcm.o(.text.RCM_EnableAHB2PeriphClockLPMode) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisableAHB2PeriphClockLPMode) refers to apm32f4xx_rcm.o(.text.RCM_DisableAHB2PeriphClockLPMode) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnableAPB1PeriphClockLPMode) refers to apm32f4xx_rcm.o(.text.RCM_EnableAPB1PeriphClockLPMode) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisableAPB1PeriphClockLPMode) refers to apm32f4xx_rcm.o(.text.RCM_DisableAPB1PeriphClockLPMode) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnableAPB2PeriphClockLPMode) refers to apm32f4xx_rcm.o(.text.RCM_EnableAPB2PeriphClockLPMode) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisableAPB2PeriphClockLPMode) refers to apm32f4xx_rcm.o(.text.RCM_DisableAPB2PeriphClockLPMode) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnableInterrupt) refers to apm32f4xx_rcm.o(.text.RCM_EnableInterrupt) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisableInterrupt) refers to apm32f4xx_rcm.o(.text.RCM_DisableInterrupt) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ReadStatusFlag) refers to apm32f4xx_rcm.o(.text.RCM_ReadStatusFlag) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ClearStatusFlag) refers to apm32f4xx_rcm.o(.text.RCM_ClearStatusFlag) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ReadIntFlag) refers to apm32f4xx_rcm.o(.text.RCM_ReadIntFlag) for [Anonymous Symbol]
    apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ClearIntFlag) refers to apm32f4xx_rcm.o(.text.RCM_ClearIntFlag) for [Anonymous Symbol]
    apm32f4xx_usart.o(.text.USART_Reset) refers to apm32f4xx_rcm.o(.text.RCM_EnableAPB2PeriphReset) for RCM_EnableAPB2PeriphReset
    apm32f4xx_usart.o(.text.USART_Reset) refers to apm32f4xx_rcm.o(.text.RCM_DisableAPB2PeriphReset) for RCM_DisableAPB2PeriphReset
    apm32f4xx_usart.o(.text.USART_Reset) refers to apm32f4xx_rcm.o(.text.RCM_EnableAPB1PeriphReset) for RCM_EnableAPB1PeriphReset
    apm32f4xx_usart.o(.text.USART_Reset) refers to apm32f4xx_rcm.o(.text.RCM_DisableAPB1PeriphReset) for RCM_DisableAPB1PeriphReset
    apm32f4xx_usart.o(.ARM.exidx.text.USART_Reset) refers to apm32f4xx_usart.o(.text.USART_Reset) for [Anonymous Symbol]
    apm32f4xx_usart.o(.text.USART_Config) refers to apm32f4xx_rcm.o(.text.RCM_ReadPCLKFreq) for RCM_ReadPCLKFreq
    apm32f4xx_usart.o(.ARM.exidx.text.USART_Config) refers to apm32f4xx_usart.o(.text.USART_Config) for [Anonymous Symbol]
    apm32f4xx_usart.o(.ARM.exidx.text.USART_ConfigStructInit) refers to apm32f4xx_usart.o(.text.USART_ConfigStructInit) for [Anonymous Symbol]
    apm32f4xx_usart.o(.ARM.exidx.text.USART_ConfigClock) refers to apm32f4xx_usart.o(.text.USART_ConfigClock) for [Anonymous Symbol]
    apm32f4xx_usart.o(.ARM.exidx.text.USART_ConfigClockStructInit) refers to apm32f4xx_usart.o(.text.USART_ConfigClockStructInit) for [Anonymous Symbol]
    apm32f4xx_usart.o(.ARM.exidx.text.USART_Enable) refers to apm32f4xx_usart.o(.text.USART_Enable) for [Anonymous Symbol]
    apm32f4xx_usart.o(.ARM.exidx.text.USART_Disable) refers to apm32f4xx_usart.o(.text.USART_Disable) for [Anonymous Symbol]
    apm32f4xx_usart.o(.ARM.exidx.text.USART_ConfigPrescaler) refers to apm32f4xx_usart.o(.text.USART_ConfigPrescaler) for [Anonymous Symbol]
    apm32f4xx_usart.o(.ARM.exidx.text.USART_EnableOverSampling8) refers to apm32f4xx_usart.o(.text.USART_EnableOverSampling8) for [Anonymous Symbol]
    apm32f4xx_usart.o(.ARM.exidx.text.USART_DisableOverSampling8) refers to apm32f4xx_usart.o(.text.USART_DisableOverSampling8) for [Anonymous Symbol]
    apm32f4xx_usart.o(.ARM.exidx.text.USART_EnableOverSampling) refers to apm32f4xx_usart.o(.text.USART_EnableOverSampling) for [Anonymous Symbol]
    apm32f4xx_usart.o(.ARM.exidx.text.USART_DisableOverSampling) refers to apm32f4xx_usart.o(.text.USART_DisableOverSampling) for [Anonymous Symbol]
    apm32f4xx_usart.o(.ARM.exidx.text.USART_TxData) refers to apm32f4xx_usart.o(.text.USART_TxData) for [Anonymous Symbol]
    apm32f4xx_usart.o(.ARM.exidx.text.USART_RxData) refers to apm32f4xx_usart.o(.text.USART_RxData) for [Anonymous Symbol]
    apm32f4xx_usart.o(.ARM.exidx.text.USART_Address) refers to apm32f4xx_usart.o(.text.USART_Address) for [Anonymous Symbol]
    apm32f4xx_usart.o(.ARM.exidx.text.USART_EnableMuteMode) refers to apm32f4xx_usart.o(.text.USART_EnableMuteMode) for [Anonymous Symbol]
    apm32f4xx_usart.o(.ARM.exidx.text.USART_DisableMuteMode) refers to apm32f4xx_usart.o(.text.USART_DisableMuteMode) for [Anonymous Symbol]
    apm32f4xx_usart.o(.ARM.exidx.text.USART_ConfigWakeUp) refers to apm32f4xx_usart.o(.text.USART_ConfigWakeUp) for [Anonymous Symbol]
    apm32f4xx_usart.o(.ARM.exidx.text.USART_ConfigLINBreakDetectLength) refers to apm32f4xx_usart.o(.text.USART_ConfigLINBreakDetectLength) for [Anonymous Symbol]
    apm32f4xx_usart.o(.ARM.exidx.text.USART_EnableLIN) refers to apm32f4xx_usart.o(.text.USART_EnableLIN) for [Anonymous Symbol]
    apm32f4xx_usart.o(.ARM.exidx.text.USART_DisableLIN) refers to apm32f4xx_usart.o(.text.USART_DisableLIN) for [Anonymous Symbol]
    apm32f4xx_usart.o(.ARM.exidx.text.USART_TxBreak) refers to apm32f4xx_usart.o(.text.USART_TxBreak) for [Anonymous Symbol]
    apm32f4xx_usart.o(.ARM.exidx.text.USART_EnableHalfDuplex) refers to apm32f4xx_usart.o(.text.USART_EnableHalfDuplex) for [Anonymous Symbol]
    apm32f4xx_usart.o(.ARM.exidx.text.USART_DisableHalfDuplex) refers to apm32f4xx_usart.o(.text.USART_DisableHalfDuplex) for [Anonymous Symbol]
    apm32f4xx_usart.o(.ARM.exidx.text.USART_ConfigGuardTime) refers to apm32f4xx_usart.o(.text.USART_ConfigGuardTime) for [Anonymous Symbol]
    apm32f4xx_usart.o(.ARM.exidx.text.USART_EnableSmartCard) refers to apm32f4xx_usart.o(.text.USART_EnableSmartCard) for [Anonymous Symbol]
    apm32f4xx_usart.o(.ARM.exidx.text.USART_DisableSmartCard) refers to apm32f4xx_usart.o(.text.USART_DisableSmartCard) for [Anonymous Symbol]
    apm32f4xx_usart.o(.ARM.exidx.text.USART_EnableSmartCardNACK) refers to apm32f4xx_usart.o(.text.USART_EnableSmartCardNACK) for [Anonymous Symbol]
    apm32f4xx_usart.o(.ARM.exidx.text.USART_DisableSmartCardNACK) refers to apm32f4xx_usart.o(.text.USART_DisableSmartCardNACK) for [Anonymous Symbol]
    apm32f4xx_usart.o(.ARM.exidx.text.USART_ConfigIrDA) refers to apm32f4xx_usart.o(.text.USART_ConfigIrDA) for [Anonymous Symbol]
    apm32f4xx_usart.o(.ARM.exidx.text.USART_EnableIrDA) refers to apm32f4xx_usart.o(.text.USART_EnableIrDA) for [Anonymous Symbol]
    apm32f4xx_usart.o(.ARM.exidx.text.USART_DisableIrDA) refers to apm32f4xx_usart.o(.text.USART_DisableIrDA) for [Anonymous Symbol]
    apm32f4xx_usart.o(.ARM.exidx.text.USART_EnableDMA) refers to apm32f4xx_usart.o(.text.USART_EnableDMA) for [Anonymous Symbol]
    apm32f4xx_usart.o(.ARM.exidx.text.USART_DisableDMA) refers to apm32f4xx_usart.o(.text.USART_DisableDMA) for [Anonymous Symbol]
    apm32f4xx_usart.o(.ARM.exidx.text.USART_EnableInterrupt) refers to apm32f4xx_usart.o(.text.USART_EnableInterrupt) for [Anonymous Symbol]
    apm32f4xx_usart.o(.ARM.exidx.text.USART_DisableInterrupt) refers to apm32f4xx_usart.o(.text.USART_DisableInterrupt) for [Anonymous Symbol]
    apm32f4xx_usart.o(.ARM.exidx.text.USART_ReadStatusFlag) refers to apm32f4xx_usart.o(.text.USART_ReadStatusFlag) for [Anonymous Symbol]
    apm32f4xx_usart.o(.ARM.exidx.text.USART_ClearStatusFlag) refers to apm32f4xx_usart.o(.text.USART_ClearStatusFlag) for [Anonymous Symbol]
    apm32f4xx_usart.o(.ARM.exidx.text.USART_ReadIntFlag) refers to apm32f4xx_usart.o(.text.USART_ReadIntFlag) for [Anonymous Symbol]
    apm32f4xx_usart.o(.ARM.exidx.text.USART_ClearIntFlag) refers to apm32f4xx_usart.o(.text.USART_ClearIntFlag) for [Anonymous Symbol]
    startup_apm32f40x.o(STACK) refers (Special) to heapauxi.o(.text) for __use_two_region_memory
    startup_apm32f40x.o(HEAP) refers (Special) to heapauxi.o(.text) for __use_two_region_memory
    startup_apm32f40x.o(RESET) refers (Special) to heapauxi.o(.text) for __use_two_region_memory
    startup_apm32f40x.o(RESET) refers to startup_apm32f40x.o(STACK) for __initial_sp
    startup_apm32f40x.o(RESET) refers to startup_apm32f40x.o(.text) for Reset_Handler
    startup_apm32f40x.o(RESET) refers to irq_armv7m.o(.text) for SVC_Handler
    startup_apm32f40x.o(RESET) refers to main.o(.text.CAN1_TX_IRQHandler) for CAN1_TX_IRQHandler
    startup_apm32f40x.o(RESET) refers to main.o(.text.CAN1_RX0_IRQHandler) for CAN1_RX0_IRQHandler
    startup_apm32f40x.o(RESET) refers to main.o(.text.CAN1_RX1_IRQHandler) for CAN1_RX1_IRQHandler
    startup_apm32f40x.o(.text) refers (Special) to heapauxi.o(.text) for __use_two_region_memory
    startup_apm32f40x.o(.text) refers to system_apm32f4xx.o(.text.SystemInit) for SystemInit
    startup_apm32f40x.o(.text) refers to __main.o(!!!main) for __main
    startup_apm32f40x.o(.text) refers to startup_apm32f40x.o(HEAP) for Heap_Mem
    startup_apm32f40x.o(.text) refers to startup_apm32f40x.o(STACK) for Stack_Mem
    system_apm32f4xx.o(.text.SystemInit) refers to system_apm32f4xx.o(.text.SystemClockConfig) for SystemClockConfig
    system_apm32f4xx.o(.ARM.exidx.text.SystemInit) refers to system_apm32f4xx.o(.text.SystemInit) for [Anonymous Symbol]
    system_apm32f4xx.o(.ARM.exidx.text.SystemClockConfig) refers to system_apm32f4xx.o(.text.SystemClockConfig) for [Anonymous Symbol]
    system_apm32f4xx.o(.text.SystemCoreClockUpdate) refers to system_apm32f4xx.o(.data.SystemCoreClock) for SystemCoreClock
    system_apm32f4xx.o(.text.SystemCoreClockUpdate) refers to system_apm32f4xx.o(.rodata.AHBPrescTable) for AHBPrescTable
    system_apm32f4xx.o(.ARM.exidx.text.SystemCoreClockUpdate) refers to system_apm32f4xx.o(.text.SystemCoreClockUpdate) for [Anonymous Symbol]
    rtx_kernel.o(.ARM.exidx.text.osRtxKernelPreInit) refers to rtx_kernel.o(.text.osRtxKernelPreInit) for [Anonymous Symbol]
    rtx_kernel.o(.text.osRtxKernelErrorNotify) refers to rtx_config.o(.text.osRtxErrorNotify) for osRtxErrorNotify
    rtx_kernel.o(.ARM.exidx.text.osRtxKernelErrorNotify) refers to rtx_kernel.o(.text.osRtxKernelErrorNotify) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelInitialize) refers to rtx_kernel.o(.text.osRtxKernelPreInit) for osRtxKernelPreInit
    rtx_kernel.o(.text.osKernelInitialize) refers to rtx_kernel.o(.text.svcRtxKernelInitialize) for svcRtxKernelInitialize
    rtx_kernel.o(.ARM.exidx.text.osKernelInitialize) refers to rtx_kernel.o(.text.osKernelInitialize) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetInfo) refers to rtx_kernel.o(.text.svcRtxKernelGetInfo) for svcRtxKernelGetInfo
    rtx_kernel.o(.ARM.exidx.text.osKernelGetInfo) refers to rtx_kernel.o(.text.osKernelGetInfo) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetInfo) refers to rt_memcpy_v6.o(.text) for __aeabi_memcpy
    rtx_kernel.o(.text.svcRtxKernelGetInfo) refers to rtx_kernel.o(.rodata.str1.4) for [Anonymous Symbol]
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetInfo) refers to rtx_kernel.o(.text.svcRtxKernelGetInfo) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetState) refers to rtx_kernel.o(.text.svcRtxKernelGetState) for svcRtxKernelGetState
    rtx_kernel.o(.text.osKernelGetState) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.osKernelGetState) refers to rtx_kernel.o(.text.osKernelGetState) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetState) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetState) refers to rtx_kernel.o(.text.svcRtxKernelGetState) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelStart) refers to rtx_kernel.o(.text.OUTLINED_FUNCTION_1) for OUTLINED_FUNCTION_1
    rtx_kernel.o(.text.osKernelStart) refers to rtx_kernel.o(.text.svcRtxKernelStart) for svcRtxKernelStart
    rtx_kernel.o(.ARM.exidx.text.osKernelStart) refers to rtx_kernel.o(.text.osKernelStart) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelLock) refers to rtx_kernel.o(.text.OUTLINED_FUNCTION_1) for OUTLINED_FUNCTION_1
    rtx_kernel.o(.text.osKernelLock) refers to rtx_kernel.o(.text.svcRtxKernelLock) for svcRtxKernelLock
    rtx_kernel.o(.ARM.exidx.text.osKernelLock) refers to rtx_kernel.o(.text.osKernelLock) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelUnlock) refers to rtx_kernel.o(.text.OUTLINED_FUNCTION_1) for OUTLINED_FUNCTION_1
    rtx_kernel.o(.text.osKernelUnlock) refers to rtx_kernel.o(.text.svcRtxKernelUnlock) for svcRtxKernelUnlock
    rtx_kernel.o(.ARM.exidx.text.osKernelUnlock) refers to rtx_kernel.o(.text.osKernelUnlock) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelRestoreLock) refers to rtx_kernel.o(.text.OUTLINED_FUNCTION_1) for OUTLINED_FUNCTION_1
    rtx_kernel.o(.text.osKernelRestoreLock) refers to rtx_kernel.o(.text.svcRtxKernelRestoreLock) for svcRtxKernelRestoreLock
    rtx_kernel.o(.ARM.exidx.text.osKernelRestoreLock) refers to rtx_kernel.o(.text.osKernelRestoreLock) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelSuspend) refers to rtx_kernel.o(.text.svcRtxKernelSuspend) for svcRtxKernelSuspend
    rtx_kernel.o(.ARM.exidx.text.osKernelSuspend) refers to rtx_kernel.o(.text.osKernelSuspend) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelResume) refers to rtx_kernel.o(.text.svcRtxKernelResume) for svcRtxKernelResume
    rtx_kernel.o(.ARM.exidx.text.osKernelResume) refers to rtx_kernel.o(.text.osKernelResume) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetTickCount) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.text.osKernelGetTickCount) refers to rtx_kernel.o(.text.svcRtxKernelGetTickCount) for svcRtxKernelGetTickCount
    rtx_kernel.o(.ARM.exidx.text.osKernelGetTickCount) refers to rtx_kernel.o(.text.osKernelGetTickCount) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetTickCount) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetTickCount) refers to rtx_kernel.o(.text.svcRtxKernelGetTickCount) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetTickFreq) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_kernel.o(.text.osKernelGetTickFreq) refers to rtx_kernel.o(.text.svcRtxKernelGetTickFreq) for svcRtxKernelGetTickFreq
    rtx_kernel.o(.ARM.exidx.text.osKernelGetTickFreq) refers to rtx_kernel.o(.text.osKernelGetTickFreq) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetTickFreq) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetTickFreq) refers to rtx_kernel.o(.text.svcRtxKernelGetTickFreq) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetSysTimerCount) refers to rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) for svcRtxKernelGetSysTimerCount
    rtx_kernel.o(.ARM.exidx.text.osKernelGetSysTimerCount) refers to rtx_kernel.o(.text.osKernelGetSysTimerCount) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) refers to os_systick.o(.text.OS_Tick_GetCount) for OS_Tick_GetCount
    rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) refers to os_systick.o(.text.OS_Tick_GetOverflow) for OS_Tick_GetOverflow
    rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) refers to os_systick.o(.text.OS_Tick_GetInterval) for OS_Tick_GetInterval
    rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetSysTimerCount) refers to rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) for [Anonymous Symbol]
    rtx_kernel.o(.text.osKernelGetSysTimerFreq) refers to os_systick.o(.text.OS_Tick_GetClock) for OS_Tick_GetClock
    rtx_kernel.o(.text.osKernelGetSysTimerFreq) refers to rtx_kernel.o(.text.svcRtxKernelGetSysTimerFreq) for svcRtxKernelGetSysTimerFreq
    rtx_kernel.o(.ARM.exidx.text.osKernelGetSysTimerFreq) refers to rtx_kernel.o(.text.osKernelGetSysTimerFreq) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelGetSysTimerFreq) refers to os_systick.o(.text.OS_Tick_GetClock) for OS_Tick_GetClock
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetSysTimerFreq) refers to rtx_kernel.o(.text.svcRtxKernelGetSysTimerFreq) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelInitialize) refers to rtx_memory.o(.text.osRtxMemoryInit) for osRtxMemoryInit
    rtx_kernel.o(.text.svcRtxKernelInitialize) refers to rtx_kernel.o(.text.OUTLINED_FUNCTION_0) for OUTLINED_FUNCTION_0
    rtx_kernel.o(.text.svcRtxKernelInitialize) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.text.svcRtxKernelInitialize) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelInitialize) refers to rtx_kernel.o(.text.svcRtxKernelInitialize) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelStart) refers to rtx_thread.o(.text.osRtxThreadStartup) for osRtxThreadStartup
    rtx_kernel.o(.text.svcRtxKernelStart) refers to os_systick.o(.text.OS_Tick_Setup) for OS_Tick_Setup
    rtx_kernel.o(.text.svcRtxKernelStart) refers to os_systick.o(.text.OS_Tick_GetIRQn) for OS_Tick_GetIRQn
    rtx_kernel.o(.text.svcRtxKernelStart) refers to os_systick.o(.text.OS_Tick_Enable) for OS_Tick_Enable
    rtx_kernel.o(.text.svcRtxKernelStart) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_kernel.o(.text.svcRtxKernelStart) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_kernel.o(.text.svcRtxKernelStart) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.text.svcRtxKernelStart) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_kernel.o(.text.svcRtxKernelStart) refers to irq_armv7m.o(.text) for SysTick_Handler
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelStart) refers to rtx_kernel.o(.text.svcRtxKernelStart) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelLock) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelLock) refers to rtx_kernel.o(.text.svcRtxKernelLock) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelUnlock) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelUnlock) refers to rtx_kernel.o(.text.svcRtxKernelUnlock) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelRestoreLock) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelRestoreLock) refers to rtx_kernel.o(.text.svcRtxKernelRestoreLock) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelSuspend) refers to os_systick.o(.text.OS_Tick_Disable) for OS_Tick_Disable
    rtx_kernel.o(.text.svcRtxKernelSuspend) refers to rtx_kernel.o(.text.GetKernelSleepTime) for GetKernelSleepTime
    rtx_kernel.o(.text.svcRtxKernelSuspend) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelSuspend) refers to rtx_kernel.o(.text.svcRtxKernelSuspend) for [Anonymous Symbol]
    rtx_kernel.o(.text.GetKernelSleepTime) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.GetKernelSleepTime) refers to rtx_kernel.o(.text.GetKernelSleepTime) for [Anonymous Symbol]
    rtx_kernel.o(.text.svcRtxKernelResume) refers to rtx_kernel.o(.text.GetKernelSleepTime) for GetKernelSleepTime
    rtx_kernel.o(.text.svcRtxKernelResume) refers to rtx_thread.o(.text.osRtxThreadDelayTick) for osRtxThreadDelayTick
    rtx_kernel.o(.text.svcRtxKernelResume) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_kernel.o(.text.svcRtxKernelResume) refers to os_systick.o(.text.OS_Tick_Enable) for OS_Tick_Enable
    rtx_kernel.o(.text.svcRtxKernelResume) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_kernel.o(.ARM.exidx.text.svcRtxKernelResume) refers to rtx_kernel.o(.text.svcRtxKernelResume) for [Anonymous Symbol]
    rtx_kernel.o(.text.OUTLINED_FUNCTION_0) refers to rtx_mempool.o(.text.osRtxMemoryPoolInit) for osRtxMemoryPoolInit
    rtx_kernel.o(.ARM.exidx.text.OUTLINED_FUNCTION_0) refers to rtx_kernel.o(.text.OUTLINED_FUNCTION_0) for [Anonymous Symbol]
    rtx_kernel.o(.ARM.exidx.text.OUTLINED_FUNCTION_1) refers to rtx_kernel.o(.text.OUTLINED_FUNCTION_1) for [Anonymous Symbol]
    rtx_kernel.o(.data.os) refers to rtx_kernel.o(.rodata.str1.4) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.osRtxThreadListPut) refers to rtx_thread.o(.text.osRtxThreadListPut) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.osRtxThreadListGet) refers to rtx_thread.o(.text.osRtxThreadListGet) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadListSort) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.osRtxThreadListSort) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_thread.o(.ARM.exidx.text.osRtxThreadListSort) refers to rtx_thread.o(.text.osRtxThreadListSort) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.osRtxThreadListRemove) refers to rtx_thread.o(.text.osRtxThreadListRemove) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadReadyPut) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_thread.o(.text.osRtxThreadReadyPut) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadReadyPut) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadDelayTick) refers to rtx_mutex.o(.text.osRtxMutexOwnerRestore) for osRtxMutexOwnerRestore
    rtx_thread.o(.text.osRtxThreadDelayTick) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.osRtxThreadDelayTick) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for osRtxThreadReadyPut
    rtx_thread.o(.text.osRtxThreadDelayTick) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayTick) refers to rtx_thread.o(.text.osRtxThreadDelayTick) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.osRtxThreadRegPtr) refers to rtx_thread.o(.text.osRtxThreadRegPtr) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadSwitch) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadSwitch) refers to rtx_thread.o(.text.osRtxThreadSwitch) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadDispatch) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for osRtxThreadReadyPut
    rtx_thread.o(.text.osRtxThreadDispatch) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.osRtxThreadDispatch) refers to rtx_thread.o(.text.osRtxThreadBlock) for osRtxThreadBlock
    rtx_thread.o(.text.osRtxThreadDispatch) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadDispatch) refers to rtx_thread.o(.text.osRtxThreadDispatch) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadBlock) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadBlock) refers to rtx_thread.o(.text.osRtxThreadBlock) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadWaitExit) refers to rtx_thread.o(.text.osRtxThreadDelayRemove) for osRtxThreadDelayRemove
    rtx_thread.o(.text.osRtxThreadWaitExit) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for osRtxThreadReadyPut
    rtx_thread.o(.text.osRtxThreadWaitExit) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_thread.o(.ARM.exidx.text.osRtxThreadWaitExit) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadDelayRemove) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayRemove) refers to rtx_thread.o(.text.osRtxThreadDelayRemove) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadWaitEnter) refers to rtx_thread.o(.text.osRtxThreadDelayInsert) for osRtxThreadDelayInsert
    rtx_thread.o(.text.osRtxThreadWaitEnter) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadWaitEnter) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadDelayInsert) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayInsert) refers to rtx_thread.o(.text.osRtxThreadDelayInsert) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadStartup) refers to rtx_thread.o(.text.svcRtxThreadNew) for svcRtxThreadNew
    rtx_thread.o(.text.osRtxThreadStartup) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_thread.o(.text.osRtxThreadStartup) refers to rtx_config.o(.text.osRtxIdleThread) for osRtxIdleThread
    rtx_thread.o(.text.osRtxThreadStartup) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadStartup) refers to rtx_thread.o(.text.osRtxThreadStartup) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_thread.o(.text.svcRtxThreadNew) refers to rt_memclr_w.o(.text) for __aeabi_memclr4
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_thread.o(.text.osThreadExit) for osThreadExit
    rtx_thread.o(.text.svcRtxThreadNew) refers to rtx_thread.o(.text.osRtxThreadPostProcess) for osRtxThreadPostProcess
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadNew) refers to rtx_thread.o(.text.svcRtxThreadNew) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadNew) refers to rtx_thread.o(.text.svcRtxThreadNew) for svcRtxThreadNew
    rtx_thread.o(.ARM.exidx.text.osThreadNew) refers to rtx_thread.o(.text.osThreadNew) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetName) refers to rtx_thread.o(.text.svcRtxThreadGetName) for svcRtxThreadGetName
    rtx_thread.o(.ARM.exidx.text.osThreadGetName) refers to rtx_thread.o(.text.osThreadGetName) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetId) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.text.osThreadGetId) refers to rtx_thread.o(.text.svcRtxThreadGetId) for svcRtxThreadGetId
    rtx_thread.o(.ARM.exidx.text.osThreadGetId) refers to rtx_thread.o(.text.osThreadGetId) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadGetId) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetId) refers to rtx_thread.o(.text.svcRtxThreadGetId) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetState) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_4) for OUTLINED_FUNCTION_4
    rtx_thread.o(.text.osThreadGetState) refers to rtx_thread.o(.text.svcRtxThreadGetState) for svcRtxThreadGetState
    rtx_thread.o(.ARM.exidx.text.osThreadGetState) refers to rtx_thread.o(.text.osThreadGetState) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetStackSize) refers to rtx_thread.o(.text.svcRtxThreadGetStackSize) for svcRtxThreadGetStackSize
    rtx_thread.o(.ARM.exidx.text.osThreadGetStackSize) refers to rtx_thread.o(.text.osThreadGetStackSize) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetStackSpace) refers to rtx_thread.o(.text.svcRtxThreadGetStackSpace) for svcRtxThreadGetStackSpace
    rtx_thread.o(.ARM.exidx.text.osThreadGetStackSpace) refers to rtx_thread.o(.text.osThreadGetStackSpace) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadSetPriority) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_0) for OUTLINED_FUNCTION_0
    rtx_thread.o(.text.osThreadSetPriority) refers to rtx_thread.o(.text.svcRtxThreadSetPriority) for svcRtxThreadSetPriority
    rtx_thread.o(.ARM.exidx.text.osThreadSetPriority) refers to rtx_thread.o(.text.osThreadSetPriority) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetPriority) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_4) for OUTLINED_FUNCTION_4
    rtx_thread.o(.text.osThreadGetPriority) refers to rtx_thread.o(.text.svcRtxThreadGetPriority) for svcRtxThreadGetPriority
    rtx_thread.o(.ARM.exidx.text.osThreadGetPriority) refers to rtx_thread.o(.text.osThreadGetPriority) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadYield) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_0) for OUTLINED_FUNCTION_0
    rtx_thread.o(.text.osThreadYield) refers to rtx_thread.o(.text.svcRtxThreadYield) for svcRtxThreadYield
    rtx_thread.o(.ARM.exidx.text.osThreadYield) refers to rtx_thread.o(.text.osThreadYield) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadSuspend) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_0) for OUTLINED_FUNCTION_0
    rtx_thread.o(.text.osThreadSuspend) refers to rtx_thread.o(.text.svcRtxThreadSuspend) for svcRtxThreadSuspend
    rtx_thread.o(.ARM.exidx.text.osThreadSuspend) refers to rtx_thread.o(.text.osThreadSuspend) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadResume) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_0) for OUTLINED_FUNCTION_0
    rtx_thread.o(.text.osThreadResume) refers to rtx_thread.o(.text.svcRtxThreadResume) for svcRtxThreadResume
    rtx_thread.o(.ARM.exidx.text.osThreadResume) refers to rtx_thread.o(.text.osThreadResume) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadDetach) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_0) for OUTLINED_FUNCTION_0
    rtx_thread.o(.text.osThreadDetach) refers to rtx_thread.o(.text.svcRtxThreadDetach) for svcRtxThreadDetach
    rtx_thread.o(.ARM.exidx.text.osThreadDetach) refers to rtx_thread.o(.text.osThreadDetach) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadJoin) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_0) for OUTLINED_FUNCTION_0
    rtx_thread.o(.text.osThreadJoin) refers to rtx_thread.o(.text.svcRtxThreadJoin) for svcRtxThreadJoin
    rtx_thread.o(.ARM.exidx.text.osThreadJoin) refers to rtx_thread.o(.text.osThreadJoin) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadExit) refers to rtx_thread.o(.text.svcRtxThreadExit) for svcRtxThreadExit
    rtx_thread.o(.ARM.exidx.text.osThreadExit) refers to rtx_thread.o(.text.osThreadExit) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadTerminate) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_0) for OUTLINED_FUNCTION_0
    rtx_thread.o(.text.osThreadTerminate) refers to rtx_thread.o(.text.svcRtxThreadTerminate) for svcRtxThreadTerminate
    rtx_thread.o(.ARM.exidx.text.osThreadTerminate) refers to rtx_thread.o(.text.osThreadTerminate) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadGetCount) refers to rtx_thread.o(.text.svcRtxThreadGetCount) for svcRtxThreadGetCount
    rtx_thread.o(.ARM.exidx.text.osThreadGetCount) refers to rtx_thread.o(.text.osThreadGetCount) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadEnumerate) refers to rtx_thread.o(.text.svcRtxThreadEnumerate) for svcRtxThreadEnumerate
    rtx_thread.o(.ARM.exidx.text.osThreadEnumerate) refers to rtx_thread.o(.text.osThreadEnumerate) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadFlagsSet) refers to rtx_system.o(.text.osRtxPostProcess) for osRtxPostProcess
    rtx_thread.o(.text.osThreadFlagsSet) refers to rtx_thread.o(.text.svcRtxThreadFlagsSet) for svcRtxThreadFlagsSet
    rtx_thread.o(.ARM.exidx.text.osThreadFlagsSet) refers to rtx_thread.o(.text.osThreadFlagsSet) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadFlagsClear) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_0) for OUTLINED_FUNCTION_0
    rtx_thread.o(.text.osThreadFlagsClear) refers to rtx_thread.o(.text.svcRtxThreadFlagsClear) for svcRtxThreadFlagsClear
    rtx_thread.o(.ARM.exidx.text.osThreadFlagsClear) refers to rtx_thread.o(.text.osThreadFlagsClear) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadFlagsGet) refers to rtx_thread.o(.text.svcRtxThreadFlagsGet) for svcRtxThreadFlagsGet
    rtx_thread.o(.ARM.exidx.text.osThreadFlagsGet) refers to rtx_thread.o(.text.osThreadFlagsGet) for [Anonymous Symbol]
    rtx_thread.o(.text.osThreadFlagsWait) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_0) for OUTLINED_FUNCTION_0
    rtx_thread.o(.text.osThreadFlagsWait) refers to rtx_thread.o(.text.svcRtxThreadFlagsWait) for svcRtxThreadFlagsWait
    rtx_thread.o(.ARM.exidx.text.osThreadFlagsWait) refers to rtx_thread.o(.text.osThreadFlagsWait) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadPostProcess) refers to rtx_thread.o(.text.ThreadFlagsCheck) for ThreadFlagsCheck
    rtx_thread.o(.text.osRtxThreadPostProcess) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_thread.o(.ARM.exidx.text.osRtxThreadPostProcess) refers to rtx_thread.o(.text.osRtxThreadPostProcess) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.ThreadFlagsCheck) refers to rtx_thread.o(.text.ThreadFlagsCheck) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetName) refers to rtx_thread.o(.text.svcRtxThreadGetName) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadGetState) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_4) for OUTLINED_FUNCTION_4
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetState) refers to rtx_thread.o(.text.svcRtxThreadGetState) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetStackSize) refers to rtx_thread.o(.text.svcRtxThreadGetStackSize) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadGetStackSpace) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetStackSpace) refers to rtx_thread.o(.text.svcRtxThreadGetStackSpace) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadSetPriority) refers to rtx_thread.o(.text.osRtxThreadListSort) for osRtxThreadListSort
    rtx_thread.o(.text.svcRtxThreadSetPriority) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadSetPriority) refers to rtx_thread.o(.text.svcRtxThreadSetPriority) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadGetPriority) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_4) for OUTLINED_FUNCTION_4
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetPriority) refers to rtx_thread.o(.text.svcRtxThreadGetPriority) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadYield) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.svcRtxThreadYield) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for osRtxThreadReadyPut
    rtx_thread.o(.text.svcRtxThreadYield) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadYield) refers to rtx_thread.o(.text.svcRtxThreadYield) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_3) for OUTLINED_FUNCTION_3
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_1) for OUTLINED_FUNCTION_1
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_2) for OUTLINED_FUNCTION_2
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.osRtxThreadDelayInsert) for osRtxThreadDelayInsert
    rtx_thread.o(.text.svcRtxThreadSuspend) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadSuspend) refers to rtx_thread.o(.text.svcRtxThreadSuspend) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadResume) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_3) for OUTLINED_FUNCTION_3
    rtx_thread.o(.text.svcRtxThreadResume) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_2) for OUTLINED_FUNCTION_2
    rtx_thread.o(.text.svcRtxThreadResume) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_thread.o(.text.svcRtxThreadResume) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_1) for OUTLINED_FUNCTION_1
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadResume) refers to rtx_thread.o(.text.svcRtxThreadResume) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadDetach) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_3) for OUTLINED_FUNCTION_3
    rtx_thread.o(.text.svcRtxThreadDetach) refers to rtx_thread.o(.text.osRtxThreadListUnlink) for osRtxThreadListUnlink
    rtx_thread.o(.text.svcRtxThreadDetach) refers to rtx_thread.o(.text.osRtxThreadFree) for osRtxThreadFree
    rtx_thread.o(.text.svcRtxThreadDetach) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_1) for OUTLINED_FUNCTION_1
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadDetach) refers to rtx_thread.o(.text.svcRtxThreadDetach) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadListUnlink) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadListUnlink) refers to rtx_thread.o(.text.osRtxThreadListUnlink) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadFree) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_thread.o(.text.osRtxThreadFree) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_thread.o(.text.osRtxThreadFree) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadFree) refers to rtx_thread.o(.text.osRtxThreadFree) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_3) for OUTLINED_FUNCTION_3
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_thread.o(.text.osRtxThreadListUnlink) for osRtxThreadListUnlink
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_thread.o(.text.osRtxThreadFree) for osRtxThreadFree
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_1) for OUTLINED_FUNCTION_1
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_thread.o(.text.svcRtxThreadJoin) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadJoin) refers to rtx_thread.o(.text.svcRtxThreadJoin) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadExit) refers to rtx_mutex.o(.text.osRtxMutexOwnerRelease) for osRtxMutexOwnerRelease
    rtx_thread.o(.text.svcRtxThreadExit) refers to rtx_thread.o(.text.osRtxThreadJoinWakeup) for osRtxThreadJoinWakeup
    rtx_thread.o(.text.svcRtxThreadExit) refers to rtx_thread.o(.text.osRtxThreadDestroy) for osRtxThreadDestroy
    rtx_thread.o(.text.svcRtxThreadExit) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadExit) refers to rtx_thread.o(.text.svcRtxThreadExit) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadJoinWakeup) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_thread.o(.ARM.exidx.text.osRtxThreadJoinWakeup) refers to rtx_thread.o(.text.osRtxThreadJoinWakeup) for [Anonymous Symbol]
    rtx_thread.o(.text.osRtxThreadDestroy) refers to rtx_thread.o(.text.osRtxThreadFree) for osRtxThreadFree
    rtx_thread.o(.text.osRtxThreadDestroy) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.osRtxThreadDestroy) refers to rtx_thread.o(.text.osRtxThreadDestroy) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_3) for OUTLINED_FUNCTION_3
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_1) for OUTLINED_FUNCTION_1
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_2) for OUTLINED_FUNCTION_2
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_mutex.o(.text.osRtxMutexOwnerRelease) for osRtxMutexOwnerRelease
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadJoinWakeup) for osRtxThreadJoinWakeup
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.osRtxThreadDestroy) for osRtxThreadDestroy
    rtx_thread.o(.text.svcRtxThreadTerminate) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadTerminate) refers to rtx_thread.o(.text.svcRtxThreadTerminate) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadGetCount) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetCount) refers to rtx_thread.o(.text.svcRtxThreadGetCount) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadEnumerate) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadEnumerate) refers to rtx_thread.o(.text.svcRtxThreadEnumerate) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadFlagsSet) refers to rtx_thread.o(.text.ThreadFlagsCheck) for ThreadFlagsCheck
    rtx_thread.o(.text.svcRtxThreadFlagsSet) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsSet) refers to rtx_thread.o(.text.svcRtxThreadFlagsSet) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadFlagsClear) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_1) for OUTLINED_FUNCTION_1
    rtx_thread.o(.text.svcRtxThreadFlagsClear) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsClear) refers to rtx_thread.o(.text.svcRtxThreadFlagsClear) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadFlagsGet) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsGet) refers to rtx_thread.o(.text.svcRtxThreadFlagsGet) for [Anonymous Symbol]
    rtx_thread.o(.text.svcRtxThreadFlagsWait) refers to rtx_thread.o(.text.ThreadFlagsCheck) for ThreadFlagsCheck
    rtx_thread.o(.text.svcRtxThreadFlagsWait) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_thread.o(.text.svcRtxThreadFlagsWait) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsWait) refers to rtx_thread.o(.text.svcRtxThreadFlagsWait) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.OUTLINED_FUNCTION_0) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_0) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.OUTLINED_FUNCTION_1) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_1) for [Anonymous Symbol]
    rtx_thread.o(.text.OUTLINED_FUNCTION_2) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_thread.o(.text.OUTLINED_FUNCTION_2) refers to rtx_thread.o(.text.osRtxThreadDelayRemove) for osRtxThreadDelayRemove
    rtx_thread.o(.ARM.exidx.text.OUTLINED_FUNCTION_2) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_2) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.OUTLINED_FUNCTION_3) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_3) for [Anonymous Symbol]
    rtx_thread.o(.ARM.exidx.text.OUTLINED_FUNCTION_4) refers to rtx_thread.o(.text.OUTLINED_FUNCTION_4) for [Anonymous Symbol]
    rtx_timer.o(.text.osRtxTimerSetup) refers to rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup) for osRtxMessageQueueTimerSetup
    rtx_timer.o(.text.osRtxTimerSetup) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.text.osRtxTimerSetup) refers to rtx_timer.o(.text.osRtxTimerTick) for osRtxTimerTick
    rtx_timer.o(.ARM.exidx.text.osRtxTimerSetup) refers to rtx_timer.o(.text.osRtxTimerSetup) for [Anonymous Symbol]
    rtx_timer.o(.text.osRtxTimerTick) refers to rtx_msgqueue.o(.text.osMessageQueuePut) for osMessageQueuePut
    rtx_timer.o(.text.osRtxTimerTick) refers to rtx_kernel.o(.text.osRtxKernelErrorNotify) for osRtxKernelErrorNotify
    rtx_timer.o(.text.osRtxTimerTick) refers to rtx_timer.o(.text.TimerInsert) for TimerInsert
    rtx_timer.o(.text.osRtxTimerTick) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.osRtxTimerTick) refers to rtx_timer.o(.text.osRtxTimerTick) for [Anonymous Symbol]
    rtx_timer.o(.text.osRtxTimerThread) refers to rtx_msgqueue.o(.text.osMessageQueueGet) for osMessageQueueGet
    rtx_timer.o(.ARM.exidx.text.osRtxTimerThread) refers to rtx_timer.o(.text.osRtxTimerThread) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerNew) refers to rtx_timer.o(.text.svcRtxTimerNew) for svcRtxTimerNew
    rtx_timer.o(.ARM.exidx.text.osTimerNew) refers to rtx_timer.o(.text.osTimerNew) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerGetName) refers to rtx_timer.o(.text.svcRtxTimerGetName) for svcRtxTimerGetName
    rtx_timer.o(.ARM.exidx.text.osTimerGetName) refers to rtx_timer.o(.text.osTimerGetName) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerStart) refers to rtx_timer.o(.text.svcRtxTimerStart) for svcRtxTimerStart
    rtx_timer.o(.ARM.exidx.text.osTimerStart) refers to rtx_timer.o(.text.osTimerStart) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerStop) refers to rtx_timer.o(.text.svcRtxTimerStop) for svcRtxTimerStop
    rtx_timer.o(.ARM.exidx.text.osTimerStop) refers to rtx_timer.o(.text.osTimerStop) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerIsRunning) refers to rtx_timer.o(.text.svcRtxTimerIsRunning) for svcRtxTimerIsRunning
    rtx_timer.o(.ARM.exidx.text.osTimerIsRunning) refers to rtx_timer.o(.text.osTimerIsRunning) for [Anonymous Symbol]
    rtx_timer.o(.text.osTimerDelete) refers to rtx_timer.o(.text.svcRtxTimerDelete) for svcRtxTimerDelete
    rtx_timer.o(.ARM.exidx.text.osTimerDelete) refers to rtx_timer.o(.text.osTimerDelete) for [Anonymous Symbol]
    rtx_timer.o(.text.TimerInsert) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.TimerInsert) refers to rtx_timer.o(.text.TimerInsert) for [Anonymous Symbol]
    rtx_timer.o(.text.svcRtxTimerNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_timer.o(.text.svcRtxTimerNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_timer.o(.text.svcRtxTimerNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerNew) refers to rtx_timer.o(.text.svcRtxTimerNew) for [Anonymous Symbol]
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerGetName) refers to rtx_timer.o(.text.svcRtxTimerGetName) for [Anonymous Symbol]
    rtx_timer.o(.text.svcRtxTimerStart) refers to rtx_timer.o(.text.TimerRemove) for TimerRemove
    rtx_timer.o(.text.svcRtxTimerStart) refers to rtx_timer.o(.text.TimerInsert) for TimerInsert
    rtx_timer.o(.text.svcRtxTimerStart) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerStart) refers to rtx_timer.o(.text.svcRtxTimerStart) for [Anonymous Symbol]
    rtx_timer.o(.text.TimerRemove) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.TimerRemove) refers to rtx_timer.o(.text.TimerRemove) for [Anonymous Symbol]
    rtx_timer.o(.text.svcRtxTimerStop) refers to rtx_timer.o(.text.TimerRemove) for TimerRemove
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerStop) refers to rtx_timer.o(.text.svcRtxTimerStop) for [Anonymous Symbol]
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerIsRunning) refers to rtx_timer.o(.text.svcRtxTimerIsRunning) for [Anonymous Symbol]
    rtx_timer.o(.text.svcRtxTimerDelete) refers to rtx_timer.o(.text.TimerRemove) for TimerRemove
    rtx_timer.o(.text.svcRtxTimerDelete) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_timer.o(.text.svcRtxTimerDelete) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_timer.o(.text.svcRtxTimerDelete) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_timer.o(.ARM.exidx.text.svcRtxTimerDelete) refers to rtx_timer.o(.text.svcRtxTimerDelete) for [Anonymous Symbol]
    rtx_mutex.o(.text.osRtxMutexOwnerRelease) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mutex.o(.text.osRtxMutexOwnerRelease) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mutex.o(.ARM.exidx.text.osRtxMutexOwnerRelease) refers to rtx_mutex.o(.text.osRtxMutexOwnerRelease) for [Anonymous Symbol]
    rtx_mutex.o(.text.osRtxMutexOwnerRestore) refers to rtx_thread.o(.text.osRtxThreadListSort) for osRtxThreadListSort
    rtx_mutex.o(.ARM.exidx.text.osRtxMutexOwnerRestore) refers to rtx_mutex.o(.text.osRtxMutexOwnerRestore) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexNew) refers to rtx_mutex.o(.text.svcRtxMutexNew) for svcRtxMutexNew
    rtx_mutex.o(.ARM.exidx.text.osMutexNew) refers to rtx_mutex.o(.text.osMutexNew) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexGetName) refers to rtx_mutex.o(.text.svcRtxMutexGetName) for svcRtxMutexGetName
    rtx_mutex.o(.ARM.exidx.text.osMutexGetName) refers to rtx_mutex.o(.text.osMutexGetName) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexAcquire) refers to rtx_mutex.o(.text.svcRtxMutexAcquire) for svcRtxMutexAcquire
    rtx_mutex.o(.ARM.exidx.text.osMutexAcquire) refers to rtx_mutex.o(.text.osMutexAcquire) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexRelease) refers to rtx_mutex.o(.text.svcRtxMutexRelease) for svcRtxMutexRelease
    rtx_mutex.o(.ARM.exidx.text.osMutexRelease) refers to rtx_mutex.o(.text.osMutexRelease) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexGetOwner) refers to rtx_mutex.o(.text.svcRtxMutexGetOwner) for svcRtxMutexGetOwner
    rtx_mutex.o(.ARM.exidx.text.osMutexGetOwner) refers to rtx_mutex.o(.text.osMutexGetOwner) for [Anonymous Symbol]
    rtx_mutex.o(.text.osMutexDelete) refers to rtx_mutex.o(.text.svcRtxMutexDelete) for svcRtxMutexDelete
    rtx_mutex.o(.ARM.exidx.text.osMutexDelete) refers to rtx_mutex.o(.text.osMutexDelete) for [Anonymous Symbol]
    rtx_mutex.o(.text.svcRtxMutexNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_mutex.o(.text.svcRtxMutexNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_mutex.o(.text.svcRtxMutexNew) refers to rt_memclr_w.o(.text) for __aeabi_memclr4
    rtx_mutex.o(.text.svcRtxMutexNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexNew) refers to rtx_mutex.o(.text.svcRtxMutexNew) for [Anonymous Symbol]
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexGetName) refers to rtx_mutex.o(.text.svcRtxMutexGetName) for [Anonymous Symbol]
    rtx_mutex.o(.text.svcRtxMutexAcquire) refers to rtx_thread.o(.text.osRtxThreadListSort) for osRtxThreadListSort
    rtx_mutex.o(.text.svcRtxMutexAcquire) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_mutex.o(.text.svcRtxMutexAcquire) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_mutex.o(.text.svcRtxMutexAcquire) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexAcquire) refers to rtx_mutex.o(.text.svcRtxMutexAcquire) for [Anonymous Symbol]
    rtx_mutex.o(.text.svcRtxMutexRelease) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mutex.o(.text.svcRtxMutexRelease) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mutex.o(.text.svcRtxMutexRelease) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_mutex.o(.text.svcRtxMutexRelease) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexRelease) refers to rtx_mutex.o(.text.svcRtxMutexRelease) for [Anonymous Symbol]
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexGetOwner) refers to rtx_mutex.o(.text.svcRtxMutexGetOwner) for [Anonymous Symbol]
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_thread.o(.text.osRtxThreadListSort) for osRtxThreadListSort
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_mutex.o(.text.svcRtxMutexDelete) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mutex.o(.ARM.exidx.text.svcRtxMutexDelete) refers to rtx_mutex.o(.text.svcRtxMutexDelete) for [Anonymous Symbol]
    irq_armv7m.o(.text) refers to rtx_system.o(.text.osRtxPendSV_Handler) for osRtxPendSV_Handler
    irq_armv7m.o(.text) refers to rtx_system.o(.text.osRtxTick_Handler) for osRtxTick_Handler
    irq_armv7m.o(.text) refers to rtx_kernel.o(.data.os) for osRtxInfo
    irq_armv7m.o(.text) refers to rtx_lib.o(.rodata.osRtxUserSVC) for osRtxUserSVC
    irq_armv7m.o(.ARM.exidx) refers to irq_armv7m.o(.text) for [Anonymous Symbol]
    rtx_memory.o(.ARM.exidx.text.osRtxMemoryInit) refers to rtx_memory.o(.text.osRtxMemoryInit) for [Anonymous Symbol]
    rtx_memory.o(.ARM.exidx.text.osRtxMemoryAlloc) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for [Anonymous Symbol]
    rtx_memory.o(.ARM.exidx.text.osRtxMemoryFree) refers to rtx_memory.o(.text.osRtxMemoryFree) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolInit) refers to rtx_mempool.o(.text.osRtxMemoryPoolInit) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolAlloc) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolFree) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolNew) refers to rtx_mempool.o(.text.svcRtxMemoryPoolNew) for svcRtxMemoryPoolNew
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolNew) refers to rtx_mempool.o(.text.osMemoryPoolNew) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolGetName) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetName) for svcRtxMemoryPoolGetName
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetName) refers to rtx_mempool.o(.text.osMemoryPoolGetName) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolAlloc) refers to rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) for svcRtxMemoryPoolAlloc
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolAlloc) refers to rtx_mempool.o(.text.osMemoryPoolAlloc) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolFree) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_mempool.o(.text.osMemoryPoolFree) refers to rtx_system.o(.text.osRtxPostProcess) for osRtxPostProcess
    rtx_mempool.o(.text.osMemoryPoolFree) refers to rtx_mempool.o(.text.svcRtxMemoryPoolFree) for svcRtxMemoryPoolFree
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolFree) refers to rtx_mempool.o(.text.osMemoryPoolFree) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolGetCapacity) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetCapacity) for svcRtxMemoryPoolGetCapacity
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetCapacity) refers to rtx_mempool.o(.text.osMemoryPoolGetCapacity) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetCapacity) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetCapacity) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolGetBlockSize) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetBlockSize) for svcRtxMemoryPoolGetBlockSize
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetBlockSize) refers to rtx_mempool.o(.text.osMemoryPoolGetBlockSize) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetBlockSize) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetBlockSize) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolGetCount) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetCount) for svcRtxMemoryPoolGetCount
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetCount) refers to rtx_mempool.o(.text.osMemoryPoolGetCount) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetCount) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetCount) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolGetSpace) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetSpace) for svcRtxMemoryPoolGetSpace
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetSpace) refers to rtx_mempool.o(.text.osMemoryPoolGetSpace) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetSpace) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetSpace) for [Anonymous Symbol]
    rtx_mempool.o(.text.osMemoryPoolDelete) refers to rtx_mempool.o(.text.svcRtxMemoryPoolDelete) for svcRtxMemoryPoolDelete
    rtx_mempool.o(.ARM.exidx.text.osMemoryPoolDelete) refers to rtx_mempool.o(.text.osMemoryPoolDelete) for [Anonymous Symbol]
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rt_memclr.o(.text) for __aeabi_memclr
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolInit) for osRtxMemoryPoolInit
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mempool.o(.text.svcRtxMemoryPoolNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolPostProcess) for osRtxMemoryPoolPostProcess
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolNew) refers to rtx_mempool.o(.text.svcRtxMemoryPoolNew) for [Anonymous Symbol]
    rtx_mempool.o(.text.osRtxMemoryPoolPostProcess) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mempool.o(.text.osRtxMemoryPoolPostProcess) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolPostProcess) refers to rtx_mempool.o(.text.osRtxMemoryPoolPostProcess) for [Anonymous Symbol]
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetName) refers to rtx_mempool.o(.text.svcRtxMemoryPoolGetName) for [Anonymous Symbol]
    rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolAlloc) refers to rtx_mempool.o(.text.svcRtxMemoryPoolAlloc) for [Anonymous Symbol]
    rtx_mempool.o(.text.svcRtxMemoryPoolFree) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_mempool.o(.text.svcRtxMemoryPoolFree) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mempool.o(.text.svcRtxMemoryPoolFree) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolFree) refers to rtx_mempool.o(.text.svcRtxMemoryPoolFree) for [Anonymous Symbol]
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_mempool.o(.text.svcRtxMemoryPoolDelete) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolDelete) refers to rtx_mempool.o(.text.svcRtxMemoryPoolDelete) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueNew) for svcRtxMessageQueueNew
    rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup) refers to rtx_lib.o(.rodata) for osRtxConfig
    rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_msgqueue.o(.ARM.exidx.text.osRtxMessageQueueTimerSetup) refers to rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_memory.o(.text.osRtxMemoryAlloc) for osRtxMemoryAlloc
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rt_memclr.o(.text) for __aeabi_memclr
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_mempool.o(.text.osRtxMemoryPoolInit) for osRtxMemoryPoolInit
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_msgqueue.o(.text.svcRtxMessageQueueNew) refers to rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) for osRtxMessageQueuePostProcess
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueNew) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueNew) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueNew) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueNew) for svcRtxMessageQueueNew
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueNew) refers to rtx_msgqueue.o(.text.osMessageQueueNew) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGetName) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetName) for svcRtxMessageQueueGetName
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetName) refers to rtx_msgqueue.o(.text.osMessageQueueGetName) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueuePut) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.osMessageQueuePut) refers to rt_memcpy_v6.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.osMessageQueuePut) refers to rtx_system.o(.text.osRtxPostProcess) for osRtxPostProcess
    rtx_msgqueue.o(.text.osMessageQueuePut) refers to rtx_msgqueue.o(.text.svcRtxMessageQueuePut) for svcRtxMessageQueuePut
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueuePut) refers to rtx_msgqueue.o(.text.osMessageQueuePut) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGet) refers to rtx_msgqueue.o(.text.MessageQueueGet) for MessageQueueGet
    rtx_msgqueue.o(.text.osMessageQueueGet) refers to rt_memcpy_v6.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.osMessageQueueGet) refers to rtx_system.o(.text.osRtxPostProcess) for osRtxPostProcess
    rtx_msgqueue.o(.text.osMessageQueueGet) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGet) for svcRtxMessageQueueGet
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGet) refers to rtx_msgqueue.o(.text.osMessageQueueGet) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGetCapacity) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetCapacity) for svcRtxMessageQueueGetCapacity
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetCapacity) refers to rtx_msgqueue.o(.text.osMessageQueueGetCapacity) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetCapacity) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetCapacity) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGetMsgSize) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetMsgSize) for svcRtxMessageQueueGetMsgSize
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetMsgSize) refers to rtx_msgqueue.o(.text.osMessageQueueGetMsgSize) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetMsgSize) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetMsgSize) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGetCount) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetCount) for svcRtxMessageQueueGetCount
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetCount) refers to rtx_msgqueue.o(.text.osMessageQueueGetCount) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetCount) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetCount) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueGetSpace) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetSpace) for svcRtxMessageQueueGetSpace
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetSpace) refers to rtx_msgqueue.o(.text.osMessageQueueGetSpace) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetSpace) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetSpace) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueReset) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueReset) for svcRtxMessageQueueReset
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueReset) refers to rtx_msgqueue.o(.text.osMessageQueueReset) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osMessageQueueDelete) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) for svcRtxMessageQueueDelete
    rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueDelete) refers to rtx_msgqueue.o(.text.osMessageQueueDelete) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_msgqueue.o(.text.MessageQueueRemove) for MessageQueueRemove
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_msgqueue.o(.text.OUTLINED_FUNCTION_0) for OUTLINED_FUNCTION_0
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_thread.o(.text.osRtxThreadRegPtr) for osRtxThreadRegPtr
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rt_memcpy_v6.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) refers to rtx_msgqueue.o(.text.MessageQueuePut) for MessageQueuePut
    rtx_msgqueue.o(.ARM.exidx.text.osRtxMessageQueuePostProcess) refers to rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.MessageQueueRemove) refers to rtx_msgqueue.o(.text.MessageQueueRemove) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.MessageQueuePut) refers to rtx_msgqueue.o(.text.MessageQueuePut) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetName) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGetName) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_msgqueue.o(.text.OUTLINED_FUNCTION_1) for OUTLINED_FUNCTION_1
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_thread.o(.text.osRtxThreadRegPtr) for osRtxThreadRegPtr
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rt_memcpy_v6.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_msgqueue.o(.text.MessageQueuePut) for MessageQueuePut
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_msgqueue.o(.text.svcRtxMessageQueuePut) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueuePut) refers to rtx_msgqueue.o(.text.svcRtxMessageQueuePut) for [Anonymous Symbol]
    rtx_msgqueue.o(.ARM.exidx.text.MessageQueueGet) refers to rtx_msgqueue.o(.text.MessageQueueGet) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_msgqueue.o(.text.MessageQueueGet) for MessageQueueGet
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_msgqueue.o(.text.MessageQueueRemove) for MessageQueueRemove
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rt_memcpy_v6.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_msgqueue.o(.text.OUTLINED_FUNCTION_1) for OUTLINED_FUNCTION_1
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_thread.o(.text.osRtxThreadRegPtr) for osRtxThreadRegPtr
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_msgqueue.o(.text.MessageQueuePut) for MessageQueuePut
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_thread.o(.text.osRtxThreadWaitEnter) for osRtxThreadWaitEnter
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_thread.o(.text.osRtxThreadListPut) for osRtxThreadListPut
    rtx_msgqueue.o(.text.svcRtxMessageQueueGet) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGet) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueGet) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_msgqueue.o(.text.MessageQueueGet) for MessageQueueGet
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_msgqueue.o(.text.MessageQueueRemove) for MessageQueueRemove
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_mempool.o(.text.osRtxMemoryPoolAlloc) for osRtxMemoryPoolAlloc
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_msgqueue.o(.text.OUTLINED_FUNCTION_1) for OUTLINED_FUNCTION_1
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_thread.o(.text.osRtxThreadRegPtr) for osRtxThreadRegPtr
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rt_memcpy_v6.o(.text) for __aeabi_memcpy
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_msgqueue.o(.text.MessageQueuePut) for MessageQueuePut
    rtx_msgqueue.o(.text.svcRtxMessageQueueReset) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueReset) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueReset) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_msgqueue.o(.text.OUTLINED_FUNCTION_1) for OUTLINED_FUNCTION_1
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_memory.o(.text.osRtxMemoryFree) for osRtxMemoryFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_mempool.o(.text.osRtxMemoryPoolFree) for osRtxMemoryPoolFree
    rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueDelete) refers to rtx_msgqueue.o(.text.svcRtxMessageQueueDelete) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.OUTLINED_FUNCTION_0) refers to rtx_thread.o(.text.osRtxThreadWaitExit) for osRtxThreadWaitExit
    rtx_msgqueue.o(.ARM.exidx.text.OUTLINED_FUNCTION_0) refers to rtx_msgqueue.o(.text.OUTLINED_FUNCTION_0) for [Anonymous Symbol]
    rtx_msgqueue.o(.text.OUTLINED_FUNCTION_1) refers to rtx_thread.o(.text.osRtxThreadListGet) for osRtxThreadListGet
    rtx_msgqueue.o(.ARM.exidx.text.OUTLINED_FUNCTION_1) refers to rtx_msgqueue.o(.text.OUTLINED_FUNCTION_1) for [Anonymous Symbol]
    rtx_system.o(.text.osRtxTick_Handler) refers to os_systick.o(.text.OS_Tick_AcknowledgeIRQ) for OS_Tick_AcknowledgeIRQ
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_thread.o(.text.osRtxThreadDelayTick) for osRtxThreadDelayTick
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_thread.o(.text.osRtxThreadListRemove) for osRtxThreadListRemove
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_thread.o(.text.osRtxThreadReadyPut) for osRtxThreadReadyPut
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_thread.o(.text.osRtxThreadSwitch) for osRtxThreadSwitch
    rtx_system.o(.text.osRtxTick_Handler) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_system.o(.ARM.exidx.text.osRtxTick_Handler) refers to rtx_system.o(.text.osRtxTick_Handler) for [Anonymous Symbol]
    rtx_system.o(.text.osRtxPendSV_Handler) refers to rtx_thread.o(.text.osRtxThreadDispatch) for osRtxThreadDispatch
    rtx_system.o(.text.osRtxPendSV_Handler) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_system.o(.ARM.exidx.text.osRtxPendSV_Handler) refers to rtx_system.o(.text.osRtxPendSV_Handler) for [Anonymous Symbol]
    rtx_system.o(.text.osRtxPostProcess) refers to rtx_kernel.o(.text.osRtxKernelErrorNotify) for osRtxKernelErrorNotify
    rtx_system.o(.text.osRtxPostProcess) refers to rtx_kernel.o(.data.os) for osRtxInfo
    rtx_system.o(.ARM.exidx.text.osRtxPostProcess) refers to rtx_system.o(.text.osRtxPostProcess) for [Anonymous Symbol]
    os_systick.o(.text.OS_Tick_Setup) refers to system_apm32f4xx.o(.data.SystemCoreClock) for SystemCoreClock
    os_systick.o(.text.OS_Tick_Setup) refers to os_systick.o(.bss.os) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_Setup) refers to os_systick.o(.text.OS_Tick_Setup) for [Anonymous Symbol]
    os_systick.o(.text.OS_Tick_Enable) refers to os_systick.o(.bss.os) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_Enable) refers to os_systick.o(.text.OS_Tick_Enable) for [Anonymous Symbol]
    os_systick.o(.text.OS_Tick_Disable) refers to os_systick.o(.bss.os) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_Disable) refers to os_systick.o(.text.OS_Tick_Disable) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_AcknowledgeIRQ) refers to os_systick.o(.text.OS_Tick_AcknowledgeIRQ) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_GetIRQn) refers to os_systick.o(.text.OS_Tick_GetIRQn) for [Anonymous Symbol]
    os_systick.o(.text.OS_Tick_GetClock) refers to system_apm32f4xx.o(.data.SystemCoreClock) for SystemCoreClock
    os_systick.o(.ARM.exidx.text.OS_Tick_GetClock) refers to os_systick.o(.text.OS_Tick_GetClock) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_GetInterval) refers to os_systick.o(.text.OS_Tick_GetInterval) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_GetCount) refers to os_systick.o(.text.OS_Tick_GetCount) for [Anonymous Symbol]
    os_systick.o(.ARM.exidx.text.OS_Tick_GetOverflow) refers to os_systick.o(.text.OS_Tick_GetOverflow) for [Anonymous Symbol]
    rt_memcpy_v6.o(.text) refers to rt_memcpy_w.o(.text) for __aeabi_memcpy4
    rt_memclr.o(.text) refers to rt_memclr_w.o(.text) for _memset_w
    __main.o(!!!main) refers to __rtentry.o(.ARM.Collect$$rtentry$$00000000) for __rt_entry
    __rtentry.o(.ARM.Collect$$rtentry$$00000000) refers (Special) to __rtentry2.o(.ARM.Collect$$rtentry$$0000000A) for __rt_entry_li
    __rtentry.o(.ARM.Collect$$rtentry$$00000000) refers (Special) to __rtentry2.o(.ARM.Collect$$rtentry$$0000000D) for __rt_entry_main
    __rtentry.o(.ARM.Collect$$rtentry$$00000000) refers (Special) to __rtentry2.o(.ARM.Collect$$rtentry$$0000000C) for __rt_entry_postli_1
    __rtentry.o(.ARM.Collect$$rtentry$$00000000) refers (Special) to __rtentry2.o(.ARM.Collect$$rtentry$$00000008) for __rt_entry_postsh_1
    __rtentry.o(.ARM.Collect$$rtentry$$00000000) refers (Special) to __rtentry2.o(.ARM.Collect$$rtentry$$00000002) for __rt_entry_presh_1
    __rtentry.o(.ARM.Collect$$rtentry$$00000000) refers (Special) to __rtentry4.o(.ARM.Collect$$rtentry$$00000004) for __rt_entry_sh
    __rtentry2.o(.ARM.Collect$$rtentry$$00000008) refers to rtx_lib.o(.text._platform_post_stackheap_init) for _platform_post_stackheap_init
    __rtentry2.o(.ARM.Collect$$rtentry$$0000000A) refers to libinit.o(.ARM.Collect$$libinit$$00000000) for __rt_lib_init
    __rtentry2.o(.ARM.Collect$$rtentry$$0000000B) refers to boardinit3.o(.text) for _platform_post_lib_init
    __rtentry2.o(.ARM.Collect$$rtentry$$0000000D) refers to main.o(.text.main) for main
    __rtentry2.o(.ARM.Collect$$rtentry$$0000000D) refers to exit.o(.text) for exit
    __rtentry2.o(.ARM.exidx) refers to __rtentry2.o(.ARM.Collect$$rtentry$$00000001) for .ARM.Collect$$rtentry$$00000001
    __rtentry2.o(.ARM.exidx) refers to __rtentry2.o(.ARM.Collect$$rtentry$$00000008) for .ARM.Collect$$rtentry$$00000008
    __rtentry2.o(.ARM.exidx) refers to __rtentry2.o(.ARM.Collect$$rtentry$$0000000A) for .ARM.Collect$$rtentry$$0000000A
    __rtentry2.o(.ARM.exidx) refers to __rtentry2.o(.ARM.Collect$$rtentry$$0000000B) for .ARM.Collect$$rtentry$$0000000B
    __rtentry2.o(.ARM.exidx) refers to __rtentry2.o(.ARM.Collect$$rtentry$$0000000D) for .ARM.Collect$$rtentry$$0000000D
    __rtentry4.o(.ARM.Collect$$rtentry$$00000004) refers to sys_stackheap_outer.o(.text) for __user_setup_stackheap
    __rtentry4.o(.ARM.exidx) refers to __rtentry4.o(.ARM.Collect$$rtentry$$00000004) for .ARM.Collect$$rtentry$$00000004
    sys_stackheap_outer.o(.text) refers to libspace.o(.text) for __user_perproc_libspace
    sys_stackheap_outer.o(.text) refers to startup_apm32f40x.o(.text) for __user_initial_stackheap
    exit.o(.text) refers to rtexit.o(.ARM.Collect$$rtexit$$00000000) for __rt_exit
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000030) for __rt_lib_init_alloca_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$0000002E) for __rt_lib_init_argv_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$0000001D) for __rt_lib_init_atexit_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000023) for __rt_lib_init_clock_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000034) for __rt_lib_init_cpp_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000032) for __rt_lib_init_exceptions_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000001) for __rt_lib_init_fp_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000021) for __rt_lib_init_fp_trap_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000025) for __rt_lib_init_getenv_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$0000000C) for __rt_lib_init_heap_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000013) for __rt_lib_init_lc_collate_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000015) for __rt_lib_init_lc_ctype_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000017) for __rt_lib_init_lc_monetary_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000019) for __rt_lib_init_lc_numeric_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$0000001B) for __rt_lib_init_lc_time_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000006) for __rt_lib_init_preinit_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000010) for __rt_lib_init_rand_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000004) for __rt_lib_init_relocate_pie_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000035) for __rt_lib_init_return
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$0000001F) for __rt_lib_init_signal_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$00000027) for __rt_lib_init_stdio_1
    libinit.o(.ARM.Collect$$libinit$$00000000) refers (Special) to libinit2.o(.ARM.Collect$$libinit$$0000000E) for __rt_lib_init_user_alloc_1
    libspace.o(.text) refers to libspace.o(.bss) for __libspace_start
    rtexit.o(.ARM.Collect$$rtexit$$00000000) refers (Special) to rtexit2.o(.ARM.Collect$$rtexit$$00000004) for __rt_exit_exit
    rtexit.o(.ARM.Collect$$rtexit$$00000000) refers (Special) to rtexit2.o(.ARM.Collect$$rtexit$$00000003) for __rt_exit_ls
    rtexit.o(.ARM.Collect$$rtexit$$00000000) refers (Special) to rtexit2.o(.ARM.Collect$$rtexit$$00000002) for __rt_exit_prels_1
    rtexit.o(.ARM.exidx) refers (Special) to rtexit2.o(.ARM.Collect$$rtexit$$00000004) for __rt_exit_exit
    rtexit.o(.ARM.exidx) refers (Special) to rtexit2.o(.ARM.Collect$$rtexit$$00000003) for __rt_exit_ls
    rtexit.o(.ARM.exidx) refers (Special) to rtexit2.o(.ARM.Collect$$rtexit$$00000002) for __rt_exit_prels_1
    rtexit.o(.ARM.exidx) refers to rtexit.o(.ARM.Collect$$rtexit$$00000000) for .ARM.Collect$$rtexit$$00000000
    libinit2.o(.ARM.Collect$$libinit$$00000001) refers to fpinit.o(x$fpl$fpinit) for _fp_init
    libinit2.o(.ARM.Collect$$libinit$$00000012) refers to libinit2.o(.ARM.Collect$$libinit$$00000011) for .ARM.Collect$$libinit$$00000011
    libinit2.o(.ARM.Collect$$libinit$$00000014) refers to libinit2.o(.ARM.Collect$$libinit$$00000011) for .ARM.Collect$$libinit$$00000011
    libinit2.o(.ARM.Collect$$libinit$$00000016) refers to libinit2.o(.ARM.Collect$$libinit$$00000011) for .ARM.Collect$$libinit$$00000011
    libinit2.o(.ARM.Collect$$libinit$$00000018) refers to libinit2.o(.ARM.Collect$$libinit$$00000011) for .ARM.Collect$$libinit$$00000011
    libinit2.o(.ARM.Collect$$libinit$$0000001A) refers to libinit2.o(.ARM.Collect$$libinit$$00000011) for .ARM.Collect$$libinit$$00000011
    libinit2.o(.ARM.Collect$$libinit$$00000028) refers to argv_veneer.o(.emb_text) for __ARM_argv_veneer
    libinit2.o(.ARM.Collect$$libinit$$00000029) refers to argv_veneer.o(.emb_text) for __ARM_argv_veneer
    rtexit2.o(.ARM.Collect$$rtexit$$00000003) refers to libshutdown.o(.ARM.Collect$$libshutdown$$00000000) for __rt_lib_shutdown
    rtexit2.o(.ARM.Collect$$rtexit$$00000004) refers to sys_exit.o(.text) for _sys_exit
    rtexit2.o(.ARM.exidx) refers to rtexit2.o(.ARM.Collect$$rtexit$$00000001) for .ARM.Collect$$rtexit$$00000001
    rtexit2.o(.ARM.exidx) refers to rtexit2.o(.ARM.Collect$$rtexit$$00000003) for .ARM.Collect$$rtexit$$00000003
    rtexit2.o(.ARM.exidx) refers to rtexit2.o(.ARM.Collect$$rtexit$$00000004) for .ARM.Collect$$rtexit$$00000004
    argv_veneer.o(.emb_text) refers to no_argv.o(.text) for __ARM_get_argv
    sys_exit.o(.text) refers (Special) to use_no_semi.o(.text) for __I$use$semihosting
    sys_exit.o(.text) refers (Special) to indicate_semi.o(.text) for __semihosting_library_function
    sys_exit_hlt.o(.text) refers (Special) to use_no_semi.o(.text) for __I$use$semihosting
    sys_exit_hlt.o(.text) refers (Special) to indicate_semi.o(.text) for __semihosting_library_function
    _get_argv_nomalloc.o(.text) refers (Special) to hrguard.o(.text) for __heap_region$guard
    _get_argv_nomalloc.o(.text) refers to defsig_rtmem_outer.o(.text) for __rt_SIGRTMEM
    _get_argv_nomalloc.o(.text) refers to sys_command.o(.text) for _sys_command_string
    libshutdown.o(.ARM.Collect$$libshutdown$$00000000) refers (Special) to libshutdown2.o(.ARM.Collect$$libshutdown$$00000002) for __rt_lib_shutdown_cpp_1
    libshutdown.o(.ARM.Collect$$libshutdown$$00000000) refers (Special) to libshutdown2.o(.ARM.Collect$$libshutdown$$00000007) for __rt_lib_shutdown_fp_trap_1
    libshutdown.o(.ARM.Collect$$libshutdown$$00000000) refers (Special) to libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F) for __rt_lib_shutdown_heap_1
    libshutdown.o(.ARM.Collect$$libshutdown$$00000000) refers (Special) to libshutdown2.o(.ARM.Collect$$libshutdown$$00000010) for __rt_lib_shutdown_return
    libshutdown.o(.ARM.Collect$$libshutdown$$00000000) refers (Special) to libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A) for __rt_lib_shutdown_signal_1
    libshutdown.o(.ARM.Collect$$libshutdown$$00000000) refers (Special) to libshutdown2.o(.ARM.Collect$$libshutdown$$00000004) for __rt_lib_shutdown_stdio_1
    libshutdown.o(.ARM.Collect$$libshutdown$$00000000) refers (Special) to libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C) for __rt_lib_shutdown_user_alloc_1
    sys_command.o(.text) refers (Special) to use_no_semi.o(.text) for __I$use$semihosting
    sys_command.o(.text) refers (Special) to indicate_semi.o(.text) for __semihosting_library_function
    sys_command_hlt.o(.text) refers (Special) to use_no_semi.o(.text) for __I$use$semihosting
    sys_command_hlt.o(.text) refers (Special) to indicate_semi.o(.text) for __semihosting_library_function
    defsig_rtmem_outer.o(.text) refers to defsig_rtmem_inner.o(.text) for __rt_SIGRTMEM_inner
    defsig_rtmem_outer.o(.text) refers to defsig_exit.o(.text) for __sig_exit
    defsig_rtmem_formal.o(.text) refers to rt_raise.o(.text) for __rt_raise
    rt_raise.o(.text) refers to __raise.o(.text) for __raise
    rt_raise.o(.text) refers to sys_exit.o(.text) for _sys_exit
    defsig_exit.o(.text) refers to sys_exit.o(.text) for _sys_exit
    defsig_rtmem_inner.o(.text) refers to defsig_general.o(.text) for __default_signal_display
    __raise.o(.text) refers to defsig.o(CL$$defsig) for __default_signal_handler
    defsig_general.o(.text) refers to sys_wrch.o(.text) for _ttywrch
    sys_wrch.o(.text) refers (Special) to use_no_semi.o(.text) for __I$use$semihosting
    sys_wrch.o(.text) refers (Special) to indicate_semi.o(.text) for __semihosting_library_function
    sys_wrch_hlt.o(.text) refers (Special) to use_no_semi.o(.text) for __I$use$semihosting
    sys_wrch_hlt.o(.text) refers (Special) to indicate_semi.o(.text) for __semihosting_library_function
    defsig.o(CL$$defsig) refers to defsig_rtmem_inner.o(.text) for __rt_SIGRTMEM_inner
    defsig_abrt_inner.o(.text) refers to defsig_general.o(.text) for __default_signal_display
    defsig_fpe_inner.o(.text) refers to defsig_general.o(.text) for __default_signal_display
    defsig_rtred_inner.o(.text) refers to defsig_general.o(.text) for __default_signal_display
    defsig_stak_inner.o(.text) refers to defsig_general.o(.text) for __default_signal_display
    defsig_pvfn_inner.o(.text) refers to defsig_general.o(.text) for __default_signal_display
    defsig_cppl_inner.o(.text) refers to defsig_general.o(.text) for __default_signal_display
    defsig_segv_inner.o(.text) refers to defsig_general.o(.text) for __default_signal_display
    defsig_other.o(.text) refers to defsig_general.o(.text) for __default_signal_display


==============================================================================

Removing Unused input sections from the image.

    Removing main.o(.text), (0 bytes).
    Removing main.o(.ARM.exidx.text.GPIO_Init), (8 bytes).
    Removing main.o(.ARM.exidx.text.CAN_Init), (8 bytes).
    Removing main.o(.ARM.exidx.text.Delay), (8 bytes).
    Removing main.o(.ARM.exidx.text.CAN1_TX_IRQHandler), (8 bytes).
    Removing main.o(.ARM.exidx.text.CAN1_RX0_IRQHandler), (8 bytes).
    Removing main.o(.ARM.exidx.text.CAN1_RX1_IRQHandler), (8 bytes).
    Removing main.o(.ARM.exidx.text.RCM_Init), (8 bytes).
    Removing main.o(.ARM.exidx.text.main_Init), (8 bytes).
    Removing main.o(.ARM.exidx.text.IRQ_Init), (8 bytes).
    Removing main.o(.ARM.exidx.text.I2C_Setting), (8 bytes).
    Removing main.o(.ARM.exidx.text.main), (8 bytes).
    Removing main.o(.ARM.use_no_argv), (4 bytes).
    Removing i2c.o(.text), (0 bytes).
    Removing i2c.o(.ARM.exidx.text.i2c_setup_gpio), (8 bytes).
    Removing i2c.o(.ARM.exidx.text.rcc_I2C_init), (8 bytes).
    Removing i2c.o(.ARM.exidx.text.i2c_init), (8 bytes).
    Removing i2c.o(.ARM.exidx.text.i2c_read), (8 bytes).
    Removing i2c.o(.text.i2c_read_many), (524 bytes).
    Removing i2c.o(.ARM.exidx.text.i2c_read_many), (8 bytes).
    Removing i2c.o(.text.i2c_write_many), (230 bytes).
    Removing i2c.o(.ARM.exidx.text.i2c_write_many), (8 bytes).
    Removing i2c.o(.ARM.exidx.text.i2c_write), (8 bytes).
    Removing rtx_lib.o(.text), (0 bytes).
    Removing rtx_lib.o(.ARM.exidx.text._platform_post_stackheap_init), (8 bytes).
    Removing rtx_lib.o(.text.__user_perthread_libspace), (150 bytes).
    Removing rtx_lib.o(.ARM.exidx.text.__user_perthread_libspace), (8 bytes).
    Removing rtx_lib.o(.ARM.exidx.text.os_kernel_is_active), (8 bytes).
    Removing rtx_lib.o(.ARM.exidx.text._mutex_initialize), (8 bytes).
    Removing rtx_lib.o(.ARM.exidx.text._mutex_acquire), (8 bytes).
    Removing rtx_lib.o(.ARM.exidx.text._mutex_release), (8 bytes).
    Removing rtx_lib.o(.ARM.exidx.text._mutex_free), (8 bytes).
    Removing rtx_lib.o(.rodata.irqRtxLibRef), (4 bytes).
    Removing rtx_lib.o(.bss.os.libspace), (496 bytes).
    Removing rtx_config.o(.text), (0 bytes).
    Removing rtx_config.o(.text.osRtxIdleThread), (8 bytes).
    Removing rtx_config.o(.ARM.exidx.text.osRtxIdleThread), (8 bytes).
    Removing rtx_config.o(.ARM.exidx.text.osRtxErrorNotify), (8 bytes).
    Removing apm32f4xx_can.o(.text), (0 bytes).
    Removing apm32f4xx_can.o(.text.CAN_Reset), (80 bytes).
    Removing apm32f4xx_can.o(.ARM.exidx.text.CAN_Reset), (8 bytes).
    Removing apm32f4xx_can.o(.ARM.exidx.text.CAN_Config), (8 bytes).
    Removing apm32f4xx_can.o(.ARM.exidx.text.CAN_ConfigFilter), (8 bytes).
    Removing apm32f4xx_can.o(.text.CAN_ConfigStructInit), (56 bytes).
    Removing apm32f4xx_can.o(.ARM.exidx.text.CAN_ConfigStructInit), (8 bytes).
    Removing apm32f4xx_can.o(.text.CAN_SlaveStartBank), (66 bytes).
    Removing apm32f4xx_can.o(.ARM.exidx.text.CAN_SlaveStartBank), (8 bytes).
    Removing apm32f4xx_can.o(.text.CAN_EnableDBGFreeze), (18 bytes).
    Removing apm32f4xx_can.o(.ARM.exidx.text.CAN_EnableDBGFreeze), (8 bytes).
    Removing apm32f4xx_can.o(.ARM.exidx.text.CAN_DisableDBGFreeze), (8 bytes).
    Removing apm32f4xx_can.o(.text.CAN_TxMessage), (320 bytes).
    Removing apm32f4xx_can.o(.ARM.exidx.text.CAN_TxMessage), (8 bytes).
    Removing apm32f4xx_can.o(.text.CAN_TxMessageStatus), (248 bytes).
    Removing apm32f4xx_can.o(.ARM.exidx.text.CAN_TxMessageStatus), (8 bytes).
    Removing apm32f4xx_can.o(.text.CAN_CancelTxMailbox), (78 bytes).
    Removing apm32f4xx_can.o(.ARM.exidx.text.CAN_CancelTxMailbox), (8 bytes).
    Removing apm32f4xx_can.o(.ARM.exidx.text.CAN_RxMessage), (8 bytes).
    Removing apm32f4xx_can.o(.ARM.exidx.text.CAN_ReleaseFIFO), (8 bytes).
    Removing apm32f4xx_can.o(.text.CAN_PendingMessage), (52 bytes).
    Removing apm32f4xx_can.o(.ARM.exidx.text.CAN_PendingMessage), (8 bytes).
    Removing apm32f4xx_can.o(.ARM.exidx.text.CAN_OperatingMode), (8 bytes).
    Removing apm32f4xx_can.o(.text.CAN_SleepMode), (70 bytes).
    Removing apm32f4xx_can.o(.ARM.exidx.text.CAN_SleepMode), (8 bytes).
    Removing apm32f4xx_can.o(.text.CAN_WakeUpMode), (102 bytes).
    Removing apm32f4xx_can.o(.ARM.exidx.text.CAN_WakeUpMode), (8 bytes).
    Removing apm32f4xx_can.o(.text.CAN_ReadLastErrorCode), (16 bytes).
    Removing apm32f4xx_can.o(.ARM.exidx.text.CAN_ReadLastErrorCode), (8 bytes).
    Removing apm32f4xx_can.o(.text.CAN_ReadRxErrorCounter), (14 bytes).
    Removing apm32f4xx_can.o(.ARM.exidx.text.CAN_ReadRxErrorCounter), (8 bytes).
    Removing apm32f4xx_can.o(.text.CAN_ReadLSBTxErrorCounter), (16 bytes).
    Removing apm32f4xx_can.o(.ARM.exidx.text.CAN_ReadLSBTxErrorCounter), (8 bytes).
    Removing apm32f4xx_can.o(.text.CAN_EnableInterrupt), (20 bytes).
    Removing apm32f4xx_can.o(.ARM.exidx.text.CAN_EnableInterrupt), (8 bytes).
    Removing apm32f4xx_can.o(.text.CAN_DisableInterrupt), (20 bytes).
    Removing apm32f4xx_can.o(.ARM.exidx.text.CAN_DisableInterrupt), (8 bytes).
    Removing apm32f4xx_can.o(.text.CAN_ReadStatusFlag), (232 bytes).
    Removing apm32f4xx_can.o(.ARM.exidx.text.CAN_ReadStatusFlag), (8 bytes).
    Removing apm32f4xx_can.o(.text.CAN_ClearStatusFlag), (118 bytes).
    Removing apm32f4xx_can.o(.ARM.exidx.text.CAN_ClearStatusFlag), (8 bytes).
    Removing apm32f4xx_can.o(.text.CAN_ReadIntFlag), (412 bytes).
    Removing apm32f4xx_can.o(.ARM.exidx.text.CAN_ReadIntFlag), (8 bytes).
    Removing apm32f4xx_can.o(.text.CAN_ClearIntFlag), (308 bytes).
    Removing apm32f4xx_can.o(.ARM.exidx.text.CAN_ClearIntFlag), (8 bytes).
    Removing apm32f4xx_eint.o(.text), (0 bytes).
    Removing apm32f4xx_eint.o(.text.EINT_Reset), (62 bytes).
    Removing apm32f4xx_eint.o(.ARM.exidx.text.EINT_Reset), (8 bytes).
    Removing apm32f4xx_eint.o(.text.EINT_Config), (234 bytes).
    Removing apm32f4xx_eint.o(.ARM.exidx.text.EINT_Config), (8 bytes).
    Removing apm32f4xx_eint.o(.text.EINT_ConfigStructInit), (28 bytes).
    Removing apm32f4xx_eint.o(.ARM.exidx.text.EINT_ConfigStructInit), (8 bytes).
    Removing apm32f4xx_eint.o(.text.EINT_SelectSWInterrupt), (24 bytes).
    Removing apm32f4xx_eint.o(.ARM.exidx.text.EINT_SelectSWInterrupt), (8 bytes).
    Removing apm32f4xx_eint.o(.text.EINT_ReadStatusFlag), (52 bytes).
    Removing apm32f4xx_eint.o(.ARM.exidx.text.EINT_ReadStatusFlag), (8 bytes).
    Removing apm32f4xx_eint.o(.text.EINT_ClearStatusFlag), (20 bytes).
    Removing apm32f4xx_eint.o(.ARM.exidx.text.EINT_ClearStatusFlag), (8 bytes).
    Removing apm32f4xx_eint.o(.text.EINT_ReadIntFlag), (76 bytes).
    Removing apm32f4xx_eint.o(.ARM.exidx.text.EINT_ReadIntFlag), (8 bytes).
    Removing apm32f4xx_eint.o(.text.EINT_ClearIntFlag), (20 bytes).
    Removing apm32f4xx_eint.o(.ARM.exidx.text.EINT_ClearIntFlag), (8 bytes).
    Removing apm32f4xx_fmc.o(.text), (0 bytes).
    Removing apm32f4xx_fmc.o(.text.FMC_ConfigLatency), (24 bytes).
    Removing apm32f4xx_fmc.o(.ARM.exidx.text.FMC_ConfigLatency), (8 bytes).
    Removing apm32f4xx_fmc.o(.text.FMC_EnablePrefetchBuffer), (18 bytes).
    Removing apm32f4xx_fmc.o(.ARM.exidx.text.FMC_EnablePrefetchBuffer), (8 bytes).
    Removing apm32f4xx_fmc.o(.text.FMC_DisablePrefetchBuffer), (18 bytes).
    Removing apm32f4xx_fmc.o(.ARM.exidx.text.FMC_DisablePrefetchBuffer), (8 bytes).
    Removing apm32f4xx_fmc.o(.text.FMC_EnableInstructionCache), (18 bytes).
    Removing apm32f4xx_fmc.o(.ARM.exidx.text.FMC_EnableInstructionCache), (8 bytes).
    Removing apm32f4xx_fmc.o(.text.FMC_DisableInstructionCache), (18 bytes).
    Removing apm32f4xx_fmc.o(.ARM.exidx.text.FMC_DisableInstructionCache), (8 bytes).
    Removing apm32f4xx_fmc.o(.text.FMC_EnableDataCache), (18 bytes).
    Removing apm32f4xx_fmc.o(.ARM.exidx.text.FMC_EnableDataCache), (8 bytes).
    Removing apm32f4xx_fmc.o(.text.FMC_DisableDataCache), (18 bytes).
    Removing apm32f4xx_fmc.o(.ARM.exidx.text.FMC_DisableDataCache), (8 bytes).
    Removing apm32f4xx_fmc.o(.text.FMC_ResetInstructionCache), (18 bytes).
    Removing apm32f4xx_fmc.o(.ARM.exidx.text.FMC_ResetInstructionCache), (8 bytes).
    Removing apm32f4xx_fmc.o(.text.FMC_ResetDataCache), (18 bytes).
    Removing apm32f4xx_fmc.o(.ARM.exidx.text.FMC_ResetDataCache), (8 bytes).
    Removing apm32f4xx_fmc.o(.text.FMC_Unlock), (48 bytes).
    Removing apm32f4xx_fmc.o(.ARM.exidx.text.FMC_Unlock), (8 bytes).
    Removing apm32f4xx_fmc.o(.text.FMC_Lock), (18 bytes).
    Removing apm32f4xx_fmc.o(.ARM.exidx.text.FMC_Lock), (8 bytes).
    Removing apm32f4xx_fmc.o(.text.FMC_EraseSector), (206 bytes).
    Removing apm32f4xx_fmc.o(.ARM.exidx.text.FMC_EraseSector), (8 bytes).
    Removing apm32f4xx_fmc.o(.text.FMC_WaitForLastOperation), (48 bytes).
    Removing apm32f4xx_fmc.o(.ARM.exidx.text.FMC_WaitForLastOperation), (8 bytes).
    Removing apm32f4xx_fmc.o(.text.FMC_EraseAllSectors), (180 bytes).
    Removing apm32f4xx_fmc.o(.ARM.exidx.text.FMC_EraseAllSectors), (8 bytes).
    Removing apm32f4xx_fmc.o(.text.FMC_ProgramDoubleWord), (106 bytes).
    Removing apm32f4xx_fmc.o(.ARM.exidx.text.FMC_ProgramDoubleWord), (8 bytes).
    Removing apm32f4xx_fmc.o(.text.FMC_ProgramWord), (100 bytes).
    Removing apm32f4xx_fmc.o(.ARM.exidx.text.FMC_ProgramWord), (8 bytes).
    Removing apm32f4xx_fmc.o(.text.FMC_ProgramHalfWord), (104 bytes).
    Removing apm32f4xx_fmc.o(.ARM.exidx.text.FMC_ProgramHalfWord), (8 bytes).
    Removing apm32f4xx_fmc.o(.text.FMC_ProgramByte), (100 bytes).
    Removing apm32f4xx_fmc.o(.ARM.exidx.text.FMC_ProgramByte), (8 bytes).
    Removing apm32f4xx_fmc.o(.text.FMC_UnlockOptionByte), (48 bytes).
    Removing apm32f4xx_fmc.o(.ARM.exidx.text.FMC_UnlockOptionByte), (8 bytes).
    Removing apm32f4xx_fmc.o(.text.FMC_LockOptionByte), (18 bytes).
    Removing apm32f4xx_fmc.o(.ARM.exidx.text.FMC_LockOptionByte), (8 bytes).
    Removing apm32f4xx_fmc.o(.text.FMC_OPT_EnableWriteProtect), (56 bytes).
    Removing apm32f4xx_fmc.o(.ARM.exidx.text.FMC_OPT_EnableWriteProtect), (8 bytes).
    Removing apm32f4xx_fmc.o(.text.FMC_OPT_DisableWriteProtect), (56 bytes).
    Removing apm32f4xx_fmc.o(.ARM.exidx.text.FMC_OPT_DisableWriteProtect), (8 bytes).
    Removing apm32f4xx_fmc.o(.text.FMC_OPT_ConfigReadProtect), (52 bytes).
    Removing apm32f4xx_fmc.o(.ARM.exidx.text.FMC_OPT_ConfigReadProtect), (8 bytes).
    Removing apm32f4xx_fmc.o(.text.FMC_OPT_ConfigUser), (94 bytes).
    Removing apm32f4xx_fmc.o(.ARM.exidx.text.FMC_OPT_ConfigUser), (8 bytes).
    Removing apm32f4xx_fmc.o(.text.FMC_OPT_ConfigBrownoutReset), (36 bytes).
    Removing apm32f4xx_fmc.o(.ARM.exidx.text.FMC_OPT_ConfigBrownoutReset), (8 bytes).
    Removing apm32f4xx_fmc.o(.text.FMC_OPT_Launch), (42 bytes).
    Removing apm32f4xx_fmc.o(.ARM.exidx.text.FMC_OPT_Launch), (8 bytes).
    Removing apm32f4xx_fmc.o(.text.FMC_OPT_ReadUser), (16 bytes).
    Removing apm32f4xx_fmc.o(.ARM.exidx.text.FMC_OPT_ReadUser), (8 bytes).
    Removing apm32f4xx_fmc.o(.text.FMC_OPT_ReadWriteProtect), (12 bytes).
    Removing apm32f4xx_fmc.o(.ARM.exidx.text.FMC_OPT_ReadWriteProtect), (8 bytes).
    Removing apm32f4xx_fmc.o(.text.FMC_OPT_ReadProtectLevel), (40 bytes).
    Removing apm32f4xx_fmc.o(.ARM.exidx.text.FMC_OPT_ReadProtectLevel), (8 bytes).
    Removing apm32f4xx_fmc.o(.text.FMC_OPT_ReadBrownoutReset), (16 bytes).
    Removing apm32f4xx_fmc.o(.ARM.exidx.text.FMC_OPT_ReadBrownoutReset), (8 bytes).
    Removing apm32f4xx_fmc.o(.text.FMC_EnableInterrupt), (54 bytes).
    Removing apm32f4xx_fmc.o(.ARM.exidx.text.FMC_EnableInterrupt), (8 bytes).
    Removing apm32f4xx_fmc.o(.text.FMC_DisableInterrupt), (54 bytes).
    Removing apm32f4xx_fmc.o(.ARM.exidx.text.FMC_DisableInterrupt), (8 bytes).
    Removing apm32f4xx_fmc.o(.text.FMC_ReadStatusFlag), (44 bytes).
    Removing apm32f4xx_fmc.o(.ARM.exidx.text.FMC_ReadStatusFlag), (8 bytes).
    Removing apm32f4xx_fmc.o(.text.FMC_ClearStatusFlag), (20 bytes).
    Removing apm32f4xx_fmc.o(.ARM.exidx.text.FMC_ClearStatusFlag), (8 bytes).
    Removing apm32f4xx_fmc.o(.text.FMC_ReadStatus), (134 bytes).
    Removing apm32f4xx_fmc.o(.ARM.exidx.text.FMC_ReadStatus), (8 bytes).
    Removing apm32f4xx_gpio.o(.text), (0 bytes).
    Removing apm32f4xx_gpio.o(.text.GPIO_Reset), (288 bytes).
    Removing apm32f4xx_gpio.o(.ARM.exidx.text.GPIO_Reset), (8 bytes).
    Removing apm32f4xx_gpio.o(.ARM.exidx.text.GPIO_Config), (8 bytes).
    Removing apm32f4xx_gpio.o(.text.GPIO_ConfigStructInit), (34 bytes).
    Removing apm32f4xx_gpio.o(.ARM.exidx.text.GPIO_ConfigStructInit), (8 bytes).
    Removing apm32f4xx_gpio.o(.text.GPIO_ConfigPinLock), (54 bytes).
    Removing apm32f4xx_gpio.o(.ARM.exidx.text.GPIO_ConfigPinLock), (8 bytes).
    Removing apm32f4xx_gpio.o(.text.GPIO_ReadInputBit), (42 bytes).
    Removing apm32f4xx_gpio.o(.ARM.exidx.text.GPIO_ReadInputBit), (8 bytes).
    Removing apm32f4xx_gpio.o(.text.GPIO_ReadInputPort), (14 bytes).
    Removing apm32f4xx_gpio.o(.ARM.exidx.text.GPIO_ReadInputPort), (8 bytes).
    Removing apm32f4xx_gpio.o(.text.GPIO_ReadOutputBit), (42 bytes).
    Removing apm32f4xx_gpio.o(.ARM.exidx.text.GPIO_ReadOutputBit), (8 bytes).
    Removing apm32f4xx_gpio.o(.text.GPIO_ReadOutputPort), (14 bytes).
    Removing apm32f4xx_gpio.o(.ARM.exidx.text.GPIO_ReadOutputPort), (8 bytes).
    Removing apm32f4xx_gpio.o(.text.GPIO_SetBit), (20 bytes).
    Removing apm32f4xx_gpio.o(.ARM.exidx.text.GPIO_SetBit), (8 bytes).
    Removing apm32f4xx_gpio.o(.ARM.exidx.text.GPIO_ResetBit), (8 bytes).
    Removing apm32f4xx_gpio.o(.text.GPIO_WriteBitValue), (44 bytes).
    Removing apm32f4xx_gpio.o(.ARM.exidx.text.GPIO_WriteBitValue), (8 bytes).
    Removing apm32f4xx_gpio.o(.text.GPIO_WriteOutputPort), (20 bytes).
    Removing apm32f4xx_gpio.o(.ARM.exidx.text.GPIO_WriteOutputPort), (8 bytes).
    Removing apm32f4xx_gpio.o(.ARM.exidx.text.GPIO_ToggleBit), (8 bytes).
    Removing apm32f4xx_gpio.o(.ARM.exidx.text.GPIO_ConfigPinAF), (8 bytes).
    Removing apm32f4xx_i2c.o(.text), (0 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_Reset), (116 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_Reset), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_Config), (406 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_Config), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_ConfigStructInit), (46 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_ConfigStructInit), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_Enable), (18 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_Enable), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_Disable), (18 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_Disable), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_EnableGenerateStart), (18 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_EnableGenerateStart), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_DisableGenerateStart), (18 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_DisableGenerateStart), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_EnableGenerateStop), (18 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_EnableGenerateStop), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_DisableGenerateStop), (18 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_DisableGenerateStop), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_Tx7BitAddress), (68 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_Tx7BitAddress), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_EnableAcknowledge), (18 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_EnableAcknowledge), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_DisableAcknowledge), (18 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_DisableAcknowledge), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_ConfigOwnAddress2), (34 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_ConfigOwnAddress2), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_EnableDualAddress), (18 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_EnableDualAddress), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_DisableDualAddress), (18 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_DisableDualAddress), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_EnableGeneralCall), (18 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_EnableGeneralCall), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_DisableGeneralCall), (18 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_DisableGeneralCall), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_EnableSoftwareReset), (18 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_EnableSoftwareReset), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_DisableSoftwareReset), (18 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_DisableSoftwareReset), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_EnableStretchClock), (18 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_EnableStretchClock), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_DisableStretchClock), (18 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_DisableStretchClock), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_ConfigFastModeDutyCycle), (48 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_ConfigFastModeDutyCycle), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_ConfigNACKPosition), (44 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_ConfigNACKPosition), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_ConfigSMBusAlert), (44 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_ConfigSMBusAlert), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_EnableARP), (18 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_EnableARP), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_DisableARP), (18 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_DisableARP), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_TxData), (28 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_TxData), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_RxData), (14 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_RxData), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_EnablePECTransmit), (18 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_EnablePECTransmit), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_DisablePECTransmit), (18 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_DisablePECTransmit), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_ConfigPECPosition), (44 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_ConfigPECPosition), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_EnablePEC), (18 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_EnablePEC), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_DisablePEC), (18 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_DisablePEC), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_ReadPEC), (16 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_ReadPEC), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_EnableDMA), (18 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_EnableDMA), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_DisableDMA), (18 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_DisableDMA), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_EnableDMALastTransfer), (18 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_EnableDMALastTransfer), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_DisableDMALastTransfer), (18 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_DisableDMALastTransfer), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_ReadRegister), (142 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_ReadRegister), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_EnableInterrupt), (24 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_EnableInterrupt), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_DisableInterrupt), (24 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_DisableInterrupt), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_ReadEventStatus), (84 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_ReadEventStatus), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_ReadLastEvent), (52 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_ReadLastEvent), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_ReadStatusFlag), (360 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_ReadStatusFlag), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_ClearStatusFlag), (126 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_ClearStatusFlag), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_ReadIntFlag), (76 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_ReadIntFlag), (8 bytes).
    Removing apm32f4xx_i2c.o(.text.I2C_ClearIntFlag), (24 bytes).
    Removing apm32f4xx_i2c.o(.ARM.exidx.text.I2C_ClearIntFlag), (8 bytes).
    Removing apm32f4xx_misc.o(.text), (0 bytes).
    Removing apm32f4xx_misc.o(.text.NVIC_ConfigPriorityGroup), (32 bytes).
    Removing apm32f4xx_misc.o(.ARM.exidx.text.NVIC_ConfigPriorityGroup), (8 bytes).
    Removing apm32f4xx_misc.o(.text.NVIC_EnableIRQRequest), (246 bytes).
    Removing apm32f4xx_misc.o(.ARM.exidx.text.NVIC_EnableIRQRequest), (8 bytes).
    Removing apm32f4xx_misc.o(.text.NVIC_DisableIRQRequest), (36 bytes).
    Removing apm32f4xx_misc.o(.ARM.exidx.text.NVIC_DisableIRQRequest), (8 bytes).
    Removing apm32f4xx_misc.o(.text.NVIC_ConfigVectorTable), (36 bytes).
    Removing apm32f4xx_misc.o(.ARM.exidx.text.NVIC_ConfigVectorTable), (8 bytes).
    Removing apm32f4xx_misc.o(.text.NVIC_SetSystemLowPower), (28 bytes).
    Removing apm32f4xx_misc.o(.ARM.exidx.text.NVIC_SetSystemLowPower), (8 bytes).
    Removing apm32f4xx_misc.o(.text.NVIC_ResetystemLowPower), (28 bytes).
    Removing apm32f4xx_misc.o(.ARM.exidx.text.NVIC_ResetystemLowPower), (8 bytes).
    Removing apm32f4xx_misc.o(.text.SysTick_ConfigCLKSource), (56 bytes).
    Removing apm32f4xx_misc.o(.ARM.exidx.text.SysTick_ConfigCLKSource), (8 bytes).
    Removing apm32f4xx_rcm.o(.text), (0 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_Reset), (98 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_Reset), (8 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ConfigHSE), (8 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_WaitHSEReady), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_ConfigHSITrim), (38 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ConfigHSITrim), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_EnableHSI), (18 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnableHSI), (8 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisableHSI), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_ConfigLSE), (100 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ConfigLSE), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_EnableLSI), (18 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnableLSI), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_DisableLSI), (18 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisableLSI), (8 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ConfigPLL1), (8 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnablePLL1), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_DisablePLL1), (18 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisablePLL1), (8 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ConfigPLL2), (8 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnablePLL2), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_DisablePLL2), (18 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisablePLL2), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_EnableCSS), (18 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnableCSS), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_DisableCSS), (18 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisableCSS), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_ConfigMCO1), (62 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ConfigMCO1), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_ConfigMCO2), (58 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ConfigMCO2), (8 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ConfigSYSCLK), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_ReadSYSCLKSource), (16 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ReadSYSCLKSource), (8 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ConfigAHB), (8 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ConfigAPB1), (8 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ConfigAPB2), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_ConfigSDRAM), (38 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ConfigSDRAM), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_ReadSYSCLKFreq), (214 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ReadSYSCLKFreq), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_ReadHCLKFreq), (70 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ReadHCLKFreq), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_ReadPCLKFreq), (108 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ReadPCLKFreq), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_ConfigRTCCLK), (98 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ConfigRTCCLK), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_EnableRTCCLK), (18 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnableRTCCLK), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_DisableRTCCLK), (18 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisableRTCCLK), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_EnableBackupReset), (18 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnableBackupReset), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_DisableBackupReset), (18 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisableBackupReset), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_ConfigI2SCLK), (38 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ConfigI2SCLK), (8 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnableAHB1PeriphClock), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_DisableAHB1PeriphClock), (24 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisableAHB1PeriphClock), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_EnableAHB2PeriphClock), (24 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnableAHB2PeriphClock), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_DisableAHB2PeriphClock), (24 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisableAHB2PeriphClock), (8 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnableAPB1PeriphClock), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_DisableAPB1PeriphClock), (24 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisableAPB1PeriphClock), (8 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnableAPB2PeriphClock), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_DisableAPB2PeriphClock), (24 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisableAPB2PeriphClock), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_EnableAHB1PeriphReset), (24 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnableAHB1PeriphReset), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_DisableAHB1PeriphReset), (24 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisableAHB1PeriphReset), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_EnableAHB2PeriphReset), (24 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnableAHB2PeriphReset), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_DisableAHB2PeriphReset), (24 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisableAHB2PeriphReset), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_EnableAPB1PeriphReset), (24 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnableAPB1PeriphReset), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_DisableAPB1PeriphReset), (24 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisableAPB1PeriphReset), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_EnableAPB2PeriphReset), (24 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnableAPB2PeriphReset), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_DisableAPB2PeriphReset), (24 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisableAPB2PeriphReset), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_EnableAHB1PeriphClockLPMode), (24 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnableAHB1PeriphClockLPMode), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_DisableAHB1PeriphClockLPMode), (24 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisableAHB1PeriphClockLPMode), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_EnableAHB2PeriphClockLPMode), (24 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnableAHB2PeriphClockLPMode), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_DisableAHB2PeriphClockLPMode), (24 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisableAHB2PeriphClockLPMode), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_EnableAPB1PeriphClockLPMode), (24 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnableAPB1PeriphClockLPMode), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_DisableAPB1PeriphClockLPMode), (24 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisableAPB1PeriphClockLPMode), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_EnableAPB2PeriphClockLPMode), (24 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnableAPB2PeriphClockLPMode), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_DisableAPB2PeriphClockLPMode), (24 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisableAPB2PeriphClockLPMode), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_EnableInterrupt), (30 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_EnableInterrupt), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_DisableInterrupt), (30 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_DisableInterrupt), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_ReadStatusFlag), (124 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ReadStatusFlag), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_ClearStatusFlag), (18 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ClearStatusFlag), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_ReadIntFlag), (32 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ReadIntFlag), (8 bytes).
    Removing apm32f4xx_rcm.o(.text.RCM_ClearIntFlag), (30 bytes).
    Removing apm32f4xx_rcm.o(.ARM.exidx.text.RCM_ClearIntFlag), (8 bytes).
    Removing apm32f4xx_rcm.o(.rodata.cst16), (16 bytes).
    Removing apm32f4xx_rcm.o(.rodata.cst8), (8 bytes).
    Removing apm32f4xx_usart.o(.text), (0 bytes).
    Removing apm32f4xx_usart.o(.text.USART_Reset), (292 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_Reset), (8 bytes).
    Removing apm32f4xx_usart.o(.text.USART_Config), (394 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_Config), (8 bytes).
    Removing apm32f4xx_usart.o(.text.USART_ConfigStructInit), (40 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_ConfigStructInit), (8 bytes).
    Removing apm32f4xx_usart.o(.text.USART_ConfigClock), (98 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_ConfigClock), (8 bytes).
    Removing apm32f4xx_usart.o(.text.USART_ConfigClockStructInit), (26 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_ConfigClockStructInit), (8 bytes).
    Removing apm32f4xx_usart.o(.text.USART_Enable), (18 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_Enable), (8 bytes).
    Removing apm32f4xx_usart.o(.text.USART_Disable), (18 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_Disable), (8 bytes).
    Removing apm32f4xx_usart.o(.text.USART_ConfigPrescaler), (28 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_ConfigPrescaler), (8 bytes).
    Removing apm32f4xx_usart.o(.text.USART_EnableOverSampling8), (18 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_EnableOverSampling8), (8 bytes).
    Removing apm32f4xx_usart.o(.text.USART_DisableOverSampling8), (18 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_DisableOverSampling8), (8 bytes).
    Removing apm32f4xx_usart.o(.text.USART_EnableOverSampling), (18 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_EnableOverSampling), (8 bytes).
    Removing apm32f4xx_usart.o(.text.USART_DisableOverSampling), (18 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_DisableOverSampling), (8 bytes).
    Removing apm32f4xx_usart.o(.text.USART_TxData), (26 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_TxData), (8 bytes).
    Removing apm32f4xx_usart.o(.text.USART_RxData), (16 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_RxData), (8 bytes).
    Removing apm32f4xx_usart.o(.text.USART_Address), (26 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_Address), (8 bytes).
    Removing apm32f4xx_usart.o(.text.USART_EnableMuteMode), (18 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_EnableMuteMode), (8 bytes).
    Removing apm32f4xx_usart.o(.text.USART_DisableMuteMode), (18 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_DisableMuteMode), (8 bytes).
    Removing apm32f4xx_usart.o(.text.USART_ConfigWakeUp), (34 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_ConfigWakeUp), (8 bytes).
    Removing apm32f4xx_usart.o(.text.USART_ConfigLINBreakDetectLength), (34 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_ConfigLINBreakDetectLength), (8 bytes).
    Removing apm32f4xx_usart.o(.text.USART_EnableLIN), (18 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_EnableLIN), (8 bytes).
    Removing apm32f4xx_usart.o(.text.USART_DisableLIN), (18 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_DisableLIN), (8 bytes).
    Removing apm32f4xx_usart.o(.text.USART_TxBreak), (18 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_TxBreak), (8 bytes).
    Removing apm32f4xx_usart.o(.text.USART_EnableHalfDuplex), (18 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_EnableHalfDuplex), (8 bytes).
    Removing apm32f4xx_usart.o(.text.USART_DisableHalfDuplex), (18 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_DisableHalfDuplex), (8 bytes).
    Removing apm32f4xx_usart.o(.text.USART_ConfigGuardTime), (30 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_ConfigGuardTime), (8 bytes).
    Removing apm32f4xx_usart.o(.text.USART_EnableSmartCard), (18 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_EnableSmartCard), (8 bytes).
    Removing apm32f4xx_usart.o(.text.USART_DisableSmartCard), (18 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_DisableSmartCard), (8 bytes).
    Removing apm32f4xx_usart.o(.text.USART_EnableSmartCardNACK), (18 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_EnableSmartCardNACK), (8 bytes).
    Removing apm32f4xx_usart.o(.text.USART_DisableSmartCardNACK), (18 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_DisableSmartCardNACK), (8 bytes).
    Removing apm32f4xx_usart.o(.text.USART_ConfigIrDA), (34 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_ConfigIrDA), (8 bytes).
    Removing apm32f4xx_usart.o(.text.USART_EnableIrDA), (18 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_EnableIrDA), (8 bytes).
    Removing apm32f4xx_usart.o(.text.USART_DisableIrDA), (18 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_DisableIrDA), (8 bytes).
    Removing apm32f4xx_usart.o(.text.USART_EnableDMA), (50 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_EnableDMA), (8 bytes).
    Removing apm32f4xx_usart.o(.text.USART_DisableDMA), (62 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_DisableDMA), (8 bytes).
    Removing apm32f4xx_usart.o(.text.USART_EnableInterrupt), (86 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_EnableInterrupt), (8 bytes).
    Removing apm32f4xx_usart.o(.text.USART_DisableInterrupt), (94 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_DisableInterrupt), (8 bytes).
    Removing apm32f4xx_usart.o(.text.USART_ReadStatusFlag), (28 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_ReadStatusFlag), (8 bytes).
    Removing apm32f4xx_usart.o(.text.USART_ClearStatusFlag), (24 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_ClearStatusFlag), (8 bytes).
    Removing apm32f4xx_usart.o(.text.USART_ReadIntFlag), (132 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_ReadIntFlag), (8 bytes).
    Removing apm32f4xx_usart.o(.text.USART_ClearIntFlag), (34 bytes).
    Removing apm32f4xx_usart.o(.ARM.exidx.text.USART_ClearIntFlag), (8 bytes).
    Removing system_apm32f4xx.o(.text), (0 bytes).
    Removing system_apm32f4xx.o(.ARM.exidx.text.SystemInit), (8 bytes).
    Removing system_apm32f4xx.o(.ARM.exidx.text.SystemClockConfig), (8 bytes).
    Removing system_apm32f4xx.o(.ARM.exidx.text.SystemCoreClockUpdate), (8 bytes).
    Removing rtx_kernel.o(.text), (0 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osRtxKernelPreInit), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osRtxKernelErrorNotify), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelInitialize), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelGetInfo), (48 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetInfo), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelGetInfo), (48 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetInfo), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetState), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetState), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelStart), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelStart), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelLock), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelLock), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelUnlock), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelUnlock), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelRestoreLock), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelRestoreLock), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelSuspend), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelSuspend), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelResume), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelResume), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelGetTickCount), (40 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetTickCount), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelGetTickCount), (12 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetTickCount), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelGetTickFreq), (40 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetTickFreq), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelGetTickFreq), (12 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetTickFreq), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelGetSysTimerCount), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetSysTimerCount), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount), (40 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetSysTimerCount), (8 bytes).
    Removing rtx_kernel.o(.text.osKernelGetSysTimerFreq), (36 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.osKernelGetSysTimerFreq), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelGetSysTimerFreq), (4 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelGetSysTimerFreq), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelInitialize), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelStart), (140 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelStart), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelLock), (32 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelLock), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelUnlock), (32 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelUnlock), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelRestoreLock), (44 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelRestoreLock), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelSuspend), (64 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelSuspend), (8 bytes).
    Removing rtx_kernel.o(.text.GetKernelSleepTime), (32 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.GetKernelSleepTime), (8 bytes).
    Removing rtx_kernel.o(.text.svcRtxKernelResume), (124 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.svcRtxKernelResume), (8 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.OUTLINED_FUNCTION_0), (8 bytes).
    Removing rtx_kernel.o(.text.OUTLINED_FUNCTION_1), (6 bytes).
    Removing rtx_kernel.o(.ARM.exidx.text.OUTLINED_FUNCTION_1), (8 bytes).
    Removing rtx_thread.o(.text), (0 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadListPut), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadListGet), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadListSort), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadListRemove), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadReadyPut), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayTick), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadRegPtr), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadSwitch), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadDispatch), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadBlock), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadWaitExit), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayRemove), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadWaitEnter), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadDelayInsert), (8 bytes).
    Removing rtx_thread.o(.text.osRtxThreadStartup), (60 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadStartup), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadNew), (492 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadNew), (8 bytes).
    Removing rtx_thread.o(.text.osThreadNew), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadNew), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetName), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetName), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetId), (40 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetId), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetId), (12 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetId), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetState), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetState), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetStackSize), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetStackSize), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetStackSpace), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetStackSpace), (8 bytes).
    Removing rtx_thread.o(.text.osThreadSetPriority), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadSetPriority), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetPriority), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetPriority), (8 bytes).
    Removing rtx_thread.o(.text.osThreadYield), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadYield), (8 bytes).
    Removing rtx_thread.o(.text.osThreadSuspend), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadSuspend), (8 bytes).
    Removing rtx_thread.o(.text.osThreadResume), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadResume), (8 bytes).
    Removing rtx_thread.o(.text.osThreadDetach), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadDetach), (8 bytes).
    Removing rtx_thread.o(.text.osThreadJoin), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadJoin), (8 bytes).
    Removing rtx_thread.o(.text.osThreadExit), (12 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadExit), (8 bytes).
    Removing rtx_thread.o(.text.osThreadTerminate), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadTerminate), (8 bytes).
    Removing rtx_thread.o(.text.osThreadGetCount), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadGetCount), (8 bytes).
    Removing rtx_thread.o(.text.osThreadEnumerate), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadEnumerate), (8 bytes).
    Removing rtx_thread.o(.text.osThreadFlagsSet), (88 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadFlagsSet), (8 bytes).
    Removing rtx_thread.o(.text.osThreadFlagsClear), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadFlagsClear), (8 bytes).
    Removing rtx_thread.o(.text.osThreadFlagsGet), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadFlagsGet), (8 bytes).
    Removing rtx_thread.o(.text.osThreadFlagsWait), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osThreadFlagsWait), (8 bytes).
    Removing rtx_thread.o(.text.osRtxThreadPostProcess), (40 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadPostProcess), (8 bytes).
    Removing rtx_thread.o(.text.ThreadFlagsCheck), (100 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.ThreadFlagsCheck), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetName), (16 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetName), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetState), (20 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetState), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetStackSize), (16 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetStackSize), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetStackSpace), (60 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetStackSpace), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadSetPriority), (72 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadSetPriority), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetPriority), (24 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetPriority), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadYield), (56 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadYield), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadSuspend), (116 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadSuspend), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadResume), (44 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadResume), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadDetach), (56 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadDetach), (8 bytes).
    Removing rtx_thread.o(.text.osRtxThreadListUnlink), (32 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadListUnlink), (8 bytes).
    Removing rtx_thread.o(.text.osRtxThreadFree), (88 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadFree), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadJoin), (84 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadJoin), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadExit), (76 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadExit), (8 bytes).
    Removing rtx_thread.o(.text.osRtxThreadJoinWakeup), (30 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadJoinWakeup), (8 bytes).
    Removing rtx_thread.o(.text.osRtxThreadDestroy), (36 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.osRtxThreadDestroy), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadTerminate), (136 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadTerminate), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadGetCount), (52 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadGetCount), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadEnumerate), (92 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadEnumerate), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadFlagsSet), (102 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsSet), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadFlagsClear), (52 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsClear), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadFlagsGet), (20 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsGet), (8 bytes).
    Removing rtx_thread.o(.text.svcRtxThreadFlagsWait), (76 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.svcRtxThreadFlagsWait), (8 bytes).
    Removing rtx_thread.o(.text.OUTLINED_FUNCTION_0), (6 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.OUTLINED_FUNCTION_0), (8 bytes).
    Removing rtx_thread.o(.text.OUTLINED_FUNCTION_1), (6 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.OUTLINED_FUNCTION_1), (8 bytes).
    Removing rtx_thread.o(.text.OUTLINED_FUNCTION_2), (20 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.OUTLINED_FUNCTION_2), (8 bytes).
    Removing rtx_thread.o(.text.OUTLINED_FUNCTION_3), (8 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.OUTLINED_FUNCTION_3), (8 bytes).
    Removing rtx_thread.o(.text.OUTLINED_FUNCTION_4), (6 bytes).
    Removing rtx_thread.o(.ARM.exidx.text.OUTLINED_FUNCTION_4), (8 bytes).
    Removing rtx_timer.o(.text), (0 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osRtxTimerSetup), (8 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osRtxTimerTick), (8 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osRtxTimerThread), (8 bytes).
    Removing rtx_timer.o(.text.osTimerNew), (36 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerNew), (8 bytes).
    Removing rtx_timer.o(.text.osTimerGetName), (36 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerGetName), (8 bytes).
    Removing rtx_timer.o(.text.osTimerStart), (36 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerStart), (8 bytes).
    Removing rtx_timer.o(.text.osTimerStop), (36 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerStop), (8 bytes).
    Removing rtx_timer.o(.text.osTimerIsRunning), (36 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerIsRunning), (8 bytes).
    Removing rtx_timer.o(.text.osTimerDelete), (36 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.osTimerDelete), (8 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.TimerInsert), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerNew), (120 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerNew), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerGetName), (16 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerGetName), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerStart), (72 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerStart), (8 bytes).
    Removing rtx_timer.o(.text.TimerRemove), (40 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.TimerRemove), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerStop), (40 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerStop), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerIsRunning), (24 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerIsRunning), (8 bytes).
    Removing rtx_timer.o(.text.svcRtxTimerDelete), (76 bytes).
    Removing rtx_timer.o(.ARM.exidx.text.svcRtxTimerDelete), (8 bytes).
    Removing rtx_mutex.o(.text), (0 bytes).
    Removing rtx_mutex.o(.text.osRtxMutexOwnerRelease), (72 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osRtxMutexOwnerRelease), (8 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osRtxMutexOwnerRestore), (8 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexNew), (8 bytes).
    Removing rtx_mutex.o(.text.osMutexGetName), (36 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexGetName), (8 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexAcquire), (8 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexRelease), (8 bytes).
    Removing rtx_mutex.o(.text.osMutexGetOwner), (36 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexGetOwner), (8 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.osMutexDelete), (8 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexNew), (8 bytes).
    Removing rtx_mutex.o(.text.svcRtxMutexGetName), (16 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexGetName), (8 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexAcquire), (8 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexRelease), (8 bytes).
    Removing rtx_mutex.o(.text.svcRtxMutexGetOwner), (20 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexGetOwner), (8 bytes).
    Removing rtx_mutex.o(.ARM.exidx.text.svcRtxMutexDelete), (8 bytes).
    Removing irq_armv7m.o(.rodata), (1 bytes).
    Removing irq_armv7m.o(.ARM.exidx), (24 bytes).
    Removing rtx_memory.o(.text), (0 bytes).
    Removing rtx_memory.o(.ARM.exidx.text.osRtxMemoryInit), (8 bytes).
    Removing rtx_memory.o(.ARM.exidx.text.osRtxMemoryAlloc), (8 bytes).
    Removing rtx_memory.o(.ARM.exidx.text.osRtxMemoryFree), (8 bytes).
    Removing rtx_mempool.o(.text), (0 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolInit), (8 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolAlloc), (8 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolFree), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolNew), (36 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolNew), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolGetName), (36 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetName), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolAlloc), (104 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolAlloc), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolFree), (72 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolFree), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolGetCapacity), (48 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetCapacity), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolGetCapacity), (16 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetCapacity), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolGetBlockSize), (48 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetBlockSize), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolGetBlockSize), (16 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetBlockSize), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolGetCount), (48 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetCount), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolGetCount), (16 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetCount), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolGetSpace), (36 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolGetSpace), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolGetSpace), (20 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetSpace), (8 bytes).
    Removing rtx_mempool.o(.text.osMemoryPoolDelete), (36 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osMemoryPoolDelete), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolNew), (312 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolNew), (8 bytes).
    Removing rtx_mempool.o(.text.osRtxMemoryPoolPostProcess), (72 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.osRtxMemoryPoolPostProcess), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolGetName), (16 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolGetName), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolAlloc), (92 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolAlloc), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolFree), (100 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolFree), (8 bytes).
    Removing rtx_mempool.o(.text.svcRtxMemoryPoolDelete), (108 bytes).
    Removing rtx_mempool.o(.ARM.exidx.text.svcRtxMemoryPoolDelete), (8 bytes).
    Removing rtx_msgqueue.o(.text), (0 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osRtxMessageQueueTimerSetup), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueNew), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueNew), (36 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueNew), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueGetName), (36 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetName), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueuePut), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGet), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueGetCapacity), (48 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetCapacity), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueGetCapacity), (16 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetCapacity), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueGetMsgSize), (48 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetMsgSize), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueGetMsgSize), (16 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetMsgSize), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueGetCount), (48 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetCount), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueGetCount), (16 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetCount), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueGetSpace), (36 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueGetSpace), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueGetSpace), (20 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetSpace), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueReset), (36 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueReset), (8 bytes).
    Removing rtx_msgqueue.o(.text.osMessageQueueDelete), (36 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osMessageQueueDelete), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.osRtxMessageQueuePostProcess), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.MessageQueueRemove), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.MessageQueuePut), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueGetName), (16 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGetName), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueuePut), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.MessageQueueGet), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueGet), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueReset), (166 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueReset), (8 bytes).
    Removing rtx_msgqueue.o(.text.svcRtxMessageQueueDelete), (108 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.svcRtxMessageQueueDelete), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.OUTLINED_FUNCTION_0), (8 bytes).
    Removing rtx_msgqueue.o(.ARM.exidx.text.OUTLINED_FUNCTION_1), (8 bytes).
    Removing rtx_system.o(.text), (0 bytes).
    Removing rtx_system.o(.ARM.exidx.text.osRtxTick_Handler), (8 bytes).
    Removing rtx_system.o(.ARM.exidx.text.osRtxPendSV_Handler), (8 bytes).
    Removing rtx_system.o(.ARM.exidx.text.osRtxPostProcess), (8 bytes).
    Removing os_systick.o(.text), (0 bytes).
    Removing os_systick.o(.text.OS_Tick_Setup), (64 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_Setup), (8 bytes).
    Removing os_systick.o(.text.OS_Tick_Enable), (44 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_Enable), (8 bytes).
    Removing os_systick.o(.text.OS_Tick_Disable), (44 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_Disable), (8 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_AcknowledgeIRQ), (8 bytes).
    Removing os_systick.o(.text.OS_Tick_GetIRQn), (6 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_GetIRQn), (8 bytes).
    Removing os_systick.o(.text.OS_Tick_GetClock), (12 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_GetClock), (8 bytes).
    Removing os_systick.o(.text.OS_Tick_GetInterval), (12 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_GetInterval), (8 bytes).
    Removing os_systick.o(.text.OS_Tick_GetCount), (16 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_GetCount), (8 bytes).
    Removing os_systick.o(.text.OS_Tick_GetOverflow), (16 bytes).
    Removing os_systick.o(.ARM.exidx.text.OS_Tick_GetOverflow), (8 bytes).
    Removing os_systick.o(.bss.os), (1 bytes).

852 unused section(s) (total 23778 bytes) removed from the image.

==============================================================================

Image Symbol Table

    Local Symbols

    Symbol Name                              Value     Ov Type        Size  Object(Section)

    ../clib/angel/boardlib.s                 0x00000000   Number         0  boardinit1.o ABSOLUTE
    ../clib/angel/boardlib.s                 0x00000000   Number         0  boardinit3.o ABSOLUTE
    ../clib/angel/boardlib.s                 0x00000000   Number         0  boardshut.o ABSOLUTE
    ../clib/angel/handlers.s                 0x00000000   Number         0  __scatter_copy.o ABSOLUTE
    ../clib/angel/handlers.s                 0x00000000   Number         0  __scatter_zi.o ABSOLUTE
    ../clib/angel/kernel.s                   0x00000000   Number         0  __rtentry.o ABSOLUTE
    ../clib/angel/kernel.s                   0x00000000   Number         0  __rtentry2.o ABSOLUTE
    ../clib/angel/kernel.s                   0x00000000   Number         0  __rtentry4.o ABSOLUTE
    ../clib/angel/kernel.s                   0x00000000   Number         0  rtexit.o ABSOLUTE
    ../clib/angel/kernel.s                   0x00000000   Number         0  rtexit2.o ABSOLUTE
    ../clib/angel/rt.s                       0x00000000   Number         0  rt_raise.o ABSOLUTE
    ../clib/angel/scatter.s                  0x00000000   Number         0  __scatter.o ABSOLUTE
    ../clib/angel/startup.s                  0x00000000   Number         0  __main.o ABSOLUTE
    ../clib/angel/sys.s                      0x00000000   Number         0  sys_stackheap_outer.o ABSOLUTE
    ../clib/angel/sys.s                      0x00000000   Number         0  libspace.o ABSOLUTE
    ../clib/angel/sys.s                      0x00000000   Number         0  use_no_semi.o ABSOLUTE
    ../clib/angel/sys.s                      0x00000000   Number         0  indicate_semi.o ABSOLUTE
    ../clib/angel/sysapp.c                   0x00000000   Number         0  sys_exit.o ABSOLUTE
    ../clib/angel/sysapp.c                   0x00000000   Number         0  sys_exit_hlt.o ABSOLUTE
    ../clib/angel/sysapp.c                   0x00000000   Number         0  sys_command.o ABSOLUTE
    ../clib/angel/sysapp.c                   0x00000000   Number         0  sys_command_hlt.o ABSOLUTE
    ../clib/angel/sysapp.c                   0x00000000   Number         0  sys_wrch.o ABSOLUTE
    ../clib/angel/sysapp.c                   0x00000000   Number         0  sys_wrch_hlt.o ABSOLUTE
    ../clib/armsys.c                         0x00000000   Number         0  argv_veneer.o ABSOLUTE
    ../clib/armsys.c                         0x00000000   Number         0  argv_veneer.o ABSOLUTE
    ../clib/armsys.c                         0x00000000   Number         0  _get_argv_nomalloc.o ABSOLUTE
    ../clib/armsys.c                         0x00000000   Number         0  no_argv.o ABSOLUTE
    ../clib/heapalloc.c                      0x00000000   Number         0  hrguard.o ABSOLUTE
    ../clib/heapaux.c                        0x00000000   Number         0  heapauxi.o ABSOLUTE
    ../clib/libinit.s                        0x00000000   Number         0  libinit.o ABSOLUTE
    ../clib/libinit.s                        0x00000000   Number         0  libinit2.o ABSOLUTE
    ../clib/libinit.s                        0x00000000   Number         0  libshutdown.o ABSOLUTE
    ../clib/libinit.s                        0x00000000   Number         0  libshutdown2.o ABSOLUTE
    ../clib/memcpset.s                       0x00000000   Number         0  rt_memcpy_v6.o ABSOLUTE
    ../clib/memcpset.s                       0x00000000   Number         0  rt_memclr.o ABSOLUTE
    ../clib/memcpset.s                       0x00000000   Number         0  rt_memclr_w.o ABSOLUTE
    ../clib/memcpset.s                       0x00000000   Number         0  rt_memcpy_w.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_rtmem_outer.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_rtmem_formal.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_exit.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_rtmem_inner.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  __raise.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_general.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_abrt_inner.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_fpe_inner.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_rtred_inner.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_stak_inner.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_pvfn_inner.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_cppl_inner.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_segv_inner.o ABSOLUTE
    ../clib/signal.c                         0x00000000   Number         0  defsig_other.o ABSOLUTE
    ../clib/signal.s                         0x00000000   Number         0  defsig.o ABSOLUTE
    ../clib/stdlib.c                         0x00000000   Number         0  exit.o ABSOLUTE
    ../fplib/fpinit.s                        0x00000000   Number         0  fpinit.o ABSOLUTE
    RTE/Device/APM32F407VG/startup_apm32f40x.s 0x00000000   Number         0  startup_apm32f40x.o ABSOLUTE
    RTX_Config.c                             0x00000000   Number         0  rtx_config.o ABSOLUTE
    apm32f4xx_can.c                          0x00000000   Number         0  apm32f4xx_can.o ABSOLUTE
    apm32f4xx_eint.c                         0x00000000   Number         0  apm32f4xx_eint.o ABSOLUTE
    apm32f4xx_fmc.c                          0x00000000   Number         0  apm32f4xx_fmc.o ABSOLUTE
    apm32f4xx_gpio.c                         0x00000000   Number         0  apm32f4xx_gpio.o ABSOLUTE
    apm32f4xx_i2c.c                          0x00000000   Number         0  apm32f4xx_i2c.o ABSOLUTE
    apm32f4xx_misc.c                         0x00000000   Number         0  apm32f4xx_misc.o ABSOLUTE
    apm32f4xx_rcm.c                          0x00000000   Number         0  apm32f4xx_rcm.o ABSOLUTE
    apm32f4xx_usart.c                        0x00000000   Number         0  apm32f4xx_usart.o ABSOLUTE
    dc.s                                     0x00000000   Number         0  dc.o ABSOLUTE
    i2c.c                                    0x00000000   Number         0  i2c.o ABSOLUTE
    main.c                                   0x00000000   Number         0  main.o ABSOLUTE
    os_systick.c                             0x00000000   Number         0  os_systick.o ABSOLUTE
    rtx_kernel.c                             0x00000000   Number         0  rtx_kernel.o ABSOLUTE
    rtx_lib.c                                0x00000000   Number         0  rtx_lib.o ABSOLUTE
    rtx_memory.c                             0x00000000   Number         0  rtx_memory.o ABSOLUTE
    rtx_mempool.c                            0x00000000   Number         0  rtx_mempool.o ABSOLUTE
    rtx_msgqueue.c                           0x00000000   Number         0  rtx_msgqueue.o ABSOLUTE
    rtx_mutex.c                              0x00000000   Number         0  rtx_mutex.o ABSOLUTE
    rtx_system.c                             0x00000000   Number         0  rtx_system.o ABSOLUTE
    rtx_thread.c                             0x00000000   Number         0  rtx_thread.o ABSOLUTE
    rtx_timer.c                              0x00000000   Number         0  rtx_timer.o ABSOLUTE
    system_apm32f4xx.c                       0x00000000   Number         0  system_apm32f4xx.o ABSOLUTE
    FPU_USED                                 0x00000001   Number         0  irq_armv7m.o ABSOLUTE
    osRtxErrorStackOverflow                  0x00000001   Number         0  irq_armv7m.o ABSOLUTE
    I_T_RUN_OFS                              0x00000014   Number         0  irq_armv7m.o ABSOLUTE
    TCB_SF_OFS                               0x00000022   Number         0  irq_armv7m.o ABSOLUTE
    TCB_SP_OFS                               0x00000038   Number         0  irq_armv7m.o ABSOLUTE
    RESET                                    0x08000000   Section      404  startup_apm32f40x.o(RESET)
    !!!main                                  0x08000194   Section        8  __main.o(!!!main)
    !!!scatter                               0x0800019c   Section       52  __scatter.o(!!!scatter)
    !!handler_copy                           0x080001d0   Section       26  __scatter_copy.o(!!handler_copy)
    !!handler_zi                             0x080001ec   Section       28  __scatter_zi.o(!!handler_zi)
    .ARM.Collect$$libinit$$00000000          0x08000208   Section        2  libinit.o(.ARM.Collect$$libinit$$00000000)
    .ARM.Collect$$libinit$$00000001          0x0800020a   Section        4  libinit2.o(.ARM.Collect$$libinit$$00000001)
    .ARM.Collect$$libinit$$00000004          0x0800020e   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000004)
    .ARM.Collect$$libinit$$00000006          0x0800020e   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000006)
    .ARM.Collect$$libinit$$0000000C          0x0800020e   Section        0  libinit2.o(.ARM.Collect$$libinit$$0000000C)
    .ARM.Collect$$libinit$$0000000E          0x0800020e   Section        0  libinit2.o(.ARM.Collect$$libinit$$0000000E)
    .ARM.Collect$$libinit$$00000010          0x0800020e   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000010)
    .ARM.Collect$$libinit$$00000013          0x0800020e   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000013)
    .ARM.Collect$$libinit$$00000015          0x0800020e   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000015)
    .ARM.Collect$$libinit$$00000017          0x0800020e   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000017)
    .ARM.Collect$$libinit$$00000019          0x0800020e   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000019)
    .ARM.Collect$$libinit$$0000001B          0x0800020e   Section        0  libinit2.o(.ARM.Collect$$libinit$$0000001B)
    .ARM.Collect$$libinit$$0000001D          0x0800020e   Section        0  libinit2.o(.ARM.Collect$$libinit$$0000001D)
    .ARM.Collect$$libinit$$0000001F          0x0800020e   Section        0  libinit2.o(.ARM.Collect$$libinit$$0000001F)
    .ARM.Collect$$libinit$$00000021          0x0800020e   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000021)
    .ARM.Collect$$libinit$$00000023          0x0800020e   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000023)
    .ARM.Collect$$libinit$$00000025          0x0800020e   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000025)
    .ARM.Collect$$libinit$$00000027          0x0800020e   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000027)
    .ARM.Collect$$libinit$$0000002E          0x0800020e   Section        0  libinit2.o(.ARM.Collect$$libinit$$0000002E)
    .ARM.Collect$$libinit$$00000030          0x0800020e   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000030)
    .ARM.Collect$$libinit$$00000032          0x0800020e   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000032)
    .ARM.Collect$$libinit$$00000034          0x0800020e   Section        0  libinit2.o(.ARM.Collect$$libinit$$00000034)
    .ARM.Collect$$libinit$$00000035          0x0800020e   Section        2  libinit2.o(.ARM.Collect$$libinit$$00000035)
    .ARM.Collect$$libshutdown$$00000000      0x08000210   Section        2  libshutdown.o(.ARM.Collect$$libshutdown$$00000000)
    .ARM.Collect$$libshutdown$$00000002      0x08000212   Section        0  libshutdown2.o(.ARM.Collect$$libshutdown$$00000002)
    .ARM.Collect$$libshutdown$$00000004      0x08000212   Section        0  libshutdown2.o(.ARM.Collect$$libshutdown$$00000004)
    .ARM.Collect$$libshutdown$$00000007      0x08000212   Section        0  libshutdown2.o(.ARM.Collect$$libshutdown$$00000007)
    .ARM.Collect$$libshutdown$$0000000A      0x08000212   Section        0  libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A)
    .ARM.Collect$$libshutdown$$0000000C      0x08000212   Section        0  libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C)
    .ARM.Collect$$libshutdown$$0000000F      0x08000212   Section        0  libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F)
    .ARM.Collect$$libshutdown$$00000010      0x08000212   Section        2  libshutdown2.o(.ARM.Collect$$libshutdown$$00000010)
    .ARM.Collect$$rtentry$$00000000          0x08000214   Section        0  __rtentry.o(.ARM.Collect$$rtentry$$00000000)
    .ARM.Collect$$rtentry$$00000002          0x08000214   Section        0  __rtentry2.o(.ARM.Collect$$rtentry$$00000002)
    .ARM.Collect$$rtentry$$00000004          0x08000214   Section        6  __rtentry4.o(.ARM.Collect$$rtentry$$00000004)
    .ARM.Collect$$rtentry$$00000008          0x0800021a   Section        8  __rtentry2.o(.ARM.Collect$$rtentry$$00000008)
    .ARM.Collect$$rtentry$$0000000A          0x08000222   Section        4  __rtentry2.o(.ARM.Collect$$rtentry$$0000000A)
    .ARM.Collect$$rtentry$$0000000C          0x08000226   Section        0  __rtentry2.o(.ARM.Collect$$rtentry$$0000000C)
    .ARM.Collect$$rtentry$$0000000D          0x08000226   Section        8  __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
    .ARM.Collect$$rtexit$$00000000           0x0800022e   Section        2  rtexit.o(.ARM.Collect$$rtexit$$00000000)
    .ARM.Collect$$rtexit$$00000002           0x08000230   Section        0  rtexit2.o(.ARM.Collect$$rtexit$$00000002)
    .ARM.Collect$$rtexit$$00000003           0x08000230   Section        4  rtexit2.o(.ARM.Collect$$rtexit$$00000003)
    .ARM.Collect$$rtexit$$00000004           0x08000234   Section        6  rtexit2.o(.ARM.Collect$$rtexit$$00000004)
    $v0                                      0x0800023c   Number         0  startup_apm32f40x.o(.text)
    .text                                    0x0800023c   Section       64  startup_apm32f40x.o(.text)
    [Anonymous Symbol]                       0x0800027c   Section        0  irq_armv7m.o(.text)
    SVC_Context                              0x080002a4   Number         0  irq_armv7m.o(.text)
    SVC_FP_LazyState                         0x080002b4   Number         0  irq_armv7m.o(.text)
    SVC_ContextSave                          0x080002c6   Number         0  irq_armv7m.o(.text)
    SVC_ContextRestore                       0x080002dc   Number         0  irq_armv7m.o(.text)
    SVC_Exit                                 0x080002f8   Number         0  irq_armv7m.o(.text)
    SVC_User                                 0x080002fa   Number         0  irq_armv7m.o(.text)
    .text                                    0x08000344   Section      138  rt_memcpy_v6.o(.text)
    .text                                    0x080003ce   Section       68  rt_memclr.o(.text)
    .text                                    0x08000412   Section       78  rt_memclr_w.o(.text)
    .text                                    0x08000460   Section        0  heapauxi.o(.text)
    .text                                    0x08000466   Section      100  rt_memcpy_w.o(.text)
    .text                                    0x080004ca   Section       74  sys_stackheap_outer.o(.text)
    .text                                    0x08000514   Section        0  exit.o(.text)
    .text                                    0x08000528   Section        8  libspace.o(.text)
    .text                                    0x08000530   Section        0  sys_exit.o(.text)
    .text                                    0x0800053c   Section        2  use_no_semi.o(.text)
    .text                                    0x0800053e   Section        0  indicate_semi.o(.text)
    [Anonymous Symbol]                       0x08000540   Section        0  main.o(.text.CAN1_RX0_IRQHandler)
    [Anonymous Symbol]                       0x0800057c   Section        0  main.o(.text.CAN1_RX1_IRQHandler)
    [Anonymous Symbol]                       0x0800059c   Section        0  main.o(.text.CAN1_TX_IRQHandler)
    [Anonymous Symbol]                       0x080005a8   Section        0  apm32f4xx_can.o(.text.CAN_Config)
    [Anonymous Symbol]                       0x08000784   Section        0  apm32f4xx_can.o(.text.CAN_ConfigFilter)
    [Anonymous Symbol]                       0x080008f8   Section        0  apm32f4xx_can.o(.text.CAN_DisableDBGFreeze)
    [Anonymous Symbol]                       0x0800090c   Section        0  main.o(.text.CAN_Init)
    [Anonymous Symbol]                       0x08000a74   Section        0  apm32f4xx_can.o(.text.CAN_OperatingMode)
    [Anonymous Symbol]                       0x08000c08   Section        0  apm32f4xx_can.o(.text.CAN_ReleaseFIFO)
    [Anonymous Symbol]                       0x08000c34   Section        0  apm32f4xx_can.o(.text.CAN_RxMessage)
    [Anonymous Symbol]                       0x08000d88   Section        0  main.o(.text.Delay)
    [Anonymous Symbol]                       0x08000da0   Section        0  apm32f4xx_gpio.o(.text.GPIO_Config)
    [Anonymous Symbol]                       0x08000e98   Section        0  apm32f4xx_gpio.o(.text.GPIO_ConfigPinAF)
    [Anonymous Symbol]                       0x08000f34   Section        0  main.o(.text.GPIO_Init)
    [Anonymous Symbol]                       0x08000f78   Section        0  apm32f4xx_gpio.o(.text.GPIO_ResetBit)
    [Anonymous Symbol]                       0x08000f8c   Section        0  apm32f4xx_gpio.o(.text.GPIO_ToggleBit)
    [Anonymous Symbol]                       0x08000fa4   Section        0  main.o(.text.I2C_Setting)
    [Anonymous Symbol]                       0x08000fb4   Section        0  main.o(.text.IRQ_Init)
    MessageQueueGet                          0x08000fb9   Thumb Code    64  rtx_msgqueue.o(.text.MessageQueueGet)
    [Anonymous Symbol]                       0x08000fb8   Section        0  rtx_msgqueue.o(.text.MessageQueueGet)
    MessageQueuePut                          0x08000ff9   Thumb Code    88  rtx_msgqueue.o(.text.MessageQueuePut)
    [Anonymous Symbol]                       0x08000ff8   Section        0  rtx_msgqueue.o(.text.MessageQueuePut)
    MessageQueueRemove                       0x08001051   Thumb Code    28  rtx_msgqueue.o(.text.MessageQueueRemove)
    [Anonymous Symbol]                       0x08001050   Section        0  rtx_msgqueue.o(.text.MessageQueueRemove)
    [Anonymous Symbol]                       0x0800106c   Section        0  os_systick.o(.text.OS_Tick_AcknowledgeIRQ)
    __arm_cp.3_0                             0x08001074   Number         4  os_systick.o(.text.OS_Tick_AcknowledgeIRQ)
    OUTLINED_FUNCTION_0                      0x08001079   Thumb Code    12  rtx_kernel.o(.text.OUTLINED_FUNCTION_0)
    [Anonymous Symbol]                       0x08001078   Section        0  rtx_kernel.o(.text.OUTLINED_FUNCTION_0)
    OUTLINED_FUNCTION_0                      0x08001085   Thumb Code    12  rtx_msgqueue.o(.text.OUTLINED_FUNCTION_0)
    [Anonymous Symbol]                       0x08001084   Section        0  rtx_msgqueue.o(.text.OUTLINED_FUNCTION_0)
    OUTLINED_FUNCTION_1                      0x08001091   Thumb Code     6  rtx_msgqueue.o(.text.OUTLINED_FUNCTION_1)
    [Anonymous Symbol]                       0x08001090   Section        0  rtx_msgqueue.o(.text.OUTLINED_FUNCTION_1)
    [Anonymous Symbol]                       0x08001098   Section        0  apm32f4xx_rcm.o(.text.RCM_ConfigAHB)
    [Anonymous Symbol]                       0x080010c0   Section        0  apm32f4xx_rcm.o(.text.RCM_ConfigAPB1)
    [Anonymous Symbol]                       0x080010e8   Section        0  apm32f4xx_rcm.o(.text.RCM_ConfigAPB2)
    [Anonymous Symbol]                       0x08001110   Section        0  apm32f4xx_rcm.o(.text.RCM_ConfigHSE)
    [Anonymous Symbol]                       0x08001174   Section        0  apm32f4xx_rcm.o(.text.RCM_ConfigPLL1)
    [Anonymous Symbol]                       0x080011e8   Section        0  apm32f4xx_rcm.o(.text.RCM_ConfigPLL2)
    [Anonymous Symbol]                       0x08001220   Section        0  apm32f4xx_rcm.o(.text.RCM_ConfigSYSCLK)
    [Anonymous Symbol]                       0x08001240   Section        0  apm32f4xx_rcm.o(.text.RCM_DisableHSI)
    [Anonymous Symbol]                       0x08001254   Section        0  apm32f4xx_rcm.o(.text.RCM_EnableAHB1PeriphClock)
    [Anonymous Symbol]                       0x0800126c   Section        0  apm32f4xx_rcm.o(.text.RCM_EnableAPB1PeriphClock)
    [Anonymous Symbol]                       0x08001284   Section        0  apm32f4xx_rcm.o(.text.RCM_EnableAPB2PeriphClock)
    [Anonymous Symbol]                       0x0800129c   Section        0  apm32f4xx_rcm.o(.text.RCM_EnablePLL1)
    [Anonymous Symbol]                       0x080012b0   Section        0  apm32f4xx_rcm.o(.text.RCM_EnablePLL2)
    [Anonymous Symbol]                       0x080012c4   Section        0  main.o(.text.RCM_Init)
    [Anonymous Symbol]                       0x08001358   Section        0  apm32f4xx_rcm.o(.text.RCM_WaitHSEReady)
    SystemClockConfig                        0x080013a1   Thumb Code   288  system_apm32f4xx.o(.text.SystemClockConfig)
    [Anonymous Symbol]                       0x080013a0   Section        0  system_apm32f4xx.o(.text.SystemClockConfig)
    [Anonymous Symbol]                       0x080014c0   Section        0  system_apm32f4xx.o(.text.SystemCoreClockUpdate)
    [Anonymous Symbol]                       0x080015e0   Section        0  system_apm32f4xx.o(.text.SystemInit)
    TimerInsert                              0x08001655   Thumb Code    68  rtx_timer.o(.text.TimerInsert)
    [Anonymous Symbol]                       0x08001654   Section        0  rtx_timer.o(.text.TimerInsert)
    __arm_cp.9_0                             0x08001698   Number         4  rtx_timer.o(.text.TimerInsert)
    __tagsym$$used.1                         0x0800169c   Number         0  rtx_lib.o(.text._mutex_acquire)
    [Anonymous Symbol]                       0x0800169c   Section        0  rtx_lib.o(.text._mutex_acquire)
    __tagsym$$used.3                         0x080016bc   Number         0  rtx_lib.o(.text._mutex_free)
    [Anonymous Symbol]                       0x080016bc   Section        0  rtx_lib.o(.text._mutex_free)
    __tagsym$$used.0                         0x080016d0   Number         0  rtx_lib.o(.text._mutex_initialize)
    [Anonymous Symbol]                       0x080016d0   Section        0  rtx_lib.o(.text._mutex_initialize)
    __tagsym$$used.2                         0x08001704   Number         0  rtx_lib.o(.text._mutex_release)
    [Anonymous Symbol]                       0x08001704   Section        0  rtx_lib.o(.text._mutex_release)
    [Anonymous Symbol]                       0x08001720   Section        0  rtx_lib.o(.text._platform_post_stackheap_init)
    [Anonymous Symbol]                       0x08001728   Section        0  i2c.o(.text.i2c_init)
    [Anonymous Symbol]                       0x08001778   Section        0  i2c.o(.text.i2c_read)
    [Anonymous Symbol]                       0x080018bc   Section        0  i2c.o(.text.i2c_setup_gpio)
    [Anonymous Symbol]                       0x08001958   Section        0  i2c.o(.text.i2c_write)
    [Anonymous Symbol]                       0x08001a18   Section        0  main.o(.text.main)
    [Anonymous Symbol]                       0x08001a6c   Section        0  main.o(.text.main_Init)
    [Anonymous Symbol]                       0x08001a94   Section        0  rtx_kernel.o(.text.osKernelGetState)
    __arm_cp.5_0                             0x08001abc   Number         4  rtx_kernel.o(.text.osKernelGetState)
    __arm_cp.5_1                             0x08001ac0   Number         4  rtx_kernel.o(.text.osKernelGetState)
    [Anonymous Symbol]                       0x08001ac4   Section        0  rtx_kernel.o(.text.osKernelInitialize)
    __arm_cp.2_0                             0x08001aec   Number         4  rtx_kernel.o(.text.osKernelInitialize)
    [Anonymous Symbol]                       0x08001af0   Section        0  rtx_msgqueue.o(.text.osMessageQueueGet)
    __arm_cp.5_0                             0x08001b5c   Number         4  rtx_msgqueue.o(.text.osMessageQueueGet)
    [Anonymous Symbol]                       0x08001b60   Section        0  rtx_msgqueue.o(.text.osMessageQueuePut)
    __arm_cp.4_0                             0x08001bdc   Number         4  rtx_msgqueue.o(.text.osMessageQueuePut)
    [Anonymous Symbol]                       0x08001be0   Section        0  rtx_mutex.o(.text.osMutexAcquire)
    __arm_cp.4_0                             0x08001c00   Number         4  rtx_mutex.o(.text.osMutexAcquire)
    [Anonymous Symbol]                       0x08001c04   Section        0  rtx_mutex.o(.text.osMutexDelete)
    __arm_cp.7_0                             0x08001c24   Number         4  rtx_mutex.o(.text.osMutexDelete)
    [Anonymous Symbol]                       0x08001c28   Section        0  rtx_mutex.o(.text.osMutexNew)
    __arm_cp.2_0                             0x08001c48   Number         4  rtx_mutex.o(.text.osMutexNew)
    [Anonymous Symbol]                       0x08001c4c   Section        0  rtx_mutex.o(.text.osMutexRelease)
    __arm_cp.5_0                             0x08001c6c   Number         4  rtx_mutex.o(.text.osMutexRelease)
    [Anonymous Symbol]                       0x08001c70   Section        0  rtx_config.o(.text.osRtxErrorNotify)
    [Anonymous Symbol]                       0x08001c9e   Section        0  rtx_kernel.o(.text.osRtxKernelErrorNotify)
    [Anonymous Symbol]                       0x08001ca2   Section        0  rtx_kernel.o(.text.osRtxKernelPreInit)
    [Anonymous Symbol]                       0x08001ca4   Section        0  rtx_memory.o(.text.osRtxMemoryAlloc)
    [Anonymous Symbol]                       0x08001d10   Section        0  rtx_memory.o(.text.osRtxMemoryFree)
    [Anonymous Symbol]                       0x08001d52   Section        0  rtx_memory.o(.text.osRtxMemoryInit)
    [Anonymous Symbol]                       0x08001d88   Section        0  rtx_mempool.o(.text.osRtxMemoryPoolAlloc)
    [Anonymous Symbol]                       0x08001dc2   Section        0  rtx_mempool.o(.text.osRtxMemoryPoolFree)
    [Anonymous Symbol]                       0x08001e0c   Section        0  rtx_mempool.o(.text.osRtxMemoryPoolInit)
    osRtxMessageQueuePostProcess             0x08001e45   Thumb Code   170  rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess)
    [Anonymous Symbol]                       0x08001e44   Section        0  rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess)
    [Anonymous Symbol]                       0x08001ef0   Section        0  rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup)
    __arm_cp.0_0                             0x08001f10   Number         4  rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup)
    [Anonymous Symbol]                       0x08001f14   Section        0  rtx_mutex.o(.text.osRtxMutexOwnerRestore)
    [Anonymous Symbol]                       0x08001f5c   Section        0  rtx_system.o(.text.osRtxPendSV_Handler)
    [Anonymous Symbol]                       0x08001fe4   Section        0  rtx_system.o(.text.osRtxPostProcess)
    __arm_cp.2_1                             0x08002050   Number         4  rtx_system.o(.text.osRtxPostProcess)
    osRtxThreadBlock                         0x08002055   Thumb Code    52  rtx_thread.o(.text.osRtxThreadBlock)
    [Anonymous Symbol]                       0x08002054   Section        0  rtx_thread.o(.text.osRtxThreadBlock)
    osRtxThreadDelayInsert                   0x08002089   Thumb Code   124  rtx_thread.o(.text.osRtxThreadDelayInsert)
    [Anonymous Symbol]                       0x08002088   Section        0  rtx_thread.o(.text.osRtxThreadDelayInsert)
    osRtxThreadDelayRemove                   0x08002105   Thumb Code    60  rtx_thread.o(.text.osRtxThreadDelayRemove)
    [Anonymous Symbol]                       0x08002104   Section        0  rtx_thread.o(.text.osRtxThreadDelayRemove)
    [Anonymous Symbol]                       0x08002140   Section        0  rtx_thread.o(.text.osRtxThreadDelayTick)
    [Anonymous Symbol]                       0x08002190   Section        0  rtx_thread.o(.text.osRtxThreadDispatch)
    [Anonymous Symbol]                       0x080021e0   Section        0  rtx_thread.o(.text.osRtxThreadListGet)
    [Anonymous Symbol]                       0x080021f2   Section        0  rtx_thread.o(.text.osRtxThreadListPut)
    [Anonymous Symbol]                       0x0800221e   Section        0  rtx_thread.o(.text.osRtxThreadListRemove)
    [Anonymous Symbol]                       0x08002232   Section        0  rtx_thread.o(.text.osRtxThreadListSort)
    [Anonymous Symbol]                       0x08002258   Section        0  rtx_thread.o(.text.osRtxThreadReadyPut)
    [Anonymous Symbol]                       0x08002268   Section        0  rtx_thread.o(.text.osRtxThreadRegPtr)
    [Anonymous Symbol]                       0x0800227c   Section        0  rtx_thread.o(.text.osRtxThreadSwitch)
    [Anonymous Symbol]                       0x08002288   Section        0  rtx_thread.o(.text.osRtxThreadWaitEnter)
    __arm_cp.12_0                            0x080022c0   Number         4  rtx_thread.o(.text.osRtxThreadWaitEnter)
    [Anonymous Symbol]                       0x080022c4   Section        0  rtx_thread.o(.text.osRtxThreadWaitExit)
    [Anonymous Symbol]                       0x080022f4   Section        0  rtx_system.o(.text.osRtxTick_Handler)
    [Anonymous Symbol]                       0x08002368   Section        0  rtx_timer.o(.text.osRtxTimerSetup)
    __arm_cp.0_0                             0x08002380   Number         4  rtx_timer.o(.text.osRtxTimerSetup)
    __arm_cp.0_1                             0x08002384   Number         4  rtx_timer.o(.text.osRtxTimerSetup)
    [Anonymous Symbol]                       0x08002388   Section        0  rtx_timer.o(.text.osRtxTimerThread)
    osRtxTimerTick                           0x080023a9   Thumb Code   108  rtx_timer.o(.text.osRtxTimerTick)
    [Anonymous Symbol]                       0x080023a8   Section        0  rtx_timer.o(.text.osRtxTimerTick)
    __arm_cp.1_0                             0x08002414   Number         4  rtx_timer.o(.text.osRtxTimerTick)
    os_kernel_is_active                      0x08002419   Thumb Code    54  rtx_lib.o(.text.os_kernel_is_active)
    [Anonymous Symbol]                       0x08002418   Section        0  rtx_lib.o(.text.os_kernel_is_active)
    [Anonymous Symbol]                       0x08002450   Section        0  i2c.o(.text.rcc_I2C_init)
    svcRtxKernelGetState                     0x08002469   Thumb Code     8  rtx_kernel.o(.text.svcRtxKernelGetState)
    [Anonymous Symbol]                       0x08002468   Section        0  rtx_kernel.o(.text.svcRtxKernelGetState)
    __arm_cp.6_0                             0x08002470   Number         4  rtx_kernel.o(.text.svcRtxKernelGetState)
    svcRtxKernelInitialize                   0x08002475   Thumb Code   244  rtx_kernel.o(.text.svcRtxKernelInitialize)
    [Anonymous Symbol]                       0x08002474   Section        0  rtx_kernel.o(.text.svcRtxKernelInitialize)
    __arm_cp.21_0                            0x08002568   Number         4  rtx_kernel.o(.text.svcRtxKernelInitialize)
    __arm_cp.21_1                            0x0800256c   Number         4  rtx_kernel.o(.text.svcRtxKernelInitialize)
    __arm_cp.21_2                            0x08002570   Number         4  rtx_kernel.o(.text.svcRtxKernelInitialize)
    svcRtxMessageQueueGet                    0x08002575   Thumb Code   200  rtx_msgqueue.o(.text.svcRtxMessageQueueGet)
    [Anonymous Symbol]                       0x08002574   Section        0  rtx_msgqueue.o(.text.svcRtxMessageQueueGet)
    __arm_cp.22_0                            0x0800263c   Number         4  rtx_msgqueue.o(.text.svcRtxMessageQueueGet)
    svcRtxMessageQueueNew                    0x08002641   Thumb Code   272  rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
    [Anonymous Symbol]                       0x08002640   Section        0  rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
    __arm_cp.1_0                             0x08002750   Number         4  rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
    __arm_cp.1_1                             0x08002754   Number         4  rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
    svcRtxMessageQueuePut                    0x08002759   Thumb Code   168  rtx_msgqueue.o(.text.svcRtxMessageQueuePut)
    [Anonymous Symbol]                       0x08002758   Section        0  rtx_msgqueue.o(.text.svcRtxMessageQueuePut)
    __arm_cp.20_0                            0x08002800   Number         4  rtx_msgqueue.o(.text.svcRtxMessageQueuePut)
    svcRtxMutexAcquire                       0x08002805   Thumb Code   140  rtx_mutex.o(.text.svcRtxMutexAcquire)
    [Anonymous Symbol]                       0x08002804   Section        0  rtx_mutex.o(.text.svcRtxMutexAcquire)
    svcRtxMutexDelete                        0x08002891   Thumb Code   172  rtx_mutex.o(.text.svcRtxMutexDelete)
    [Anonymous Symbol]                       0x08002890   Section        0  rtx_mutex.o(.text.svcRtxMutexDelete)
    svcRtxMutexNew                           0x0800293d   Thumb Code   100  rtx_mutex.o(.text.svcRtxMutexNew)
    [Anonymous Symbol]                       0x0800293c   Section        0  rtx_mutex.o(.text.svcRtxMutexNew)
    __arm_cp.8_0                             0x080029a0   Number         4  rtx_mutex.o(.text.svcRtxMutexNew)
    svcRtxMutexRelease                       0x080029a5   Thumb Code   176  rtx_mutex.o(.text.svcRtxMutexRelease)
    [Anonymous Symbol]                       0x080029a4   Section        0  rtx_mutex.o(.text.svcRtxMutexRelease)
    __arm_cp.11_0                            0x08002a54   Number         4  rtx_mutex.o(.text.svcRtxMutexRelease)
    $v0                                      0x08002a58   Number         0  fpinit.o(x$fpl$fpinit)
    x$fpl$fpinit                             0x08002a58   Section       26  fpinit.o(x$fpl$fpinit)
    __tagsym$$used.4                         0x08002a74   Number         0  rtx_lib.o(.rodata)
    __tagsym$$used.5                         0x08002ae4   Number         0  rtx_lib.o(.rodata)
    os_idle_thread_attr                      0x08002b30   Data          36  rtx_lib.o(.rodata.os_idle_thread_attr)
    [Anonymous Symbol]                       0x08002b30   Section        0  rtx_lib.o(.rodata.os_idle_thread_attr)
    os_timer_mq_attr                         0x08002b54   Data          24  rtx_lib.o(.rodata.os_timer_mq_attr)
    [Anonymous Symbol]                       0x08002b54   Section        0  rtx_lib.o(.rodata.os_timer_mq_attr)
    os_timer_thread_attr                     0x08002b6c   Data          36  rtx_lib.o(.rodata.os_timer_thread_attr)
    [Anonymous Symbol]                       0x08002b6c   Section        0  rtx_lib.o(.rodata.os_timer_thread_attr)
    [Anonymous Symbol]                       0x08002b90   Section        0  rtx_kernel.o(.rodata.str1.4)
    .bss                                     0x200000a8   Section       96  libspace.o(.bss)
    StatucCANMode                            0x20000108   Data           4  main.o(.bss.StatucCANMode)
    [Anonymous Symbol]                       0x20000108   Section        0  main.o(.bss.StatucCANMode)
    StatusCAN                                0x2000010c   Data           4  main.o(.bss.StatusCAN)
    [Anonymous Symbol]                       0x2000010c   Section        0  main.o(.bss.StatusCAN)
    os_isr_queue                             0x20000110   Data          64  rtx_lib.o(.bss.os)
    [Anonymous Symbol]                       0x20000110   Section        0  rtx_lib.o(.bss.os)
    os_mem                                   0x20000150   Data       32768  rtx_lib.o(.bss.os)
    os_timer_mq_cb                           0x20008150   Data          52  rtx_lib.o(.bss.os.msgqueue.cb)
    [Anonymous Symbol]                       0x20008150   Section        0  rtx_lib.o(.bss.os.msgqueue.cb)
    os_timer_mq_data                         0x20008184   Data          80  rtx_lib.o(.bss.os.msgqueue.mem)
    [Anonymous Symbol]                       0x20008184   Section        0  rtx_lib.o(.bss.os.msgqueue.mem)
    os_idle_thread_cb                        0x200081d4   Data          68  rtx_lib.o(.bss.os.thread.cb)
    [Anonymous Symbol]                       0x200081d4   Section        0  rtx_lib.o(.bss.os.thread.cb)
    os_timer_thread_cb                       0x20008218   Data          68  rtx_lib.o(.bss.os.thread.cb)
    os_idle_thread_stack                     0x20008260   Data         512  rtx_lib.o(.bss.os.thread.idle.stack)
    [Anonymous Symbol]                       0x20008260   Section        0  rtx_lib.o(.bss.os.thread.idle.stack)
    os_timer_thread_stack                    0x20008460   Data         512  rtx_lib.o(.bss.os.thread.timer.stack)
    [Anonymous Symbol]                       0x20008460   Section        0  rtx_lib.o(.bss.os.thread.timer.stack)
    os_kernel_is_active.os_kernel_active     0x20008660   Data           1  rtx_lib.o(.bss.os_kernel_is_active.os_kernel_active)
    [Anonymous Symbol]                       0x20008660   Section        0  rtx_lib.o(.bss.os_kernel_is_active.os_kernel_active)
    Heap_Mem                                 0x20008668   Data         512  startup_apm32f40x.o(HEAP)
    HEAP                                     0x20008668   Section      512  startup_apm32f40x.o(HEAP)
    Stack_Mem                                0x20008868   Data        1024  startup_apm32f40x.o(STACK)
    STACK                                    0x20008868   Section     1024  startup_apm32f40x.o(STACK)
    __initial_sp                             0x20008c68   Data           0  startup_apm32f40x.o(STACK)
    FPCCR                                    0xe000ef34   Number         0  irq_armv7m.o ABSOLUTE

    Global Symbols

    Symbol Name                              Value     Ov Type        Size  Object(Section)

    BuildAttributes$$THM_ISAv4$E$P$D$K$B$S$7EM$VFPi3$EXTD16$VFPS$VFMA$PE$A:L22UL41UL21$X:L11$S22US41US21$IEEE1$IW$~IW$USESV6$~STKCKD$USESV7$~SHL$OSPACE$ROPI$EBA8$UX$STANDARDLIB$REQ8$PRES8$EABIv2 0x00000000   Number         0  anon$$obj.o ABSOLUTE
    .bss.os.evflags.cb$$Base                  - Undefined Weak Reference
    .bss.os.evflags.cb$$Limit                 - Undefined Weak Reference
    .bss.os.mempool.cb$$Base                  - Undefined Weak Reference
    .bss.os.mempool.cb$$Limit                 - Undefined Weak Reference
    .bss.os.mutex.cb$$Base                    - Undefined Weak Reference
    .bss.os.mutex.cb$$Limit                   - Undefined Weak Reference
    .bss.os.semaphore.cb$$Base                - Undefined Weak Reference
    .bss.os.semaphore.cb$$Limit               - Undefined Weak Reference
    .bss.os.timer.cb$$Base                    - Undefined Weak Reference
    .bss.os.timer.cb$$Limit                   - Undefined Weak Reference
    __ARM_exceptions_init                     - Undefined Weak Reference
    __alloca_initialize                       - Undefined Weak Reference
    __arm_preinit_                            - Undefined Weak Reference
    __arm_relocate_pie_                       - Undefined Weak Reference
    __cpp_initialize__aeabi_                  - Undefined Weak Reference
    __cxa_finalize                            - Undefined Weak Reference
    __rt_locale                               - Undefined Weak Reference
    __sigvec_lookup                           - Undefined Weak Reference
    _atexit_init                              - Undefined Weak Reference
    _call_atexit_fns                          - Undefined Weak Reference
    _clock_init                               - Undefined Weak Reference
    _fp_trap_init                             - Undefined Weak Reference
    _fp_trap_shutdown                         - Undefined Weak Reference
    _get_lc_collate                           - Undefined Weak Reference
    _get_lc_ctype                             - Undefined Weak Reference
    _get_lc_monetary                          - Undefined Weak Reference
    _get_lc_numeric                           - Undefined Weak Reference
    _get_lc_time                              - Undefined Weak Reference
    _getenv_init                              - Undefined Weak Reference
    _handle_redirection                       - Undefined Weak Reference
    _init_alloc                               - Undefined Weak Reference
    _init_user_alloc                          - Undefined Weak Reference
    _initio                                   - Undefined Weak Reference
    _rand_init                                - Undefined Weak Reference
    _signal_finish                            - Undefined Weak Reference
    _signal_init                              - Undefined Weak Reference
    _terminate_alloc                          - Undefined Weak Reference
    _terminate_user_alloc                     - Undefined Weak Reference
    _terminateio                              - Undefined Weak Reference
    __Vectors_Size                           0x00000194   Number         0  startup_apm32f40x.o ABSOLUTE
    __Vectors                                0x08000000   Data           4  startup_apm32f40x.o(RESET)
    __Vectors_End                            0x08000194   Data           0  startup_apm32f40x.o(RESET)
    __main                                   0x08000195   Thumb Code     8  __main.o(!!!main)
    __scatterload                            0x0800019d   Thumb Code     0  __scatter.o(!!!scatter)
    __scatterload_rt2                        0x0800019d   Thumb Code    44  __scatter.o(!!!scatter)
    __scatterload_rt2_thumb_only             0x0800019d   Thumb Code     0  __scatter.o(!!!scatter)
    __scatterload_null                       0x080001ab   Thumb Code     0  __scatter.o(!!!scatter)
    __scatterload_copy                       0x080001d1   Thumb Code    26  __scatter_copy.o(!!handler_copy)
    __scatterload_zeroinit                   0x080001ed   Thumb Code    28  __scatter_zi.o(!!handler_zi)
    __rt_lib_init                            0x08000209   Thumb Code     0  libinit.o(.ARM.Collect$$libinit$$00000000)
    __rt_lib_init_fp_1                       0x0800020b   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000001)
    __rt_lib_init_alloca_1                   0x0800020f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000030)
    __rt_lib_init_argv_1                     0x0800020f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$0000002E)
    __rt_lib_init_atexit_1                   0x0800020f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$0000001D)
    __rt_lib_init_clock_1                    0x0800020f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000023)
    __rt_lib_init_cpp_1                      0x0800020f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000034)
    __rt_lib_init_exceptions_1               0x0800020f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000032)
    __rt_lib_init_fp_trap_1                  0x0800020f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000021)
    __rt_lib_init_getenv_1                   0x0800020f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000025)
    __rt_lib_init_heap_1                     0x0800020f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$0000000C)
    __rt_lib_init_lc_collate_1               0x0800020f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000013)
    __rt_lib_init_lc_ctype_1                 0x0800020f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000015)
    __rt_lib_init_lc_monetary_1              0x0800020f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000017)
    __rt_lib_init_lc_numeric_1               0x0800020f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000019)
    __rt_lib_init_lc_time_1                  0x0800020f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$0000001B)
    __rt_lib_init_preinit_1                  0x0800020f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000006)
    __rt_lib_init_rand_1                     0x0800020f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000010)
    __rt_lib_init_relocate_pie_1             0x0800020f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000004)
    __rt_lib_init_return                     0x0800020f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000035)
    __rt_lib_init_signal_1                   0x0800020f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$0000001F)
    __rt_lib_init_stdio_1                    0x0800020f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$00000027)
    __rt_lib_init_user_alloc_1               0x0800020f   Thumb Code     0  libinit2.o(.ARM.Collect$$libinit$$0000000E)
    __rt_lib_shutdown                        0x08000211   Thumb Code     0  libshutdown.o(.ARM.Collect$$libshutdown$$00000000)
    __rt_lib_shutdown_cpp_1                  0x08000213   Thumb Code     0  libshutdown2.o(.ARM.Collect$$libshutdown$$00000002)
    __rt_lib_shutdown_fp_trap_1              0x08000213   Thumb Code     0  libshutdown2.o(.ARM.Collect$$libshutdown$$00000007)
    __rt_lib_shutdown_heap_1                 0x08000213   Thumb Code     0  libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F)
    __rt_lib_shutdown_return                 0x08000213   Thumb Code     0  libshutdown2.o(.ARM.Collect$$libshutdown$$00000010)
    __rt_lib_shutdown_signal_1               0x08000213   Thumb Code     0  libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A)
    __rt_lib_shutdown_stdio_1                0x08000213   Thumb Code     0  libshutdown2.o(.ARM.Collect$$libshutdown$$00000004)
    __rt_lib_shutdown_user_alloc_1           0x08000213   Thumb Code     0  libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C)
    __rt_entry                               0x08000215   Thumb Code     0  __rtentry.o(.ARM.Collect$$rtentry$$00000000)
    __rt_entry_presh_1                       0x08000215   Thumb Code     0  __rtentry2.o(.ARM.Collect$$rtentry$$00000002)
    __rt_entry_sh                            0x08000215   Thumb Code     0  __rtentry4.o(.ARM.Collect$$rtentry$$00000004)
    __rt_entry_postsh_1                      0x0800021b   Thumb Code     0  __rtentry2.o(.ARM.Collect$$rtentry$$00000008)
    __rt_entry_li                            0x08000223   Thumb Code     0  __rtentry2.o(.ARM.Collect$$rtentry$$0000000A)
    __rt_entry_main                          0x08000227   Thumb Code     0  __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
    __rt_entry_postli_1                      0x08000227   Thumb Code     0  __rtentry2.o(.ARM.Collect$$rtentry$$0000000C)
    __rt_exit                                0x0800022f   Thumb Code     0  rtexit.o(.ARM.Collect$$rtexit$$00000000)
    __rt_exit_ls                             0x08000231   Thumb Code     0  rtexit2.o(.ARM.Collect$$rtexit$$00000003)
    __rt_exit_prels_1                        0x08000231   Thumb Code     0  rtexit2.o(.ARM.Collect$$rtexit$$00000002)
    __rt_exit_exit                           0x08000235   Thumb Code     0  rtexit2.o(.ARM.Collect$$rtexit$$00000004)
    Reset_Handler                            0x0800023d   Thumb Code     8  startup_apm32f40x.o(.text)
    NMI_Handler                              0x08000245   Thumb Code     2  startup_apm32f40x.o(.text)
    HardFault_Handler                        0x08000247   Thumb Code     2  startup_apm32f40x.o(.text)
    MemManage_Handler                        0x08000249   Thumb Code     2  startup_apm32f40x.o(.text)
    BusFault_Handler                         0x0800024b   Thumb Code     2  startup_apm32f40x.o(.text)
    UsageFault_Handler                       0x0800024d   Thumb Code     2  startup_apm32f40x.o(.text)
    DebugMon_Handler                         0x08000251   Thumb Code     2  startup_apm32f40x.o(.text)
    ADC_IRQHandler                           0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    BN_IRQHandler                            0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    CAN1_SCE_IRQHandler                      0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    CAN2_RX0_IRQHandler                      0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    CAN2_RX1_IRQHandler                      0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    CAN2_SCE_IRQHandler                      0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    CAN2_TX_IRQHandler                       0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    DCI_IRQHandler                           0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    DMA1_STR0_IRQHandler                     0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    DMA1_STR1_IRQHandler                     0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    DMA1_STR2_IRQHandler                     0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    DMA1_STR3_IRQHandler                     0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    DMA1_STR4_IRQHandler                     0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    DMA1_STR5_IRQHandler                     0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    DMA1_STR6_IRQHandler                     0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    DMA1_STR7_IRQHandler                     0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    DMA2_STR0_IRQHandler                     0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    DMA2_STR1_IRQHandler                     0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    DMA2_STR2_IRQHandler                     0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    DMA2_STR3_IRQHandler                     0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    DMA2_STR4_IRQHandler                     0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    DMA2_STR5_IRQHandler                     0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    DMA2_STR6_IRQHandler                     0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    DMA2_STR7_IRQHandler                     0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    EINT0_IRQHandler                         0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    EINT15_10_IRQHandler                     0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    EINT1_IRQHandler                         0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    EINT2_IRQHandler                         0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    EINT3_IRQHandler                         0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    EINT4_IRQHandler                         0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    EINT9_5_IRQHandler                       0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    EMMC_IRQHandler                          0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    ETH_IRQHandler                           0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    ETH_WKUP_IRQHandler                      0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    FLASH_IRQHandler                         0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    FPU_IRQHandler                           0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    I2C1_ER_IRQHandler                       0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    I2C1_EV_IRQHandler                       0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    I2C2_ER_IRQHandler                       0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    I2C2_EV_IRQHandler                       0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    I2C3_ER_IRQHandler                       0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    I2C3_EV_IRQHandler                       0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    OTG_FS_IRQHandler                        0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    OTG_FS_WKUP_IRQHandler                   0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    OTG_HS1_EP1_IN_IRQHandler                0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    OTG_HS1_EP1_OUT_IRQHandler               0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    OTG_HS1_IRQHandler                       0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    OTG_HS1_WKUP_IRQHandler                  0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    PVD_IRQHandler                           0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    RCM_IRQHandler                           0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    RTC_Alarm_IRQHandler                     0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    RTC_WKUP_IRQHandler                      0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    SDIO_IRQHandler                          0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    SM3_IRQHandler                           0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    SM4_IRQHandler                           0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    SPI1_IRQHandler                          0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    SPI2_IRQHandler                          0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    SPI3_IRQHandler                          0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    TAMP_STAMP_IRQHandler                    0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    TMR1_BRK_TMR9_IRQHandler                 0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    TMR1_CC_IRQHandler                       0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    TMR1_TRG_COM_TMR11_IRQHandler            0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    TMR1_UP_TMR10_IRQHandler                 0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    TMR2_IRQHandler                          0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    TMR3_IRQHandler                          0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    TMR4_IRQHandler                          0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    TMR5_IRQHandler                          0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    TMR6_DAC_IRQHandler                      0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    TMR7_IRQHandler                          0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    TMR8_BRK_TMR12_IRQHandler                0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    TMR8_CC_IRQHandler                       0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    TMR8_TRG_COM_TMR14_IRQHandler            0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    TMR8_UP_TMR13_IRQHandler                 0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    UART4_IRQHandler                         0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    UART5_IRQHandler                         0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    USART1_IRQHandler                        0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    USART2_IRQHandler                        0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    USART3_IRQHandler                        0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    USART6_IRQHandler                        0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    WWDT_IRQHandler                          0x08000257   Thumb Code     0  startup_apm32f40x.o(.text)
    __user_initial_stackheap                 0x08000259   Thumb Code     0  startup_apm32f40x.o(.text)
    SVC_Handler                              0x0800027d   Thumb Code   154  irq_armv7m.o(.text)
    PendSV_Handler                           0x08000317   Thumb Code    16  irq_armv7m.o(.text)
    SysTick_Handler                          0x08000327   Thumb Code    16  irq_armv7m.o(.text)
    __aeabi_memcpy                           0x08000345   Thumb Code     0  rt_memcpy_v6.o(.text)
    __rt_memcpy                              0x08000345   Thumb Code   138  rt_memcpy_v6.o(.text)
    _memcpy_lastbytes                        0x080003ab   Thumb Code     0  rt_memcpy_v6.o(.text)
    __aeabi_memclr                           0x080003cf   Thumb Code     0  rt_memclr.o(.text)
    __rt_memclr                              0x080003cf   Thumb Code     0  rt_memclr.o(.text)
    _memset                                  0x080003d3   Thumb Code    64  rt_memclr.o(.text)
    __aeabi_memclr4                          0x08000413   Thumb Code     0  rt_memclr_w.o(.text)
    __aeabi_memclr8                          0x08000413   Thumb Code     0  rt_memclr_w.o(.text)
    __rt_memclr_w                            0x08000413   Thumb Code     0  rt_memclr_w.o(.text)
    _memset_w                                0x08000417   Thumb Code    74  rt_memclr_w.o(.text)
    __use_two_region_memory                  0x08000461   Thumb Code     2  heapauxi.o(.text)
    __rt_heap_escrow$2region                 0x08000463   Thumb Code     2  heapauxi.o(.text)
    __rt_heap_expand$2region                 0x08000465   Thumb Code     2  heapauxi.o(.text)
    __aeabi_memcpy4                          0x08000467   Thumb Code     0  rt_memcpy_w.o(.text)
    __aeabi_memcpy8                          0x08000467   Thumb Code     0  rt_memcpy_w.o(.text)
    __rt_memcpy_w                            0x08000467   Thumb Code   100  rt_memcpy_w.o(.text)
    _memcpy_lastbytes_aligned                0x080004af   Thumb Code     0  rt_memcpy_w.o(.text)
    __user_setup_stackheap                   0x080004cb   Thumb Code    74  sys_stackheap_outer.o(.text)
    exit                                     0x08000515   Thumb Code    18  exit.o(.text)
    __user_libspace                          0x08000529   Thumb Code     8  libspace.o(.text)
    __user_perproc_libspace                  0x08000529   Thumb Code     0  libspace.o(.text)
    _sys_exit                                0x08000531   Thumb Code     8  sys_exit.o(.text)
    __I$use$semihosting                      0x0800053d   Thumb Code     0  use_no_semi.o(.text)
    __use_no_semihosting_swi                 0x0800053d   Thumb Code     2  use_no_semi.o(.text)
    __semihosting_library_function           0x0800053f   Thumb Code     0  indicate_semi.o(.text)
    CAN1_RX0_IRQHandler                      0x08000541   Thumb Code    60  main.o(.text.CAN1_RX0_IRQHandler)
    CAN1_RX1_IRQHandler                      0x0800057d   Thumb Code    32  main.o(.text.CAN1_RX1_IRQHandler)
    CAN1_TX_IRQHandler                       0x0800059d   Thumb Code    12  main.o(.text.CAN1_TX_IRQHandler)
    CAN_Config                               0x080005a9   Thumb Code   474  apm32f4xx_can.o(.text.CAN_Config)
    CAN_ConfigFilter                         0x08000785   Thumb Code   370  apm32f4xx_can.o(.text.CAN_ConfigFilter)
    CAN_DisableDBGFreeze                     0x080008f9   Thumb Code    18  apm32f4xx_can.o(.text.CAN_DisableDBGFreeze)
    CAN_Init                                 0x0800090d   Thumb Code   360  main.o(.text.CAN_Init)
    CAN_OperatingMode                        0x08000a75   Thumb Code   404  apm32f4xx_can.o(.text.CAN_OperatingMode)
    CAN_ReleaseFIFO                          0x08000c09   Thumb Code    44  apm32f4xx_can.o(.text.CAN_ReleaseFIFO)
    CAN_RxMessage                            0x08000c35   Thumb Code   340  apm32f4xx_can.o(.text.CAN_RxMessage)
    Delay                                    0x08000d89   Thumb Code    22  main.o(.text.Delay)
    GPIO_Config                              0x08000da1   Thumb Code   246  apm32f4xx_gpio.o(.text.GPIO_Config)
    GPIO_ConfigPinAF                         0x08000e99   Thumb Code   154  apm32f4xx_gpio.o(.text.GPIO_ConfigPinAF)
    GPIO_Init                                0x08000f35   Thumb Code    68  main.o(.text.GPIO_Init)
    GPIO_ResetBit                            0x08000f79   Thumb Code    20  apm32f4xx_gpio.o(.text.GPIO_ResetBit)
    GPIO_ToggleBit                           0x08000f8d   Thumb Code    24  apm32f4xx_gpio.o(.text.GPIO_ToggleBit)
    I2C_Setting                              0x08000fa5   Thumb Code    16  main.o(.text.I2C_Setting)
    IRQ_Init                                 0x08000fb5   Thumb Code     4  main.o(.text.IRQ_Init)
    OS_Tick_AcknowledgeIRQ                   0x0800106d   Thumb Code     8  os_systick.o(.text.OS_Tick_AcknowledgeIRQ)
    RCM_ConfigAHB                            0x08001099   Thumb Code    38  apm32f4xx_rcm.o(.text.RCM_ConfigAHB)
    RCM_ConfigAPB1                           0x080010c1   Thumb Code    38  apm32f4xx_rcm.o(.text.RCM_ConfigAPB1)
    RCM_ConfigAPB2                           0x080010e9   Thumb Code    38  apm32f4xx_rcm.o(.text.RCM_ConfigAPB2)
    RCM_ConfigHSE                            0x08001111   Thumb Code   100  apm32f4xx_rcm.o(.text.RCM_ConfigHSE)
    RCM_ConfigPLL1                           0x08001175   Thumb Code   114  apm32f4xx_rcm.o(.text.RCM_ConfigPLL1)
    RCM_ConfigPLL2                           0x080011e9   Thumb Code    56  apm32f4xx_rcm.o(.text.RCM_ConfigPLL2)
    RCM_ConfigSYSCLK                         0x08001221   Thumb Code    30  apm32f4xx_rcm.o(.text.RCM_ConfigSYSCLK)
    RCM_DisableHSI                           0x08001241   Thumb Code    18  apm32f4xx_rcm.o(.text.RCM_DisableHSI)
    RCM_EnableAHB1PeriphClock                0x08001255   Thumb Code    24  apm32f4xx_rcm.o(.text.RCM_EnableAHB1PeriphClock)
    RCM_EnableAPB1PeriphClock                0x0800126d   Thumb Code    24  apm32f4xx_rcm.o(.text.RCM_EnableAPB1PeriphClock)
    RCM_EnableAPB2PeriphClock                0x08001285   Thumb Code    24  apm32f4xx_rcm.o(.text.RCM_EnableAPB2PeriphClock)
    RCM_EnablePLL1                           0x0800129d   Thumb Code    18  apm32f4xx_rcm.o(.text.RCM_EnablePLL1)
    RCM_EnablePLL2                           0x080012b1   Thumb Code    18  apm32f4xx_rcm.o(.text.RCM_EnablePLL2)
    RCM_Init                                 0x080012c5   Thumb Code   146  main.o(.text.RCM_Init)
    RCM_WaitHSEReady                         0x08001359   Thumb Code    70  apm32f4xx_rcm.o(.text.RCM_WaitHSEReady)
    SystemCoreClockUpdate                    0x080014c1   Thumb Code   288  system_apm32f4xx.o(.text.SystemCoreClockUpdate)
    SystemInit                               0x080015e1   Thumb Code   116  system_apm32f4xx.o(.text.SystemInit)
    _mutex_acquire                           0x0800169d   Thumb Code    32  rtx_lib.o(.text._mutex_acquire)
    _mutex_free                              0x080016bd   Thumb Code    18  rtx_lib.o(.text._mutex_free)
    _mutex_initialize                        0x080016d1   Thumb Code    50  rtx_lib.o(.text._mutex_initialize)
    _mutex_release                           0x08001705   Thumb Code    28  rtx_lib.o(.text._mutex_release)
    _platform_post_stackheap_init            0x08001721   Thumb Code     8  rtx_lib.o(.text._platform_post_stackheap_init)
    i2c_init                                 0x08001729   Thumb Code    80  i2c.o(.text.i2c_init)
    i2c_read                                 0x08001779   Thumb Code   322  i2c.o(.text.i2c_read)
    i2c_setup_gpio                           0x080018bd   Thumb Code   154  i2c.o(.text.i2c_setup_gpio)
    i2c_write                                0x08001959   Thumb Code   190  i2c.o(.text.i2c_write)
    main                                     0x08001a19   Thumb Code    82  main.o(.text.main)
    main_Init                                0x08001a6d   Thumb Code    38  main.o(.text.main_Init)
    osKernelGetState                         0x08001a95   Thumb Code    40  rtx_kernel.o(.text.osKernelGetState)
    osKernelInitialize                       0x08001ac5   Thumb Code    40  rtx_kernel.o(.text.osKernelInitialize)
    osMessageQueueGet                        0x08001af1   Thumb Code   108  rtx_msgqueue.o(.text.osMessageQueueGet)
    osMessageQueuePut                        0x08001b61   Thumb Code   124  rtx_msgqueue.o(.text.osMessageQueuePut)
    osMutexAcquire                           0x08001be1   Thumb Code    32  rtx_mutex.o(.text.osMutexAcquire)
    osMutexDelete                            0x08001c05   Thumb Code    32  rtx_mutex.o(.text.osMutexDelete)
    osMutexNew                               0x08001c29   Thumb Code    32  rtx_mutex.o(.text.osMutexNew)
    osMutexRelease                           0x08001c4d   Thumb Code    32  rtx_mutex.o(.text.osMutexRelease)
    osRtxErrorNotify                         0x08001c71   Thumb Code    46  rtx_config.o(.text.osRtxErrorNotify)
    osRtxKernelErrorNotify                   0x08001c9f   Thumb Code     4  rtx_kernel.o(.text.osRtxKernelErrorNotify)
    osRtxKernelPreInit                       0x08001ca3   Thumb Code     2  rtx_kernel.o(.text.osRtxKernelPreInit)
    osRtxMemoryAlloc                         0x08001ca5   Thumb Code   108  rtx_memory.o(.text.osRtxMemoryAlloc)
    osRtxMemoryFree                          0x08001d11   Thumb Code    66  rtx_memory.o(.text.osRtxMemoryFree)
    osRtxMemoryInit                          0x08001d53   Thumb Code    54  rtx_memory.o(.text.osRtxMemoryInit)
    osRtxMemoryPoolAlloc                     0x08001d89   Thumb Code    58  rtx_mempool.o(.text.osRtxMemoryPoolAlloc)
    osRtxMemoryPoolFree                      0x08001dc3   Thumb Code    74  rtx_mempool.o(.text.osRtxMemoryPoolFree)
    osRtxMemoryPoolInit                      0x08001e0d   Thumb Code    56  rtx_mempool.o(.text.osRtxMemoryPoolInit)
    osRtxMessageQueueTimerSetup              0x08001ef1   Thumb Code    32  rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup)
    osRtxMutexOwnerRestore                   0x08001f15   Thumb Code    72  rtx_mutex.o(.text.osRtxMutexOwnerRestore)
    osRtxPendSV_Handler                      0x08001f5d   Thumb Code   136  rtx_system.o(.text.osRtxPendSV_Handler)
    osRtxPostProcess                         0x08001fe5   Thumb Code   108  rtx_system.o(.text.osRtxPostProcess)
    osRtxThreadDelayTick                     0x08002141   Thumb Code    80  rtx_thread.o(.text.osRtxThreadDelayTick)
    osRtxThreadDispatch                      0x08002191   Thumb Code    80  rtx_thread.o(.text.osRtxThreadDispatch)
    osRtxThreadListGet                       0x080021e1   Thumb Code    18  rtx_thread.o(.text.osRtxThreadListGet)
    osRtxThreadListPut                       0x080021f3   Thumb Code    44  rtx_thread.o(.text.osRtxThreadListPut)
    osRtxThreadListRemove                    0x0800221f   Thumb Code    20  rtx_thread.o(.text.osRtxThreadListRemove)
    osRtxThreadListSort                      0x08002233   Thumb Code    38  rtx_thread.o(.text.osRtxThreadListSort)
    osRtxThreadReadyPut                      0x08002259   Thumb Code    16  rtx_thread.o(.text.osRtxThreadReadyPut)
    osRtxThreadRegPtr                        0x08002269   Thumb Code    20  rtx_thread.o(.text.osRtxThreadRegPtr)
    osRtxThreadSwitch                        0x0800227d   Thumb Code    12  rtx_thread.o(.text.osRtxThreadSwitch)
    osRtxThreadWaitEnter                     0x08002289   Thumb Code    56  rtx_thread.o(.text.osRtxThreadWaitEnter)
    osRtxThreadWaitExit                      0x080022c5   Thumb Code    48  rtx_thread.o(.text.osRtxThreadWaitExit)
    osRtxTick_Handler                        0x080022f5   Thumb Code   116  rtx_system.o(.text.osRtxTick_Handler)
    osRtxTimerSetup                          0x08002369   Thumb Code    24  rtx_timer.o(.text.osRtxTimerSetup)
    osRtxTimerThread                         0x08002389   Thumb Code    32  rtx_timer.o(.text.osRtxTimerThread)
    rcc_I2C_init                             0x08002451   Thumb Code    24  i2c.o(.text.rcc_I2C_init)
    _fp_init                                 0x08002a59   Thumb Code    26  fpinit.o(x$fpl$fpinit)
    __fplib_config_fpu_vfp                   0x08002a71   Thumb Code     0  fpinit.o(x$fpl$fpinit)
    __fplib_config_pureend_doubles           0x08002a71   Thumb Code     0  fpinit.o(x$fpl$fpinit)
    osRtxConfig                              0x08002a74   Data         112  rtx_lib.o(.rodata)
    os_cb_sections                           0x08002ae4   Data          56  rtx_lib.o(.rodata)
    AHBPrescTable                            0x08002b1c   Data          16  system_apm32f4xx.o(.rodata.AHBPrescTable)
    osRtxUserSVC                             0x08002b2c   Data           4  rtx_lib.o(.rodata.osRtxUserSVC)
    Region$$Table$$Base                      0x08002b9c   Number         0  anon$$obj.o(Region$$Table)
    Region$$Table$$Limit                     0x08002bbc   Number         0  anon$$obj.o(Region$$Table)
    SystemCoreClock                          0x20000000   Data           4  system_apm32f4xx.o(.data.SystemCoreClock)
    osRtxInfo                                0x20000004   Data         164  rtx_kernel.o(.data.os)
    __libspace_start                         0x200000a8   Data          96  libspace.o(.bss)
    __temporary_stack_top$libspace           0x20000108   Data           0  libspace.o(.bss)
    .bss.os.msgqueue.cb$$Base                0x20008150   Number         0  rtx_lib.o(.bss.os.msgqueue.cb)
    .bss.os.msgqueue.cb$$Limit               0x20008184   Number         0  rtx_lib.o(.bss.os.msgqueue.cb)
    .bss.os.thread.cb$$Base                  0x200081d4   Number         0  rtx_lib.o(.bss.os.thread.cb)
    .bss.os.thread.cb$$Limit                 0x2000825c   Number         0  rtx_lib.o(.bss.os.thread.cb)



==============================================================================

Memory Map of the image

  Image Entry point : 0x08000195

  Load Region LR_IROM1 (Base: 0x08000000, Size: 0x00002c68, Max: 0x00100000, ABSOLUTE)

    Execution Region ER_IROM1 (Exec base: 0x08000000, Load base: 0x08000000, Size: 0x00002bbc, Max: 0x00100000, ABSOLUTE)

    Exec Addr    Load Addr    Size         Type   Attr      Idx    E Section Name        Object

    0x08000000   0x08000000   0x00000194   Data   RO          641    RESET               startup_apm32f40x.o
    0x08000194   0x08000194   0x00000008   Code   RO         1143  * !!!main             c_w.l(__main.o)
    0x0800019c   0x0800019c   0x00000034   Code   RO         1308    !!!scatter          c_w.l(__scatter.o)
    0x080001d0   0x080001d0   0x0000001a   Code   RO         1310    !!handler_copy      c_w.l(__scatter_copy.o)
    0x080001ea   0x080001ea   0x00000002   PAD
    0x080001ec   0x080001ec   0x0000001c   Code   RO         1312    !!handler_zi        c_w.l(__scatter_zi.o)
    0x08000208   0x08000208   0x00000002   Code   RO         1170    .ARM.Collect$$libinit$$00000000  c_w.l(libinit.o)
    0x0800020a   0x0800020a   0x00000004   Code   RO         1176    .ARM.Collect$$libinit$$00000001  c_w.l(libinit2.o)
    0x0800020e   0x0800020e   0x00000000   Code   RO         1179    .ARM.Collect$$libinit$$00000004  c_w.l(libinit2.o)
    0x0800020e   0x0800020e   0x00000000   Code   RO         1181    .ARM.Collect$$libinit$$00000006  c_w.l(libinit2.o)
    0x0800020e   0x0800020e   0x00000000   Code   RO         1184    .ARM.Collect$$libinit$$0000000C  c_w.l(libinit2.o)
    0x0800020e   0x0800020e   0x00000000   Code   RO         1186    .ARM.Collect$$libinit$$0000000E  c_w.l(libinit2.o)
    0x0800020e   0x0800020e   0x00000000   Code   RO         1188    .ARM.Collect$$libinit$$00000010  c_w.l(libinit2.o)
    0x0800020e   0x0800020e   0x00000000   Code   RO         1191    .ARM.Collect$$libinit$$00000013  c_w.l(libinit2.o)
    0x0800020e   0x0800020e   0x00000000   Code   RO         1193    .ARM.Collect$$libinit$$00000015  c_w.l(libinit2.o)
    0x0800020e   0x0800020e   0x00000000   Code   RO         1195    .ARM.Collect$$libinit$$00000017  c_w.l(libinit2.o)
    0x0800020e   0x0800020e   0x00000000   Code   RO         1197    .ARM.Collect$$libinit$$00000019  c_w.l(libinit2.o)
    0x0800020e   0x0800020e   0x00000000   Code   RO         1199    .ARM.Collect$$libinit$$0000001B  c_w.l(libinit2.o)
    0x0800020e   0x0800020e   0x00000000   Code   RO         1201    .ARM.Collect$$libinit$$0000001D  c_w.l(libinit2.o)
    0x0800020e   0x0800020e   0x00000000   Code   RO         1203    .ARM.Collect$$libinit$$0000001F  c_w.l(libinit2.o)
    0x0800020e   0x0800020e   0x00000000   Code   RO         1205    .ARM.Collect$$libinit$$00000021  c_w.l(libinit2.o)
    0x0800020e   0x0800020e   0x00000000   Code   RO         1207    .ARM.Collect$$libinit$$00000023  c_w.l(libinit2.o)
    0x0800020e   0x0800020e   0x00000000   Code   RO         1209    .ARM.Collect$$libinit$$00000025  c_w.l(libinit2.o)
    0x0800020e   0x0800020e   0x00000000   Code   RO         1211    .ARM.Collect$$libinit$$00000027  c_w.l(libinit2.o)
    0x0800020e   0x0800020e   0x00000000   Code   RO         1215    .ARM.Collect$$libinit$$0000002E  c_w.l(libinit2.o)
    0x0800020e   0x0800020e   0x00000000   Code   RO         1217    .ARM.Collect$$libinit$$00000030  c_w.l(libinit2.o)
    0x0800020e   0x0800020e   0x00000000   Code   RO         1219    .ARM.Collect$$libinit$$00000032  c_w.l(libinit2.o)
    0x0800020e   0x0800020e   0x00000000   Code   RO         1221    .ARM.Collect$$libinit$$00000034  c_w.l(libinit2.o)
    0x0800020e   0x0800020e   0x00000002   Code   RO         1222    .ARM.Collect$$libinit$$00000035  c_w.l(libinit2.o)
    0x08000210   0x08000210   0x00000002   Code   RO         1244    .ARM.Collect$$libshutdown$$00000000  c_w.l(libshutdown.o)
    0x08000212   0x08000212   0x00000000   Code   RO         1259    .ARM.Collect$$libshutdown$$00000002  c_w.l(libshutdown2.o)
    0x08000212   0x08000212   0x00000000   Code   RO         1261    .ARM.Collect$$libshutdown$$00000004  c_w.l(libshutdown2.o)
    0x08000212   0x08000212   0x00000000   Code   RO         1264    .ARM.Collect$$libshutdown$$00000007  c_w.l(libshutdown2.o)
    0x08000212   0x08000212   0x00000000   Code   RO         1267    .ARM.Collect$$libshutdown$$0000000A  c_w.l(libshutdown2.o)
    0x08000212   0x08000212   0x00000000   Code   RO         1269    .ARM.Collect$$libshutdown$$0000000C  c_w.l(libshutdown2.o)
    0x08000212   0x08000212   0x00000000   Code   RO         1272    .ARM.Collect$$libshutdown$$0000000F  c_w.l(libshutdown2.o)
    0x08000212   0x08000212   0x00000002   Code   RO         1273    .ARM.Collect$$libshutdown$$00000010  c_w.l(libshutdown2.o)
    0x08000214   0x08000214   0x00000000   Code   RO         1145    .ARM.Collect$$rtentry$$00000000  c_w.l(__rtentry.o)
    0x08000214   0x08000214   0x00000000   Code   RO         1149    .ARM.Collect$$rtentry$$00000002  c_w.l(__rtentry2.o)
    0x08000214   0x08000214   0x00000006   Code   RO         1161    .ARM.Collect$$rtentry$$00000004  c_w.l(__rtentry4.o)
    0x0800021a   0x0800021a   0x00000008   Code   RO         1150    .ARM.Collect$$rtentry$$00000008  c_w.l(__rtentry2.o)
    0x08000222   0x08000222   0x00000004   Code   RO         1152    .ARM.Collect$$rtentry$$0000000A  c_w.l(__rtentry2.o)
    0x08000226   0x08000226   0x00000000   Code   RO         1154    .ARM.Collect$$rtentry$$0000000C  c_w.l(__rtentry2.o)
    0x08000226   0x08000226   0x00000008   Code   RO         1155    .ARM.Collect$$rtentry$$0000000D  c_w.l(__rtentry2.o)
    0x0800022e   0x0800022e   0x00000002   Code   RO         1174    .ARM.Collect$$rtexit$$00000000  c_w.l(rtexit.o)
    0x08000230   0x08000230   0x00000000   Code   RO         1224    .ARM.Collect$$rtexit$$00000002  c_w.l(rtexit2.o)
    0x08000230   0x08000230   0x00000004   Code   RO         1225    .ARM.Collect$$rtexit$$00000003  c_w.l(rtexit2.o)
    0x08000234   0x08000234   0x00000006   Code   RO         1226    .ARM.Collect$$rtexit$$00000004  c_w.l(rtexit2.o)
    0x0800023a   0x0800023a   0x00000002   PAD
    0x0800023c   0x0800023c   0x00000040   Code   RO          642    .text               startup_apm32f40x.o
    0x0800027c   0x0800027c   0x000000c8   Code   RO          957    .text               RTX_CM4F.lib(irq_armv7m.o)
    0x08000344   0x08000344   0x0000008a   Code   RO         1135    .text               c_w.l(rt_memcpy_v6.o)
    0x080003ce   0x080003ce   0x00000044   Code   RO         1137    .text               c_w.l(rt_memclr.o)
    0x08000412   0x08000412   0x0000004e   Code   RO         1139    .text               c_w.l(rt_memclr_w.o)
    0x08000460   0x08000460   0x00000006   Code   RO         1141    .text               c_w.l(heapauxi.o)
    0x08000466   0x08000466   0x00000064   Code   RO         1146    .text               c_w.l(rt_memcpy_w.o)
    0x080004ca   0x080004ca   0x0000004a   Code   RO         1163    .text               c_w.l(sys_stackheap_outer.o)
    0x08000514   0x08000514   0x00000012   Code   RO         1165    .text               c_w.l(exit.o)
    0x08000526   0x08000526   0x00000002   PAD
    0x08000528   0x08000528   0x00000008   Code   RO         1171    .text               c_w.l(libspace.o)
    0x08000530   0x08000530   0x0000000c   Code   RO         1234    .text               c_w.l(sys_exit.o)
    0x0800053c   0x0800053c   0x00000002   Code   RO         1249    .text               c_w.l(use_no_semi.o)
    0x0800053e   0x0800053e   0x00000000   Code   RO         1251    .text               c_w.l(indicate_semi.o)
    0x0800053e   0x0800053e   0x00000002   PAD
    0x08000540   0x08000540   0x0000003c   Code   RO           10    .text.CAN1_RX0_IRQHandler  main.o
    0x0800057c   0x0800057c   0x00000020   Code   RO           12    .text.CAN1_RX1_IRQHandler  main.o
    0x0800059c   0x0800059c   0x0000000c   Code   RO            8    .text.CAN1_TX_IRQHandler  main.o
    0x080005a8   0x080005a8   0x000001da   Code   RO          104    .text.CAN_Config    apm32f4xx_can.o
    0x08000782   0x08000782   0x00000002   PAD
    0x08000784   0x08000784   0x00000172   Code   RO          106    .text.CAN_ConfigFilter  apm32f4xx_can.o
    0x080008f6   0x080008f6   0x00000002   PAD
    0x080008f8   0x080008f8   0x00000012   Code   RO          114    .text.CAN_DisableDBGFreeze  apm32f4xx_can.o
    0x0800090a   0x0800090a   0x00000002   PAD
    0x0800090c   0x0800090c   0x00000168   Code   RO            4    .text.CAN_Init      main.o
    0x08000a74   0x08000a74   0x00000194   Code   RO          128    .text.CAN_OperatingMode  apm32f4xx_can.o
    0x08000c08   0x08000c08   0x0000002c   Code   RO          124    .text.CAN_ReleaseFIFO  apm32f4xx_can.o
    0x08000c34   0x08000c34   0x00000154   Code   RO          122    .text.CAN_RxMessage  apm32f4xx_can.o
    0x08000d88   0x08000d88   0x00000016   Code   RO            6    .text.Delay         main.o
    0x08000d9e   0x08000d9e   0x00000002   PAD
    0x08000da0   0x08000da0   0x000000f6   Code   RO          261    .text.GPIO_Config   apm32f4xx_gpio.o
    0x08000e96   0x08000e96   0x00000002   PAD
    0x08000e98   0x08000e98   0x0000009a   Code   RO          285    .text.GPIO_ConfigPinAF  apm32f4xx_gpio.o
    0x08000f32   0x08000f32   0x00000002   PAD
    0x08000f34   0x08000f34   0x00000044   Code   RO            2    .text.GPIO_Init     main.o
    0x08000f78   0x08000f78   0x00000014   Code   RO          277    .text.GPIO_ResetBit  apm32f4xx_gpio.o
    0x08000f8c   0x08000f8c   0x00000018   Code   RO          283    .text.GPIO_ToggleBit  apm32f4xx_gpio.o
    0x08000fa4   0x08000fa4   0x00000010   Code   RO           20    .text.I2C_Setting   main.o
    0x08000fb4   0x08000fb4   0x00000004   Code   RO           18    .text.IRQ_Init      main.o
    0x08000fb8   0x08000fb8   0x00000040   Code   RO         1073    .text.MessageQueueGet  RTX_CM4F.lib(rtx_msgqueue.o)
    0x08000ff8   0x08000ff8   0x00000058   Code   RO         1067    .text.MessageQueuePut  RTX_CM4F.lib(rtx_msgqueue.o)
    0x08001050   0x08001050   0x0000001c   Code   RO         1065    .text.MessageQueueRemove  RTX_CM4F.lib(rtx_msgqueue.o)
    0x0800106c   0x0800106c   0x0000000c   Code   RO         1113    .text.OS_Tick_AcknowledgeIRQ  RTX_CM4F.lib(os_systick.o)
    0x08001078   0x08001078   0x0000000c   Code   RO          722    .text.OUTLINED_FUNCTION_0  RTX_CM4F.lib(rtx_kernel.o)
    0x08001084   0x08001084   0x0000000c   Code   RO         1081    .text.OUTLINED_FUNCTION_0  RTX_CM4F.lib(rtx_msgqueue.o)
    0x08001090   0x08001090   0x00000006   Code   RO         1083    .text.OUTLINED_FUNCTION_1  RTX_CM4F.lib(rtx_msgqueue.o)
    0x08001096   0x08001096   0x00000002   PAD
    0x08001098   0x08001098   0x00000026   Code   RO          458    .text.RCM_ConfigAHB  apm32f4xx_rcm.o
    0x080010be   0x080010be   0x00000002   PAD
    0x080010c0   0x080010c0   0x00000026   Code   RO          460    .text.RCM_ConfigAPB1  apm32f4xx_rcm.o
    0x080010e6   0x080010e6   0x00000002   PAD
    0x080010e8   0x080010e8   0x00000026   Code   RO          462    .text.RCM_ConfigAPB2  apm32f4xx_rcm.o
    0x0800110e   0x0800110e   0x00000002   PAD
    0x08001110   0x08001110   0x00000064   Code   RO          418    .text.RCM_ConfigHSE  apm32f4xx_rcm.o
    0x08001174   0x08001174   0x00000072   Code   RO          434    .text.RCM_ConfigPLL1  apm32f4xx_rcm.o
    0x080011e6   0x080011e6   0x00000002   PAD
    0x080011e8   0x080011e8   0x00000038   Code   RO          440    .text.RCM_ConfigPLL2  apm32f4xx_rcm.o
    0x08001220   0x08001220   0x0000001e   Code   RO          454    .text.RCM_ConfigSYSCLK  apm32f4xx_rcm.o
    0x0800123e   0x0800123e   0x00000002   PAD
    0x08001240   0x08001240   0x00000012   Code   RO          426    .text.RCM_DisableHSI  apm32f4xx_rcm.o
    0x08001252   0x08001252   0x00000002   PAD
    0x08001254   0x08001254   0x00000018   Code   RO          484    .text.RCM_EnableAHB1PeriphClock  apm32f4xx_rcm.o
    0x0800126c   0x0800126c   0x00000018   Code   RO          492    .text.RCM_EnableAPB1PeriphClock  apm32f4xx_rcm.o
    0x08001284   0x08001284   0x00000018   Code   RO          496    .text.RCM_EnableAPB2PeriphClock  apm32f4xx_rcm.o
    0x0800129c   0x0800129c   0x00000012   Code   RO          436    .text.RCM_EnablePLL1  apm32f4xx_rcm.o
    0x080012ae   0x080012ae   0x00000002   PAD
    0x080012b0   0x080012b0   0x00000012   Code   RO          442    .text.RCM_EnablePLL2  apm32f4xx_rcm.o
    0x080012c2   0x080012c2   0x00000002   PAD
    0x080012c4   0x080012c4   0x00000092   Code   RO           14    .text.RCM_Init      main.o
    0x08001356   0x08001356   0x00000002   PAD
    0x08001358   0x08001358   0x00000046   Code   RO          420    .text.RCM_WaitHSEReady  apm32f4xx_rcm.o
    0x0800139e   0x0800139e   0x00000002   PAD
    0x080013a0   0x080013a0   0x00000120   Code   RO          651    .text.SystemClockConfig  system_apm32f4xx.o
    0x080014c0   0x080014c0   0x00000120   Code   RO          653    .text.SystemCoreClockUpdate  system_apm32f4xx.o
    0x080015e0   0x080015e0   0x00000074   Code   RO          649    .text.SystemInit    system_apm32f4xx.o
    0x08001654   0x08001654   0x00000048   Code   RO          898    .text.TimerInsert   RTX_CM4F.lib(rtx_timer.o)
    0x0800169c   0x0800169c   0x00000020   Code   RO           63    .text._mutex_acquire  rtx_lib.o
    0x080016bc   0x080016bc   0x00000012   Code   RO           67    .text._mutex_free   rtx_lib.o
    0x080016ce   0x080016ce   0x00000002   PAD
    0x080016d0   0x080016d0   0x00000032   Code   RO           61    .text._mutex_initialize  rtx_lib.o
    0x08001702   0x08001702   0x00000002   PAD
    0x08001704   0x08001704   0x0000001c   Code   RO           65    .text._mutex_release  rtx_lib.o
    0x08001720   0x08001720   0x00000008   Code   RO           55    .text._platform_post_stackheap_init  rtx_lib.o
    0x08001728   0x08001728   0x00000050   Code   RO           38    .text.i2c_init      i2c.o
    0x08001778   0x08001778   0x00000142   Code   RO           40    .text.i2c_read      i2c.o
    0x080018ba   0x080018ba   0x00000002   PAD
    0x080018bc   0x080018bc   0x0000009a   Code   RO           34    .text.i2c_setup_gpio  i2c.o
    0x08001956   0x08001956   0x00000002   PAD
    0x08001958   0x08001958   0x000000be   Code   RO           46    .text.i2c_write     i2c.o
    0x08001a16   0x08001a16   0x00000002   PAD
    0x08001a18   0x08001a18   0x00000052   Code   RO           22    .text.main          main.o
    0x08001a6a   0x08001a6a   0x00000002   PAD
    0x08001a6c   0x08001a6c   0x00000026   Code   RO           16    .text.main_Init     main.o
    0x08001a92   0x08001a92   0x00000002   PAD
    0x08001a94   0x08001a94   0x00000030   Code   RO          674    .text.osKernelGetState  RTX_CM4F.lib(rtx_kernel.o)
    0x08001ac4   0x08001ac4   0x0000002c   Code   RO          668    .text.osKernelInitialize  RTX_CM4F.lib(rtx_kernel.o)
    0x08001af0   0x08001af0   0x00000070   Code   RO         1041    .text.osMessageQueueGet  RTX_CM4F.lib(rtx_msgqueue.o)
    0x08001b60   0x08001b60   0x00000080   Code   RO         1039    .text.osMessageQueuePut  RTX_CM4F.lib(rtx_msgqueue.o)
    0x08001be0   0x08001be0   0x00000024   Code   RO          930    .text.osMutexAcquire  RTX_CM4F.lib(rtx_mutex.o)
    0x08001c04   0x08001c04   0x00000024   Code   RO          936    .text.osMutexDelete  RTX_CM4F.lib(rtx_mutex.o)
    0x08001c28   0x08001c28   0x00000024   Code   RO          926    .text.osMutexNew    RTX_CM4F.lib(rtx_mutex.o)
    0x08001c4c   0x08001c4c   0x00000024   Code   RO          932    .text.osMutexRelease  RTX_CM4F.lib(rtx_mutex.o)
    0x08001c70   0x08001c70   0x0000002e   Code   RO           93    .text.osRtxErrorNotify  rtx_config.o
    0x08001c9e   0x08001c9e   0x00000004   Code   RO          666    .text.osRtxKernelErrorNotify  RTX_CM4F.lib(rtx_kernel.o)
    0x08001ca2   0x08001ca2   0x00000002   Code   RO          664    .text.osRtxKernelPreInit  RTX_CM4F.lib(rtx_kernel.o)
    0x08001ca4   0x08001ca4   0x0000006c   Code   RO          967    .text.osRtxMemoryAlloc  RTX_CM4F.lib(rtx_memory.o)
    0x08001d10   0x08001d10   0x00000042   Code   RO          969    .text.osRtxMemoryFree  RTX_CM4F.lib(rtx_memory.o)
    0x08001d52   0x08001d52   0x00000036   Code   RO          965    .text.osRtxMemoryInit  RTX_CM4F.lib(rtx_memory.o)
    0x08001d88   0x08001d88   0x0000003a   Code   RO          981    .text.osRtxMemoryPoolAlloc  RTX_CM4F.lib(rtx_mempool.o)
    0x08001dc2   0x08001dc2   0x0000004a   Code   RO          983    .text.osRtxMemoryPoolFree  RTX_CM4F.lib(rtx_mempool.o)
    0x08001e0c   0x08001e0c   0x00000038   Code   RO          979    .text.osRtxMemoryPoolInit  RTX_CM4F.lib(rtx_mempool.o)
    0x08001e44   0x08001e44   0x000000aa   Code   RO         1063    .text.osRtxMessageQueuePostProcess  RTX_CM4F.lib(rtx_msgqueue.o)
    0x08001eee   0x08001eee   0x00000002   PAD
    0x08001ef0   0x08001ef0   0x00000024   Code   RO         1031    .text.osRtxMessageQueueTimerSetup  RTX_CM4F.lib(rtx_msgqueue.o)
    0x08001f14   0x08001f14   0x00000048   Code   RO          924    .text.osRtxMutexOwnerRestore  RTX_CM4F.lib(rtx_mutex.o)
    0x08001f5c   0x08001f5c   0x00000088   Code   RO         1095    .text.osRtxPendSV_Handler  RTX_CM4F.lib(rtx_system.o)
    0x08001fe4   0x08001fe4   0x00000070   Code   RO         1097    .text.osRtxPostProcess  RTX_CM4F.lib(rtx_system.o)
    0x08002054   0x08002054   0x00000034   Code   RO          754    .text.osRtxThreadBlock  RTX_CM4F.lib(rtx_thread.o)
    0x08002088   0x08002088   0x0000007c   Code   RO          762    .text.osRtxThreadDelayInsert  RTX_CM4F.lib(rtx_thread.o)
    0x08002104   0x08002104   0x0000003c   Code   RO          758    .text.osRtxThreadDelayRemove  RTX_CM4F.lib(rtx_thread.o)
    0x08002140   0x08002140   0x00000050   Code   RO          746    .text.osRtxThreadDelayTick  RTX_CM4F.lib(rtx_thread.o)
    0x08002190   0x08002190   0x00000050   Code   RO          752    .text.osRtxThreadDispatch  RTX_CM4F.lib(rtx_thread.o)
    0x080021e0   0x080021e0   0x00000012   Code   RO          738    .text.osRtxThreadListGet  RTX_CM4F.lib(rtx_thread.o)
    0x080021f2   0x080021f2   0x0000002c   Code   RO          736    .text.osRtxThreadListPut  RTX_CM4F.lib(rtx_thread.o)
    0x0800221e   0x0800221e   0x00000014   Code   RO          742    .text.osRtxThreadListRemove  RTX_CM4F.lib(rtx_thread.o)
    0x08002232   0x08002232   0x00000026   Code   RO          740    .text.osRtxThreadListSort  RTX_CM4F.lib(rtx_thread.o)
    0x08002258   0x08002258   0x00000010   Code   RO          744    .text.osRtxThreadReadyPut  RTX_CM4F.lib(rtx_thread.o)
    0x08002268   0x08002268   0x00000014   Code   RO          748    .text.osRtxThreadRegPtr  RTX_CM4F.lib(rtx_thread.o)
    0x0800227c   0x0800227c   0x0000000c   Code   RO          750    .text.osRtxThreadSwitch  RTX_CM4F.lib(rtx_thread.o)
    0x08002288   0x08002288   0x0000003c   Code   RO          760    .text.osRtxThreadWaitEnter  RTX_CM4F.lib(rtx_thread.o)
    0x080022c4   0x080022c4   0x00000030   Code   RO          756    .text.osRtxThreadWaitExit  RTX_CM4F.lib(rtx_thread.o)
    0x080022f4   0x080022f4   0x00000074   Code   RO         1093    .text.osRtxTick_Handler  RTX_CM4F.lib(rtx_system.o)
    0x08002368   0x08002368   0x00000020   Code   RO          880    .text.osRtxTimerSetup  RTX_CM4F.lib(rtx_timer.o)
    0x08002388   0x08002388   0x00000020   Code   RO          884    .text.osRtxTimerThread  RTX_CM4F.lib(rtx_timer.o)
    0x080023a8   0x080023a8   0x00000070   Code   RO          882    .text.osRtxTimerTick  RTX_CM4F.lib(rtx_timer.o)
    0x08002418   0x08002418   0x00000036   Code   RO           59    .text.os_kernel_is_active  rtx_lib.o
    0x0800244e   0x0800244e   0x00000002   PAD
    0x08002450   0x08002450   0x00000018   Code   RO           36    .text.rcc_I2C_init  i2c.o
    0x08002468   0x08002468   0x0000000c   Code   RO          676    .text.svcRtxKernelGetState  RTX_CM4F.lib(rtx_kernel.o)
    0x08002474   0x08002474   0x00000100   Code   RO          706    .text.svcRtxKernelInitialize  RTX_CM4F.lib(rtx_kernel.o)
    0x08002574   0x08002574   0x000000cc   Code   RO         1075    .text.svcRtxMessageQueueGet  RTX_CM4F.lib(rtx_msgqueue.o)
    0x08002640   0x08002640   0x00000118   Code   RO         1033    .text.svcRtxMessageQueueNew  RTX_CM4F.lib(rtx_msgqueue.o)
    0x08002758   0x08002758   0x000000ac   Code   RO         1071    .text.svcRtxMessageQueuePut  RTX_CM4F.lib(rtx_msgqueue.o)
    0x08002804   0x08002804   0x0000008c   Code   RO          942    .text.svcRtxMutexAcquire  RTX_CM4F.lib(rtx_mutex.o)
    0x08002890   0x08002890   0x000000ac   Code   RO          948    .text.svcRtxMutexDelete  RTX_CM4F.lib(rtx_mutex.o)
    0x0800293c   0x0800293c   0x00000068   Code   RO          938    .text.svcRtxMutexNew  RTX_CM4F.lib(rtx_mutex.o)
    0x080029a4   0x080029a4   0x000000b4   Code   RO          944    .text.svcRtxMutexRelease  RTX_CM4F.lib(rtx_mutex.o)
    0x08002a58   0x08002a58   0x0000001a   Code   RO         1232    x$fpl$fpinit        fz_wm.l(fpinit.o)
    0x08002a72   0x08002a72   0x00000002   PAD
    0x08002a74   0x08002a74   0x00000070   Data   RO           73    .rodata             rtx_lib.o
    0x08002ae4   0x08002ae4   0x00000038   Data   RO           76    .rodata             rtx_lib.o
    0x08002b1c   0x08002b1c   0x00000010   Data   RO          656    .rodata.AHBPrescTable  system_apm32f4xx.o
    0x08002b2c   0x08002b2c   0x00000004   Data   RO           75    .rodata.osRtxUserSVC  rtx_lib.o
    0x08002b30   0x08002b30   0x00000024   Data   RO           70    .rodata.os_idle_thread_attr  rtx_lib.o
    0x08002b54   0x08002b54   0x00000018   Data   RO           72    .rodata.os_timer_mq_attr  rtx_lib.o
    0x08002b6c   0x08002b6c   0x00000024   Data   RO           71    .rodata.os_timer_thread_attr  rtx_lib.o
    0x08002b90   0x08002b90   0x0000000b   Data   RO          726    .rodata.str1.4      RTX_CM4F.lib(rtx_kernel.o)
    0x08002b9b   0x08002b9b   0x00000001   PAD
    0x08002b9c   0x08002b9c   0x00000020   Data   RO         1307    Region$$Table       anon$$obj.o


    Execution Region RW_IRAM1 (Exec base: 0x20000000, Load base: 0x08002bc0, Size: 0x00008c68, Max: 0x00020000, ABSOLUTE)

    Exec Addr    Load Addr    Size         Type   Attr      Idx    E Section Name        Object

    0x20000000   0x08002bc0   0x00000004   Data   RW          655    .data.SystemCoreClock  system_apm32f4xx.o
    0x20000004   0x08002bc4   0x000000a4   Data   RW          727    .data.os            RTX_CM4F.lib(rtx_kernel.o)
    0x200000a8        -       0x00000060   Zero   RW         1172    .bss                c_w.l(libspace.o)
    0x20000108        -       0x00000004   Zero   RW           25    .bss.StatucCANMode  main.o
    0x2000010c        -       0x00000004   Zero   RW           24    .bss.StatusCAN      main.o
    0x20000110        -       0x00008040   Zero   RW           69    .bss.os             rtx_lib.o
    0x20008150        -       0x00000034   Zero   RW           81    .bss.os.msgqueue.cb  rtx_lib.o
    0x20008184        -       0x00000050   Zero   RW           82    .bss.os.msgqueue.mem  rtx_lib.o
    0x200081d4        -       0x00000088   Zero   RW           78    .bss.os.thread.cb   rtx_lib.o
    0x2000825c   0x08002c68   0x00000004   PAD
    0x20008260        -       0x00000200   Zero   RW           79    .bss.os.thread.idle.stack  rtx_lib.o
    0x20008460        -       0x00000200   Zero   RW           80    .bss.os.thread.timer.stack  rtx_lib.o
    0x20008660        -       0x00000001   Zero   RW           83    .bss.os_kernel_is_active.os_kernel_active  rtx_lib.o
    0x20008661   0x08002c68   0x00000007   PAD
    0x20008668        -       0x00000200   Zero   RW          640    HEAP                startup_apm32f40x.o
    0x20008868        -       0x00000400   Zero   RW          639    STACK               startup_apm32f40x.o


==============================================================================

Image component sizes


      Code (inc. data)   RO Data    RW Data    ZI Data      Debug   Object Name

      1650          0          0          0          0      20450   apm32f4xx_can.o
       444          0          0          0          0      11672   apm32f4xx_gpio.o
       610          0          0          0          0      20924   apm32f4xx_rcm.o
       770          0          0          0          0      12298   i2c.o
       840          0          0          0          8      31773   main.o
        46          6          0          0          0        688   rtx_config.o
       190          0        268          0      34125       7116   rtx_lib.o
        64         26        404          0       1536        852   startup_apm32f40x.o
       692          0         16          4          0      12590   system_apm32f4xx.o

    ----------------------------------------------------------------------
      5354         32        720          4      35680     118363   Object Totals
         0          0         32          0          0          0   (incl. Generated)
        48          0          0          0         11          0   (incl. Padding)

    ----------------------------------------------------------------------

      Code (inc. data)   RO Data    RW Data    ZI Data      Debug   Library Member Name

       200         12          0          0          0        634   irq_armv7m.o
        12          4          0          0          0       3199   os_systick.o
       378         28         11        164          0      16781   rtx_kernel.o
       228          0          0          0          0       2590   rtx_memory.o
       188          0          0          0          0      16188   rtx_mempool.o
      1300         28          0          0          0      18765   rtx_msgqueue.o
       812         24          0          0          0      10068   rtx_mutex.o
       364         14          0          0          0       5444   rtx_system.o
       672          4          0          0          0      32486   rtx_thread.o
       248         16          0          0          0      10433   rtx_timer.o
         8          0          0          0          0         68   __main.o
         0          0          0          0          0          0   __rtentry.o
        20          0          0          0          0          0   __rtentry2.o
         6          0          0          0          0          0   __rtentry4.o
        52          8          0          0          0          0   __scatter.o
        26          0          0          0          0          0   __scatter_copy.o
        28          0          0          0          0          0   __scatter_zi.o
        18          0          0          0          0         80   exit.o
         6          0          0          0          0        152   heapauxi.o
         0          0          0          0          0          0   indicate_semi.o
         2          0          0          0          0          0   libinit.o
         6          0          0          0          0          0   libinit2.o
         2          0          0          0          0          0   libshutdown.o
         2          0          0          0          0          0   libshutdown2.o
         8          4          0          0         96         68   libspace.o
        68          0          0          0          0         68   rt_memclr.o
        78          0          0          0          0         80   rt_memclr_w.o
       138          0          0          0          0         68   rt_memcpy_v6.o
       100          0          0          0          0         80   rt_memcpy_w.o
         2          0          0          0          0          0   rtexit.o
        10          0          0          0          0          0   rtexit2.o
        12          4          0          0          0         68   sys_exit.o
        74          0          0          0          0         80   sys_stackheap_outer.o
         2          0          0          0          0         68   use_no_semi.o
        26          0          0          0          0        116   fpinit.o

    ----------------------------------------------------------------------
      5110        146         12        164         96     117584   Library Totals
        14          0          1          0          0          0   (incl. Padding)

    ----------------------------------------------------------------------

      Code (inc. data)   RO Data    RW Data    ZI Data      Debug   Library Name

      4402        130         11        164          0     116588   RTX_CM4F.lib
       668         16          0          0         96        880   c_w.l
        26          0          0          0          0        116   fz_wm.l

    ----------------------------------------------------------------------
      5110        146         12        164         96     117584   Library Totals

    ----------------------------------------------------------------------

==============================================================================


      Code (inc. data)   RO Data    RW Data    ZI Data      Debug   

     10464        178        732        168      35776     235263   Grand Totals
     10464        178        732        168      35776     235263   ELF Image Totals
     10464        178        732        168          0          0   ROM Totals

==============================================================================

    Total RO  Size (Code + RO Data)                11196 (  10.93kB)
    Total RW  Size (RW Data + ZI Data)             35944 (  35.10kB)
    Total ROM Size (Code + RO Data + RW Data)      11364 (  11.10kB)

==============================================================================

